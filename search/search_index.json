{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"Home","text":"Multimodal Advanced, Generative, and Intelligent Creation (MMagic [em'm\u00e6d\u0292\u026ak]) OpenMMLab \u200b\u5b98\u7f51\u200b <sup> HOT </sup> OpenMMLab \u200b\u5f00\u653e\u5e73\u53f0\u200b <sup> TRY IT OUT </sup>   [![PyPI](https://badge.fury.io/py/mmagic.svg)](https://pypi.org/project/mmagic/) [![docs](https://img.shields.io/badge/docs-latest-blue)](https://mmagic.readthedocs.io/zh_CN/latest/) [![badge](https://github.com/open-mmlab/mmagic/workflows/build/badge.svg)](https://github.com/open-mmlab/mmagic/actions) [![codecov](https://codecov.io/gh/open-mmlab/mmagic/branch/master/graph/badge.svg)](https://codecov.io/gh/open-mmlab/mmagic) [![license](https://img.shields.io/github/license/open-mmlab/mmagic.svg)](https://github.com/open-mmlab/mmagic/blob/main/LICENSE) [![open issues](https://isitmaintained.com/badge/open/open-mmlab/mmagic.svg)](https://github.com/open-mmlab/mmagic/issues) [![issue resolution](https://isitmaintained.com/badge/resolution/open-mmlab/mmagic.svg)](https://github.com/open-mmlab/mmagic/issues) [![Open in OpenXLab](https://cdn-static.openxlab.org.cn/app-center/openxlab_demo.svg)](https://openxlab.org.cn/apps?search=mmagic)  [\ud83d\udcd8\u200b\u4f7f\u7528\u200b\u6587\u6863\u200b](https://mmagic.readthedocs.io/zh_CN/latest/) | [\ud83d\udee0\ufe0f\u200b\u5b89\u88c5\u200b\u6559\u7a0b\u200b](https://mmagic.readthedocs.io/zh_CN/latest/get_started/install.html) | [\ud83d\udcca\u200b\u6a21\u578b\u5e93\u200b](https://mmagic.readthedocs.io/zh_CN/latest/model_zoo/overview.html) | [\ud83c\udd95\u200b\u66f4\u65b0\u200b\u8bb0\u5f55\u200b](https://mmagic.readthedocs.io/zh_CN/latest/changelog.html) | [\ud83d\ude80\u200b\u8fdb\u884c\u200b\u4e2d\u200b\u7684\u200b\u9879\u76ee\u200b](https://github.com/open-mmlab/mmagic/projects) | [\ud83e\udd14\u200b\u63d0\u51fa\u200b\u95ee\u9898\u200b](https://github.com/open-mmlab/mmagic/issues)  [English](README.md) | \u200b\u7b80\u4f53\u4e2d\u6587"},{"location":"#_1","title":"\ud83d\ude80 \u200b\u6700\u65b0\u8fdb\u5c55","text":""},{"location":"#mmagic-v110-22092023","title":"\u6700\u65b0\u200b\u7684\u200b MMagic v1.1.0 \u200b\u7248\u672c\u200b\u5df2\u7ecf\u200b\u5728\u200b [22/09/2023] \u200b\u53d1\u5e03\u200b:","text":"<ul> <li>\u200b\u652f\u6301\u200bViCo\uff0c\u200b\u4e00\u79cd\u200b\u65b0\u200b\u7684\u200b\u4e2a\u6027\u5316\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u7528\u4e8e\u200bSD\uff08Style Disentanglement\uff09\u3002\u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b</li> <li>\u200b\u652f\u6301\u200bAnimateDiff\uff0c\u200b\u4e00\u79cd\u200b\u6d41\u884c\u200b\u7684\u200b\u6587\u672c\u200b\u8f6c\u52a8\u200b\u753b\u200b\u65b9\u6cd5\u200b\u3002\u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b</li> <li>\u200b\u652f\u6301\u200bSDXL\uff08Stable Diffusion XL\uff09\u200b\u65b9\u6cd5\u200b\u3002\u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b</li> <li>\u200b\u652f\u6301\u200bDragGAN\u200b\u65b9\u6cd5\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4f7f\u7528\u200bMMagic\u3002\u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b</li> <li>\u200b\u652f\u6301\u200bFastComposer, \u200b\u4e00\u79cd\u200b\u65b0\u200b\u7684\u200b\u591a\u200b\u4e3b\u4f53\u200b\u6587\u672c\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\u65b9\u6cd5\u200b\u3002\u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b</li> </ul> <p>\u200b\u6211\u4eec\u200b\u6b63\u5f0f\u200b\u53d1\u5e03\u200b MMagic v1.0.0 \u200b\u7248\u672c\u200b\uff0c\u200b\u6e90\u81ea\u200b MMEditing \u200b\u548c\u200b MMGeneration\u3002</p> <p>\u200b\u7ecf\u8fc7\u200b OpenMMLab 2.0 \u200b\u6846\u67b6\u200b\u7684\u200b\u8fed\u4ee3\u200b\u66f4\u65b0\u200b\u4ee5\u53ca\u200b\u4e0e\u200b MMGeneration \u200b\u7684\u200b\u5408\u5e76\u200b\uff0cMMEditing \u200b\u5df2\u7ecf\u200b\u6210\u4e3a\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u652f\u6301\u200b\u57fa\u4e8e\u200b GAN \u200b\u548c\u200b CNN \u200b\u7684\u200b\u5e95\u5c42\u200b\u89c6\u89c9\u200b\u7b97\u6cd5\u200b\u7684\u200b\u5f3a\u5927\u200b\u5de5\u5177\u200b\u3002\u200b\u800c\u200b\u4eca\u5929\u200b\uff0cMMEditing \u200b\u5c06\u200b\u66f4\u52a0\u200b\u62e5\u62b1\u200b\u751f\u6210\u5f0f\u200b AI\uff08Generative AI\uff09\uff0c\u200b\u6b63\u5f0f\u200b\u66f4\u540d\u200b\u4e3a\u200b MMagic\uff08Multimodal Advanced, Generative, and Intelligent Creation\uff09\uff0c\u200b\u81f4\u529b\u4e8e\u200b\u6253\u9020\u200b\u66f4\u200b\u5148\u8fdb\u200b\u3001\u200b\u66f4\u200b\u5168\u9762\u200b\u7684\u200b AIGC \u200b\u5f00\u6e90\u200b\u7b97\u6cd5\u200b\u5e93\u200b\u3002MMagic \u200b\u5c06\u200b\u4e3a\u200b\u5e7f\u5927\u200b\u7814\u7a76\u8005\u200b\u4e0e\u200b AIGC \u200b\u7231\u597d\u8005\u200b\u4eec\u200b\u63d0\u4f9b\u200b\u66f4\u52a0\u200b\u5feb\u6377\u200b\u7075\u6d3b\u200b\u7684\u200b\u5b9e\u9a8c\u200b\u652f\u6301\u200b\uff0c\u200b\u52a9\u529b\u200b\u4f60\u200b\u7684\u200b AIGC \u200b\u63a2\u7d22\u4e4b\u65c5\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6b64\u6b21\u200b\u7248\u672c\u200b\u53d1\u5e03\u200b\u7684\u200b\u91cd\u70b9\u200b\u65b0\u200b\u529f\u80fd\u200b:</p> <p>1. \u200b\u65b0\u200b\u7b97\u6cd5\u200b</p> <p>\u200b\u6211\u4eec\u200b\u652f\u6301\u200b\u4e86\u200b4\u200b\u4e2a\u200b\u65b0\u200b\u4efb\u52a1\u200b\u4ee5\u53ca\u200b11\u200b\u4e2a\u200b\u65b0\u200b\u7b97\u6cd5\u200b\u3002</p> <ul> <li>Text2Image / Diffusion</li> <li>ControlNet</li> <li>DreamBooth</li> <li>Stable Diffusion</li> <li>Disco Diffusion</li> <li>GLIDE</li> <li>Guided Diffusion</li> <li>3D-aware Generation</li> <li>EG3D</li> <li>Image Restoration</li> <li>NAFNet</li> <li>Restormer</li> <li>SwinIR</li> <li>Image Colorization</li> <li>InstColorization</li> </ul> <p>2. Magic Diffusion Model</p> <p>\u200b\u9488\u5bf9\u200b Diffusion Model\uff0c\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u201c\u200b\u9b54\u6cd5\u200b\u201d</p> <ul> <li>\u200b\u652f\u6301\u200b\u57fa\u4e8e\u200b Stable Diffusion \u200b\u4e0e\u200b Disco Diffusion \u200b\u7684\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b.</li> <li>\u200b\u652f\u6301\u200b Dreambooth \u200b\u4ee5\u53ca\u200b DreamBooth LoRA \u200b\u7b49\u200b Finetune \u200b\u65b9\u6cd5\u200b.</li> <li>\u200b\u652f\u6301\u200b ControlNet \u200b\u8fdb\u884c\u200b\u53ef\u63a7\u6027\u200b\u7684\u200b\u6587\u672c\u200b\u5230\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b.</li> <li>\u200b\u652f\u6301\u200b xFormers \u200b\u52a0\u901f\u200b\u548c\u200b\u4f18\u5316\u200b\u7b56\u7565\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u8bad\u7ec3\u200b\u4e0e\u200b\u63a8\u7406\u200b\u6548\u7387\u200b.</li> <li>\u200b\u652f\u6301\u200b\u57fa\u4e8e\u200b MultiFrame Render \u200b\u7684\u200b\u89c6\u9891\u200b\u751f\u6210\u200b.</li> <li>\u200b\u652f\u6301\u200b\u901a\u8fc7\u200b Wrapper \u200b\u8c03\u7528\u200b Diffusers \u200b\u7684\u200b\u57fa\u7840\u200b\u6a21\u578b\u200b\u4ee5\u53ca\u200b\u91c7\u6837\u200b\u7b56\u7565\u200b.</li> </ul> <p>3. \u200b\u6846\u67b6\u200b\u5347\u7ea7\u200b</p> <p>\u200b\u901a\u8fc7\u200b OpenMMLab 2.0 \u200b\u6846\u67b6\u200b\u7684\u200b MMEngine \u200b\u548c\u200b MMCV\uff0c MMagic \u200b\u5728\u200b\u4ee5\u4e0b\u200b\u51e0\u200b\u65b9\u9762\u200b\u5b8c\u6210\u200b\u5347\u7ea7\u200b\uff1a</p> <ul> <li>\u200b\u91cd\u6784\u200b DataSample\uff0c\u200b\u652f\u6301\u200b batch \u200b\u7ef4\u5ea6\u200b\u7684\u200b\u7ec4\u5408\u200b\u4e0e\u200b\u62c6\u5206\u200b.</li> <li>\u200b\u91cd\u6784\u200b DataPreprocessor\uff0c\u200b\u5e76\u200b\u7edf\u4e00\u200b\u5404\u79cd\u200b\u4efb\u52a1\u200b\u5728\u200b\u8bad\u7ec3\u200b\u4e0e\u200b\u63a8\u7406\u200b\u65f6\u200b\u7684\u200b\u6570\u636e\u683c\u5f0f\u200b.</li> <li>\u200b\u91cd\u6784\u200b MultiValLoop \u200b\u4e0e\u200b MultiTestLoop\uff0c\u200b\u540c\u65f6\u200b\u652f\u6301\u200b\u751f\u6210\u200b\u7c7b\u578b\u200b\u6307\u6807\u200b\uff08e.g. FID\uff09\u200b\u4e0e\u200b\u91cd\u5efa\u200b\u7c7b\u578b\u200b\u6307\u6807\u200b\uff08e.g. SSIM\uff09 \u200b\u7684\u200b\u8bc4\u6d4b\u200b\uff0c\u200b\u540c\u65f6\u200b\u652f\u6301\u200b\u4e00\u6b21\u6027\u200b\u8bc4\u6d4b\u200b\u591a\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b</li> <li>\u200b\u652f\u6301\u200b\u672c\u5730\u200b\u53ef\u89c6\u5316\u200b\u4ee5\u53ca\u200b\u4f7f\u7528\u200b tensorboard \u200b\u6216\u200b wandb\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b.</li> <li>\u200b\u652f\u6301\u200b 33+ \u200b\u7b97\u6cd5\u200b Pytorch 2.0 \u200b\u52a0\u901f\u200b.</li> </ul> <p>MMagic \u200b\u5df2\u7ecf\u200b\u652f\u6301\u200b\u4e86\u200bMMEditing\u200b\u548c\u200bMMGeneration\u200b\u4e2d\u200b\u7684\u200b\u5168\u91cf\u200b\u4efb\u52a1\u200b\u3001\u200b\u6a21\u578b\u200b\u3001\u200b\u4f18\u5316\u200b\u51fd\u6570\u200b\u548c\u200b\u8bc4\u4ef7\u200b\u6307\u6807\u200b \uff0c\u200b\u5e76\u200b\u57fa\u4e8e\u200bMMEngine\u200b\u7edf\u4e00\u200b\u4e86\u200b\u5404\u200b\u7ec4\u4ef6\u200b\u63a5\u53e3\u200b \ud83d\ude0d\u3002</p> <p>\u200b\u5982\u679c\u200b\u60f3\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u7248\u672c\u200b\u66f4\u65b0\u200b\u7ec6\u8282\u200b\u548c\u200b\u5386\u53f2\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u200b\u9605\u8bfb\u200b\u66f4\u65b0\u200b\u65e5\u5fd7\u200b\u3002\u200b\u5982\u679c\u200b\u60f3\u200b\u4ece\u200b\u65e7\u7248\u672c\u200b MMEditing 0.x \u200b\u8fc1\u79fb\u200b\u5230\u200b\u65b0\u200b\u7248\u672c\u200b MMagic 1.x\uff0c\u200b\u8bf7\u200b\u9605\u8bfb\u200b\u8fc1\u79fb\u200b\u6587\u6863\u200b\u3002</p>"},{"location":"#_2","title":"\ud83d\udcc4 \u200b\u76ee\u5f55","text":"<ul> <li>\ufffd \u200b\u6700\u65b0\u8fdb\u5c55\u200b </li> <li>\u200b\u6700\u65b0\u200b\u7684\u200b MMagic v1.1.0 \u200b\u7248\u672c\u200b\u5df2\u7ecf\u200b\u5728\u200b [22/09/2023] \u200b\u53d1\u5e03\u200b:</li> <li>\ud83d\udcc4 \u200b\u76ee\u5f55\u200b</li> <li>\ud83d\udcd6 \u200b\u4ecb\u7ecd\u200b</li> <li>\u2728 \u200b\u4e3b\u8981\u200b\u7279\u6027\u200b</li> <li>\u2728 \u200b\u6700\u4f73\u200b\u5b9e\u8df5\u200b</li> <li>\ud83d\ude4c \u200b\u53c2\u4e0e\u200b\u8d21\u732e\u200b</li> <li>\ud83d\udee0\ufe0f \u200b\u5b89\u88c5\u200b</li> <li>\ud83d\udcca \u200b\u6a21\u578b\u5e93\u200b</li> <li>\ud83e\udd1d \u200b\u81f4\u8c22\u200b</li> <li>\ud83d\udd8a\ufe0f \u200b\u5f15\u7528\u200b</li> <li>\ud83c\udfab \u200b\u8bb8\u53ef\u8bc1\u200b</li> <li>\ud83c\udfd7\ufe0f \ufe0fOpenMMLab \u200b\u7684\u200b\u5176\u4ed6\u200b\u9879\u76ee\u200b</li> <li>\u200b\u6b22\u8fce\u200b\u52a0\u5165\u200b OpenMMLab \u200b\u793e\u533a\u200b</li> </ul>"},{"location":"#_3","title":"\ud83d\udcd6 \u200b\u4ecb\u7ecd","text":"<p>MMagic \u200b\u662f\u200b\u57fa\u4e8e\u200b PyTorch \u200b\u7684\u200b\u56fe\u50cf\u200b&amp;\u200b\u89c6\u9891\u200b\u7f16\u8f91\u200b\u548c\u200b\u751f\u6210\u200b\u5f00\u6e90\u200b\u5de5\u5177\u7bb1\u200b\u3002\u200b\u662f\u200b OpenMMLab \u200b\u9879\u76ee\u200b\u7684\u200b\u6210\u5458\u200b\u4e4b\u4e00\u200b\u3002</p> <p>\u200b\u76ee\u524d\u200b MMagic \u200b\u652f\u6301\u200b\u591a\u79cd\u200b\u56fe\u50cf\u200b\u548c\u200b\u89c6\u9891\u200b\u7684\u200b\u751f\u6210\u200b/\u200b\u7f16\u8f91\u200b\u4efb\u52a1\u200b\u3002</p> <p>https://user-images.githubusercontent.com/49083766/233564593-7d3d48ed-e843-4432-b610-35e3d257765c.mp4</p>"},{"location":"#_4","title":"\u2728 \u200b\u4e3b\u8981\u200b\u7279\u6027","text":"<ul> <li>SOTA \u200b\u7b97\u6cd5\u200b</li> </ul> <p>MMagic \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5904\u7406\u200b\u3001\u200b\u7f16\u8f91\u200b\u3001\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\u548c\u200b\u89c6\u9891\u200b\u7684\u200b SOTA \u200b\u7b97\u6cd5\u200b\u3002</p> <ul> <li>\u200b\u5f3a\u6709\u529b\u200b\u4e14\u200b\u6d41\u884c\u200b\u7684\u200b\u5e94\u7528\u200b</li> </ul> <p>MMagic \u200b\u652f\u6301\u200b\u4e86\u200b\u6d41\u884c\u200b\u7684\u200b\u56fe\u50cf\u200b\u4fee\u590d\u200b\u3001\u200b\u56fe\u6587\u200b\u751f\u6210\u200b\u30013D\u200b\u751f\u6210\u200b\u3001\u200b\u56fe\u50cf\u200b\u4fee\u8865\u200b\u3001\u200b\u62a0\u200b\u56fe\u200b\u3001\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b\u548c\u200b\u751f\u6210\u200b\u7b49\u200b\u4efb\u52a1\u200b\u7684\u200b\u5e94\u7528\u200b\u3002\u200b\u7279\u522b\u200b\u662f\u200b MMagic \u200b\u652f\u6301\u200b\u4e86\u200b Stable Diffusion \u200b\u7684\u200b\u5fae\u8c03\u200b\u548c\u200b\u8bb8\u591a\u200b\u6fc0\u52a8\u4eba\u5fc3\u200b\u7684\u200b diffusion \u200b\u5e94\u7528\u200b\uff0c\u200b\u4f8b\u5982\u200b ControlNet \u200b\u52a8\u753b\u200b\u751f\u6210\u200b\u3002MMagic \u200b\u4e5f\u200b\u652f\u6301\u200b\u4e86\u200b GANs \u200b\u7684\u200b\u63d2\u503c\u200b\uff0c\u200b\u6295\u5f71\u200b\uff0c\u200b\u7f16\u8f91\u200b\u548c\u200b\u5176\u4ed6\u200b\u6d41\u884c\u200b\u7684\u200b\u5e94\u7528\u200b\u3002\u200b\u8bf7\u200b\u7acb\u5373\u200b\u5f00\u59cb\u200b\u4f60\u200b\u7684\u200b AIGC \u200b\u63a2\u7d22\u4e4b\u65c5\u200b\uff01</p> <ul> <li>\u200b\u9ad8\u6548\u200b\u7684\u200b\u6846\u67b6\u200b</li> </ul> <p>\u200b\u901a\u8fc7\u200b OpenMMLab 2.0 \u200b\u6846\u67b6\u200b\u7684\u200b MMEngine \u200b\u548c\u200b MMCV\uff0c MMagic \u200b\u5c06\u200b\u7f16\u8f91\u200b\u6846\u67b6\u200b\u5206\u89e3\u200b\u4e3a\u200b\u4e0d\u540c\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5e76\u4e14\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u7ec4\u5408\u200b\u4e0d\u540c\u200b\u7684\u200b\u6a21\u5757\u200b\u8f7b\u677e\u200b\u5730\u200b\u6784\u5efa\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u7f16\u8f91\u5668\u200b\u6a21\u578b\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u50cf\u200b\u642d\u5efa\u200b\u201c\u200b\u4e50\u9ad8\u200b\u201d\u200b\u4e00\u6837\u200b\u5b9a\u4e49\u200b\u8bad\u7ec3\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e30\u5bcc\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u548c\u200b\u7b56\u7565\u200b\u3002\u200b\u5728\u200b MMagic \u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b APIs \u200b\u5b8c\u5168\u200b\u63a7\u5236\u200b\u8bad\u7ec3\u200b\u6d41\u7a0b\u200b\u3002\u200b\u5f97\u76ca\u4e8e\u200b MMSeparateDistributedDataParallel, \u200b\u52a8\u6001\u200b\u6a21\u578b\u200b\u7ed3\u6784\u200b\u7684\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5b9e\u73b0\u200b\u3002</p>"},{"location":"#_5","title":"\u2728 \u200b\u6700\u4f73\u200b\u5b9e\u8df5","text":"<ul> <li>\u200b\u4e3b\u200b\u5206\u652f\u200b\u4ee3\u7801\u200b\u7684\u200b\u6700\u4f73\u200b\u5b9e\u8df5\u200b\u57fa\u4e8e\u200b Python 3.9+ \u200b\u548c\u200b PyTorch 2.0+ \u3002</li> </ul> <p>\ud83d\udd1d\u200b\u8fd4\u56de\u200b\u76ee\u5f55\u200b</p>"},{"location":"#_6","title":"\ud83d\ude4c \u200b\u53c2\u4e0e\u200b\u8d21\u732e","text":"<p>\u200b\u8d8a\u6765\u8d8a\u200b\u591a\u200b\u793e\u533a\u200b\u8d21\u732e\u8005\u200b\u7684\u200b\u52a0\u5165\u200b\u4f7f\u200b\u6211\u4eec\u200b\u7684\u200b\u7b97\u6cd5\u200b\u5e93\u200b\u65e5\u76ca\u200b\u53d1\u5c55\u200b\u3002\u200b\u6700\u8fd1\u200b\u7531\u200b\u793e\u533a\u200b\u8d21\u732e\u200b\u7684\u200b\u9879\u76ee\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>SDXL \u200b\u6765\u81ea\u200b @okotaku.</li> <li>AnimateDiff \u200b\u6765\u81ea\u200b @ElliotQi.</li> <li>ViCo \u200b\u6765\u81ea\u200b @FerryHuang.</li> <li>DragGan \u200b\u6765\u81ea\u200b @qsun1.</li> <li>FastComposer \u200b\u6765\u81ea\u200b @xiaomile.</li> </ul> <p>\u200b\u4e3a\u200b\u4f7f\u200b\u5411\u200b MMagic \u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u9879\u76ee\u200b\u66f4\u52a0\u200b\u5bb9\u6613\u200b\uff0c\u200b\u6211\u4eec\u200b\u5f00\u542f\u200b\u4e86\u200b Projects \u3002</p> <p>\u200b\u611f\u8c22\u60a8\u200b\u4e3a\u200b\u6539\u5584\u200b MMagic \u200b\u6240\u200b\u505a\u200b\u7684\u200b\u6240\u6709\u200b\u8d21\u732e\u200b\u3002\u200b\u8bf7\u53c2\u9605\u200b MMCV \u200b\u4e2d\u200b\u7684\u200b CONTRIBUTING.md \u200b\u548c\u200b MMEngine \u200b\u4e2d\u200b\u7684\u200b CONTRIBUTING.md \u200b\u4ee5\u200b\u83b7\u53d6\u200b\u8d21\u732e\u200b\u6307\u5357\u200b\u3002</p> <p>\ud83d\udd1d\u200b\u8fd4\u56de\u200b\u76ee\u5f55\u200b</p>"},{"location":"#_7","title":"\ud83d\udee0\ufe0f \u200b\u5b89\u88c5","text":"<p>MMagic \u200b\u4f9d\u8d56\u200b PyTorch\uff0cMMEngine \u200b\u548c\u200b MMCV\uff0c\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5b89\u88c5\u200b\u7684\u200b\u7b80\u8981\u200b\u6b65\u9aa4\u200b\u3002</p> <p>\u200b\u6b65\u9aa4\u200b 1. \u200b\u4f9d\u7167\u200b\u5b98\u65b9\u200b\u6559\u7a0b\u200b\u5b89\u88c5\u200b PyTorch \u3002</p> <p>\u200b\u6b65\u9aa4\u200b 2. \u200b\u4f7f\u7528\u200b MIM \u200b\u5b89\u88c5\u200b MMCV\uff0cMMEngine \u200b\u548c\u200b MMagic \u3002</p> <pre><code>pip3 install openmim\nmim install 'mmcv&gt;=2.0.0'\nmim install 'mmengine'\nmim install 'mmagic'\n</code></pre> <p>\u200b\u6b65\u9aa4\u200b 3. \u200b\u9a8c\u8bc1\u200b MMagic \u200b\u5b89\u88c5\u200b\u6210\u529f\u200b\u3002</p> <pre><code>cd ~\npython -c \"import mmagic; print(mmagic.__version__)\"\n# Example output: 1.0.0\n</code></pre> <p>\u200b\u5f00\u59cb\u200b\u4f7f\u7528\u200b</p> <p>\u200b\u6210\u529f\u200b\u5b89\u88c5\u200b MMagic \u200b\u540e\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5f88\u200b\u5bb9\u6613\u200b\u5730\u4e0a\u200b\u624b\u200b\u4f7f\u7528\u200b MMagic\uff01\u200b\u4ec5\u200b\u9700\u200b\u51e0\u884c\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4f60\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b MMagic \u200b\u5b8c\u6210\u200b\u6587\u672c\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\uff01</p> <pre><code>from mmagic.apis import MMagicInferencer\nsd_inferencer = MMagicInferencer(model_name='stable_diffusion')\ntext_prompts = 'A panda is having dinner at KFC'\nresult_out_dir = 'output/sd_res.png'\nsd_inferencer.infer(text=text_prompts, result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u8bf7\u200b\u53c2\u8003\u200b\u5feb\u901f\u200b\u8fd0\u884c\u200b\u548c\u200b\u63a8\u7406\u200b\u6f14\u793a\u200b\u83b7\u53d6\u200b MMagic \u200b\u7684\u200b\u57fa\u672c\u200b\u7528\u6cd5\u200b\u3002</p> <p>\u200b\u4ece\u200b\u6e90\u7801\u200b\u5b89\u88c5\u200b MMagic</p> <p>\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4ece\u200b\u6e90\u7801\u200b\u5b89\u88c5\u200b MMagic\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u5df2\u200b\u53d1\u5e03\u200b\u7684\u200b\u7a33\u5b9a\u200b\u7248\u672c\u200b\uff0c\u200b\u800c\u200b\u5728\u200b\u6700\u65b0\u200b\u5f00\u53d1\u200b\u7684\u200b\u7248\u672c\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u5b9e\u9a8c\u200b\u3002</p> <pre><code>git clone https://github.com/open-mmlab/mmagic.git\ncd mmagic\npip3 install -e .\n</code></pre> <p>\u200b\u66f4\u200b\u8be6\u7ec6\u200b\u7684\u200b\u5b89\u88c5\u200b\u6307\u5357\u200b\u8bf7\u200b\u53c2\u8003\u200b \u200b\u5b89\u88c5\u200b\u6307\u5357\u200b \u3002</p> <p>\ud83d\udd1dBack to top</p>"},{"location":"#_8","title":"\ud83d\udcca \u200b\u6a21\u578b\u5e93","text":"\u652f\u6301\u200b\u7684\u200b\u7b97\u6cd5\u200b Conditional GANs Unconditional GANs Image Restoration Image Super-Resolution <ul> <li>SNGAN/Projection GAN (ICLR'2018)</li> <li>SAGAN (ICML'2019)</li> <li>BIGGAN/BIGGAN-DEEP (ICLR'2018)</li> </ul> <ul> <li>DCGAN (ICLR'2016)</li> <li>WGAN-GP (NeurIPS'2017)</li> <li>LSGAN (ICCV'2017)</li> <li>GGAN (ArXiv'2017)</li> <li>PGGAN (ICLR'2018)</li> <li>SinGAN (ICCV'2019)</li> <li>StyleGANV1 (CVPR'2019)</li> <li>StyleGANV2 (CVPR'2019)</li> <li>StyleGANV3 (NeurIPS'2021)</li> <li>DragGan (2023)</li> </ul> <ul> <li>SwinIR (ICCVW'2021)</li> <li>NAFNet (ECCV'2022)</li> <li>Restormer (CVPR'2022)</li> </ul> <ul> <li>SRCNN (TPAMI'2015)</li> <li>SRResNet&amp;SRGAN (CVPR'2016)</li> <li>EDSR (CVPR'2017)</li> <li>ESRGAN (ECCV'2018)</li> <li>RDN (CVPR'2018)</li> <li>DIC (CVPR'2020)</li> <li>TTSR (CVPR'2020)</li> <li>GLEAN (CVPR'2021)</li> <li>LIIF (CVPR'2021)</li> <li>Real-ESRGAN (ICCVW'2021)</li> </ul> Video Super-Resolution Video Interpolation Image Colorization Image Translation <ul> <li>EDVR (CVPR'2018)</li> <li>TOF (IJCV'2019)</li> <li>TDAN (CVPR'2020)</li> <li>BasicVSR (CVPR'2021)</li> <li>IconVSR (CVPR'2021)</li> <li>BasicVSR++ (CVPR'2022)</li> <li>RealBasicVSR (CVPR'2022)</li> </ul> <ul> <li>TOFlow (IJCV'2019)</li> <li>CAIN (AAAI'2020)</li> <li>FLAVR (CVPR'2021)</li> </ul> <ul> <li>InstColorization (CVPR'2020)</li> </ul> <ul> <li>Pix2Pix (CVPR'2017)</li> <li>CycleGAN (ICCV'2017)</li> </ul> Inpainting Matting Text-to-Image(Video) 3D-aware Generation <ul> <li>Global&amp;Local (ToG'2017)</li> <li>DeepFillv1 (CVPR'2018)</li> <li>PConv (ECCV'2018)</li> <li>DeepFillv2 (CVPR'2019)</li> <li>AOT-GAN (TVCG'2019)</li> <li>Stable Diffusion Inpainting (CVPR'2022)</li> </ul> <ul> <li>DIM (CVPR'2017)</li> <li>IndexNet (ICCV'2019)</li> <li>GCA (AAAI'2020)</li> </ul> <ul> <li>GLIDE (NeurIPS'2021)</li> <li>Guided Diffusion (NeurIPS'2021)</li> <li>Disco-Diffusion (2022)</li> <li>Stable-Diffusion (2022)</li> <li>DreamBooth (2022)</li> <li>Textual Inversion (2022)</li> <li>Prompt-to-Prompt (2022)</li> <li>Null-text Inversion (2022)</li> <li>ControlNet (2023)</li> <li>Stable Diffusion XL (2023)</li> <li>AnimateDiff (2023)</li> <li>ViCo (2023)</li> <li>FastComposer (2023)</li> </ul> <ul> <li>EG3D (CVPR'2022)</li> </ul> <p>\u200b\u8bf7\u200b\u53c2\u8003\u6a21\u578b\u200b\u5e93\u200b\u4e86\u89e3\u200b\u8be6\u60c5\u200b\u3002</p> <p>\ud83d\udd1d\u200b\u8fd4\u56de\u200b\u76ee\u5f55\u200b</p>"},{"location":"#_9","title":"\ud83e\udd1d \u200b\u81f4\u8c22","text":"<p>MMagic \u200b\u662f\u200b\u4e00\u6b3e\u200b\u7531\u200b\u4e0d\u540c\u200b\u5b66\u6821\u200b\u548c\u200b\u516c\u53f8\u200b\u5171\u540c\u200b\u8d21\u732e\u200b\u7684\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\u3002\u200b\u6211\u4eec\u200b\u611f\u8c22\u200b\u6240\u6709\u200b\u4e3a\u200b\u9879\u76ee\u200b\u63d0\u4f9b\u200b\u7b97\u6cd5\u200b\u590d\u73b0\u200b\u548c\u200b\u65b0\u200b\u529f\u80fd\u200b\u652f\u6301\u200b\u7684\u200b\u8d21\u732e\u8005\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u63d0\u4f9b\u200b\u5b9d\u8d35\u200b\u53cd\u9988\u200b\u7684\u200b\u7528\u6237\u200b\u3002\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u8be5\u200b\u5de5\u5177\u7bb1\u200b\u548c\u200b\u57fa\u51c6\u200b\u6d4b\u8bd5\u200b\u53ef\u4ee5\u200b\u4e3a\u200b\u793e\u533a\u200b\u63d0\u4f9b\u200b\u7075\u6d3b\u200b\u7684\u200b\u4ee3\u7801\u200b\u5de5\u5177\u200b\uff0c\u200b\u4f9b\u200b\u7528\u6237\u200b\u590d\u73b0\u200b\u73b0\u6709\u200b\u7b97\u6cd5\u200b\u5e76\u200b\u5f00\u53d1\u200b\u81ea\u5df1\u200b\u7684\u200b\u65b0\u200b\u6a21\u578b\u200b\uff0c\u200b\u4ece\u800c\u200b\u4e0d\u65ad\u200b\u4e3a\u200b\u5f00\u6e90\u200b\u793e\u533a\u200b\u63d0\u4f9b\u200b\u8d21\u732e\u200b\u3002</p> <p> </p> <p>\ud83d\udd1d\u200b\u8fd4\u56de\u200b\u76ee\u5f55\u200b</p>"},{"location":"#_10","title":"\ud83d\udd8a\ufe0f \u200b\u5f15\u7528","text":"<p>\u200b\u5982\u679c\u200b MMagic \u200b\u5bf9\u200b\u60a8\u200b\u7684\u200b\u7814\u7a76\u200b\u6709\u6240\u200b\u5e2e\u52a9\u200b\uff0c\u200b\u8bf7\u200b\u6309\u7167\u200b\u5982\u4e0b\u200b bibtex \u200b\u5f15\u7528\u200b\u5b83\u200b\u3002</p> <pre><code>@misc{mmagic2023,\n    title = {{MMagic}: {OpenMMLab} Multimodal Advanced, Generative, and Intelligent Creation Toolbox},\n    author = {{MMagic Contributors}},\n    howpublished = {\\url{https://github.com/open-mmlab/mmagic}},\n    year = {2023}\n}\n</code></pre> <pre><code>@misc{mmediting2022,\n    title = {{MMEditing}: {OpenMMLab} Image and Video Editing Toolbox},\n    author = {{MMEditing Contributors}},\n    howpublished = {\\url{https://github.com/open-mmlab/mmediting}},\n    year = {2022}\n}\n</code></pre> <p>\ud83d\udd1d\u200b\u8fd4\u56de\u200b\u76ee\u5f55\u200b</p>"},{"location":"#_11","title":"\ud83c\udfab \u200b\u8bb8\u53ef\u8bc1","text":"<p>\u200b\u672c\u200b\u9879\u76ee\u200b\u5f00\u200b\u6e90\u81ea\u200b Apache 2.0 license\u3002</p> <p>\ud83d\udd1d\u200b\u8fd4\u56de\u200b\u76ee\u5f55\u200b</p>"},{"location":"#openmmlab","title":"\ud83c\udfd7\ufe0f \ufe0fOpenMMLab \u200b\u7684\u200b\u5176\u4ed6\u200b\u9879\u76ee","text":"<ul> <li>MMEngine: OpenMMLab MMEngine.</li> <li>MMCV: OpenMMLab \u200b\u8ba1\u7b97\u673a\u200b\u89c6\u89c9\u200b\u57fa\u7840\u200b\u5e93\u200b</li> <li>MIM: MIM \u200b\u662f\u200b OpenMMlab \u200b\u9879\u76ee\u200b\u3001\u200b\u7b97\u6cd5\u200b\u3001\u200b\u6a21\u578b\u200b\u7684\u200b\u7edf\u4e00\u200b\u5165\u53e3\u200b</li> <li>MMPreTrain: OpenMMLab \u200b\u9884\u200b\u8bad\u7ec3\u200b\u5de5\u5177\u7bb1\u200b</li> <li>MMDetection: OpenMMLab \u200b\u76ee\u6807\u200b\u68c0\u6d4b\u200b\u5de5\u5177\u7bb1\u200b</li> <li>MMDetection3D: OpenMMLab \u200b\u65b0\u4e00\u4ee3\u200b\u901a\u7528\u200b 3D \u200b\u76ee\u6807\u200b\u68c0\u6d4b\u200b\u5e73\u53f0\u200b</li> <li>MMRotate: OpenMMLab \u200b\u65cb\u8f6c\u200b\u6846\u200b\u68c0\u6d4b\u200b\u5de5\u5177\u7bb1\u200b\u4e0e\u200b\u6d4b\u8bd5\u200b\u57fa\u51c6\u200b</li> <li>MMSegmentation: OpenMMLab \u200b\u8bed\u4e49\u200b\u5206\u5272\u200b\u5de5\u5177\u7bb1\u200b</li> <li>MMOCR: OpenMMLab \u200b\u5168\u200b\u6d41\u7a0b\u200b\u6587\u5b57\u200b\u68c0\u6d4b\u200b\u8bc6\u522b\u200b\u7406\u89e3\u200b\u5de5\u5177\u7bb1\u200b</li> <li>MMPose: OpenMMLab \u200b\u59ff\u6001\u200b\u4f30\u8ba1\u200b\u5de5\u5177\u7bb1\u200b</li> <li>MMHuman3D: OpenMMLab \u200b\u4eba\u4f53\u200b\u53c2\u6570\u200b\u5316\u200b\u6a21\u578b\u200b\u5de5\u5177\u7bb1\u200b\u4e0e\u200b\u6d4b\u8bd5\u200b\u57fa\u51c6\u200b</li> <li>MMSelfSup: OpenMMLab \u200b\u81ea\u200b\u76d1\u7763\u200b\u5b66\u4e60\u200b\u5de5\u5177\u7bb1\u200b\u4e0e\u200b\u6d4b\u8bd5\u200b\u57fa\u51c6\u200b</li> <li>MMRazor: OpenMMLab \u200b\u6a21\u578b\u200b\u538b\u7f29\u200b\u5de5\u5177\u7bb1\u200b\u4e0e\u200b\u6d4b\u8bd5\u200b\u57fa\u51c6\u200b</li> <li>MMFewShot: OpenMMLab \u200b\u5c11\u200b\u6837\u672c\u200b\u5b66\u4e60\u200b\u5de5\u5177\u7bb1\u200b\u4e0e\u200b\u6d4b\u8bd5\u200b\u57fa\u51c6\u200b</li> <li>MMAction2: OpenMMLab \u200b\u65b0\u4e00\u4ee3\u200b\u89c6\u9891\u200b\u7406\u89e3\u200b\u5de5\u5177\u7bb1\u200b</li> <li>MMTracking: OpenMMLab \u200b\u4e00\u4f53\u5316\u200b\u89c6\u9891\u200b\u76ee\u6807\u200b\u611f\u77e5\u200b\u5e73\u53f0\u200b</li> <li>MMFlow: OpenMMLab \u200b\u5149\u6d41\u200b\u4f30\u8ba1\u200b\u5de5\u5177\u7bb1\u200b\u4e0e\u200b\u6d4b\u8bd5\u200b\u57fa\u51c6\u200b</li> <li>MMagic: OpenMMLab \u200b\u65b0\u4e00\u4ee3\u200b\u4eba\u5de5\u667a\u80fd\u200b\u5185\u5bb9\u200b\u751f\u6210\u200b\uff08AIGC\uff09\u200b\u5de5\u5177\u7bb1\u200b</li> <li>MMDeploy: OpenMMLab \u200b\u6a21\u578b\u200b\u90e8\u7f72\u200b\u6846\u67b6\u200b</li> </ul> <p>\ud83d\udd1d\u200b\u8fd4\u56de\u200b\u76ee\u5f55\u200b</p>"},{"location":"#openmmlab_1","title":"\u6b22\u8fce\u200b\u52a0\u5165\u200b OpenMMLab \u200b\u793e\u533a","text":"<p>\u200b\u626b\u63cf\u200b\u4e0b\u65b9\u200b\u7684\u200b\u4e8c\u7ef4\u7801\u200b\u53ef\u200b\u5173\u6ce8\u200b OpenMMLab \u200b\u56e2\u961f\u200b\u7684\u200b \u200b\u77e5\u4e4e\u200b\u5b98\u65b9\u200b\u8d26\u53f7\u200b\uff0c\u200b\u626b\u63cf\u200b\u4e0b\u65b9\u200b\u5fae\u4fe1\u200b\u4e8c\u7ef4\u7801\u200b\u6dfb\u52a0\u200b\u55b5\u200b\u55b5\u200b\u597d\u53cb\u200b\uff0c\u200b\u8fdb\u5165\u200b MMagic \u200b\u5fae\u4fe1\u200b\u4ea4\u6d41\u200b\u793e\u7fa4\u200b\u3002\u3010\u200b\u52a0\u200b\u597d\u53cb\u200b\u7533\u8bf7\u200b\u683c\u5f0f\u200b\uff1a\u200b\u7814\u7a76\u200b\u65b9\u5411\u200b+\u200b\u5730\u533a\u200b+\u200b\u5b66\u6821\u200b/\u200b\u516c\u53f8\u200b+\u200b\u59d3\u540d\u200b\u3011</p> <p>\u200b\u6211\u4eec\u200b\u4f1a\u200b\u5728\u200b OpenMMLab \u200b\u793e\u533a\u200b\u4e3a\u200b\u5927\u5bb6\u200b</p> <ul> <li>\ud83d\udce2 \u200b\u5206\u4eab\u200b AI \u200b\u6846\u67b6\u200b\u7684\u200b\u524d\u6cbf\u200b\u6838\u5fc3\u6280\u672f\u200b</li> <li>\ud83d\udcbb \u200b\u89e3\u8bfb\u200b PyTorch \u200b\u5e38\u7528\u200b\u6a21\u5757\u200b\u6e90\u7801\u200b</li> <li>\ud83d\udcf0 \u200b\u53d1\u5e03\u200b OpenMMLab \u200b\u7684\u200b\u76f8\u5173\u200b\u65b0\u95fb\u200b</li> <li>\ud83d\ude80 \u200b\u4ecb\u7ecd\u200b OpenMMLab \u200b\u5f00\u53d1\u200b\u7684\u200b\u524d\u6cbf\u200b\u7b97\u6cd5\u200b</li> <li>\ud83c\udfc3 \u200b\u83b7\u53d6\u200b\u66f4\u200b\u9ad8\u6548\u200b\u7684\u200b\u95ee\u9898\u200b\u7b54\u7591\u200b\u548c\u200b\u610f\u89c1\u53cd\u9988\u200b</li> <li>\ud83d\udd25 \u200b\u63d0\u4f9b\u200b\u4e0e\u200b\u5404\u884c\u5404\u4e1a\u200b\u5f00\u53d1\u8005\u200b\u5145\u5206\u200b\u4ea4\u6d41\u200b\u7684\u200b\u5e73\u53f0\u200b</li> </ul> <p>\u200b\u5e72\u8d27\u200b\u6ee1\u6ee1\u200b \ud83d\udcd8\uff0c\u200b\u7b49\u200b\u4f60\u200b\u6765\u200b\u64a9\u200b \ud83d\udc97\uff0cOpenMMLab \u200b\u793e\u533a\u200b\u671f\u5f85\u200b\u60a8\u200b\u7684\u200b\u52a0\u5165\u200b \ud83d\udc6c</p>"},{"location":"changelog/","title":"\u53d8\u66f4\u200b\u65e5\u5fd7","text":""},{"location":"changelog/#v110-22092023","title":"v1.1.0 (22/09/2023)","text":"<p>\u200b\u4eae\u70b9\u200b</p> <p>\u200b\u5728\u200b\u8fd9\u6b21\u200b\u7684\u200b\u53d1\u7248\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u65b0\u200b\u652f\u6301\u200b\u4e86\u200b\u4e0b\u9762\u200b\u4e94\u4e2a\u200b\u65b0\u200b\u7684\u200b\u7b97\u6cd5\u200b.</p> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b ViCo, \u200b\u4e00\u79cd\u200b\u65b0\u200b\u7684\u200b SD personalization \u200b\u7b97\u6cd5\u200b. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b</li> </ul> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b AnimateDiff, \u200b\u4e00\u4e2a\u200b\u5f88\u706b\u200b\u7684\u200b text2animation \u200b\u7b97\u6cd5\u200b. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b</li> </ul> <p></p> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b SDXL. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b</li> </ul> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b DragGAN. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b</li> </ul> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b FastComposer. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b</li> </ul> <p>\u200b\u65b0\u200b\u529f\u80fd\u200b\u548c\u200b\u6539\u8fdb\u200b</p> <ul> <li>[\u200b\u529f\u80fd\u200b] \u200b\u652f\u6301\u200b\u4f7f\u7528\u200bdiffusers pipeline\u200b\u8fdb\u884c\u200b\u63a8\u65ad\u200b\uff0c\u200b\u9996\u5148\u200b\u4f7f\u7528\u200bsd_xl\u3002\u200b\u7531\u200b@liuwenran\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2023</li> <li>[\u200b\u589e\u5f3a\u200b] \u200b\u4e3a\u200bsd\u200b\u63a8\u7406\u200b\u5668\u200b\u6dfb\u52a0\u200b\u8d1f\u9762\u200b\u63d0\u793a\u200b\u3002\u200b\u7531\u200b@liuwenran\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2021</li> <li>[\u200b\u589e\u5f3a\u200b] \u200b\u66f4\u65b0\u200bsetup.cfg\u200b\u4e2d\u200b\u7684\u200bflake8\u200b\u68c0\u67e5\u200b\u914d\u7f6e\u200b\u3002\u200b\u7531\u200b@LeoXing1996\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2007</li> <li>[\u200b\u589e\u5f3a\u200b] \u200b\u5c06\u200b'config_name'\u200b\u4f5c\u4e3a\u200b'model_setting'\u200b\u7684\u200b\u8865\u5145\u200b\u6dfb\u52a0\u200b\u3002\u200b\u7531\u200b@liuwenran\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2027</li> <li>[\u200b\u589e\u5f3a\u200b] \u200b\u66f4\u5feb\u200b\u7684\u200b\u6d4b\u8bd5\u200b\u3002\u200b\u7531\u200b@okotaku\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2034</li> <li>[\u200b\u589e\u5f3a\u200b] \u200b\u6dfb\u52a0\u200bOpenXLab\u200b\u5fbd\u7ae0\u200b\u3002\u200b\u7531\u200b@ZhaoQiiii\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2037</li> </ul> <p>CodeCamp\u200b\u8d21\u732e\u200b</p> <ul> <li>[CodeCamp2023-643] \u200b\u6dfb\u52a0\u200bBigGAN\u200b\u7684\u200b\u65b0\u200b\u914d\u7f6e\u200b\u3002\u200b\u7531\u200b@limafang\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2003</li> <li>[CodeCamp2023-648] MMagic\u200b\u7684\u200b\u65b0\u200b\u914d\u7f6e\u200bGuidedDiffusion\u3002\u200b\u7531\u200b@ooooo-create\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2005</li> <li>[CodeCamp2023-649] MMagic\u200b\u7684\u200b\u65b0\u200b\u914d\u7f6e\u200bInstance Colorization\u3002\u200b\u7531\u200b@ooooo-create\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2010</li> <li>[CodeCamp2023-652] MMagic\u200b\u7684\u200b\u65b0\u200b\u914d\u7f6e\u200bStyleGAN3\u3002\u200b\u7531\u200b@hhy150\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2018</li> <li>[CodeCamp2023-653] \u200b\u6dfb\u52a0\u200bReal BasicVSR\u200b\u7684\u200b\u65b0\u200b\u914d\u7f6e\u200b\u3002\u200b\u7531\u200b@RangeKing\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2030</li> </ul> <p>Bug \u200b\u4fee\u590d\u200b</p> <ul> <li>[\u200b\u4fee\u590d\u200b] \u200b\u4fee\u590d\u200b\u4e3b\u9875\u200b\u4e0a\u200b\u7684\u200b\u6700\u4f73\u200b\u5b9e\u8df5\u200b\u548c\u200b\u8fd4\u56de\u200b\u76ee\u5f55\u200b\uff0c\u200b\u5c06\u200b\u65b0\u200b\u6a21\u578b\u200b\u6dfb\u52a0\u200b\u5230\u200b\u6a21\u578b\u5e93\u200b\u4e2d\u200b\u3002\u200b\u7531\u200b@liuwenran\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2001</li> <li>[\u200b\u4fee\u590d\u200b] \u200b\u68c0\u67e5\u200bCI\u200b\u9519\u8bef\u200b\u5e76\u200b\u79fb\u9664\u200b\u4e3b\u6d41\u200bGPU\u200b\u6d4b\u8bd5\u200b\u3002\u200b\u7531\u200b@liuwenran\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2013</li> <li>[\u200b\u4fee\u590d\u200b] \u200b\u68c0\u67e5\u200bCircle CI\u200b\u5185\u5b58\u200b\u3002\u200b\u7531\u200b@liuwenran\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2016</li> <li>[\u200b\u4fee\u590d\u200b] \u200b\u79fb\u9664\u200b\u4ee3\u7801\u200b\u5e76\u200b\u4fee\u590d\u200b\u526a\u8f91\u200b\u635f\u5931\u200b\u7684\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u3002\u200b\u7531\u200b@liuwenran\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2017</li> <li>[\u200b\u4fee\u590d\u200b] \u200b\u5728\u200bdiffusers pipeline\u200b\u63a8\u7406\u200b\u5668\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u4e2d\u200b\u6a21\u62df\u200b\u63a8\u7406\u200b\u3002\u200b\u7531\u200b@liuwenran\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2026</li> <li>[\u200b\u4fee\u590d\u200b] \u200b\u7531\u4e8e\u200b\u5408\u5e76\u200bdraggan\u200b\u800c\u200b\u4fee\u590d\u200b\u7684\u200b\u9519\u8bef\u200b\u3002\u200b\u7531\u200b@liuwenran\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2029</li> <li>[\u200b\u4fee\u590d\u200b] \u200b\u66f4\u65b0\u200bQR\u200b\u7801\u200b\u3002\u200b\u7531\u200b@crazysteeaam\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2009</li> <li>[\u200b\u4fee\u590d\u200b] \u200b\u7528\u200bOpenXLab\u200b\u7248\u672c\u200b\u66ff\u6362\u200bREADME\u200b\u4e2d\u200b\u7684\u200b\u4e0b\u8f7d\u200b\u94fe\u63a5\u200b\u3002\u200b\u7531\u200b@FerryHuang\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2038</li> <li>[\u200b\u4fee\u590d\u200b] \u200b\u589e\u52a0\u200b\u6587\u6863\u200b\u5b57\u7b26\u4e32\u200b\u8986\u76d6\u7387\u200b\u3002\u200b\u7531\u200b@liuwenran\u200b\u5b8c\u6210\u200b\uff0c\u200b\u5728\u200bhttps://github.com/open-mmlab/mmagic/pull/2039</li> </ul> <p>\u200b\u65b0\u200b\u8d21\u732e\u8005\u200b</p> <ul> <li>@limafang \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/2003</li> <li>@ooooo-create \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/2005</li> <li>@hhy150 \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/2018</li> <li>@ZhaoQiiii \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/2037</li> <li>@ElliotQi \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1980</li> <li>@Beaconsyh08 \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/2012</li> </ul> <p>\u200b\u5b8c\u6574\u200b\u66f4\u65b0\u200b\u65e5\u5fd7\u200b: https://github.com/open-mmlab/mmagic/compare/v1.0.2...v1.0.3</p>"},{"location":"changelog/#v102-24082023","title":"v1.0.2 (24/08/2023)","text":"<p>\u200b\u4eae\u70b9\u200b</p> <p>1. \u200b\u66f4\u200b\u8be6\u5c3d\u200b\u7684\u200b\u6587\u6863\u200b</p> <p>\u200b\u611f\u8c22\u200b\u793e\u533a\u200b\u7684\u200b\u8d21\u732e\u8005\u200b\u4eec\u200b\u5e2e\u52a9\u200b\u6211\u4eec\u200b\u6539\u8fdb\u200b\u6587\u6863\u200b\u3002\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u6539\u8fdb\u200b\u4e86\u200b\u8bb8\u591a\u200b\u6587\u6863\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e2d\u6587\u200b\u548c\u200b\u82f1\u6587\u200b\u7248\u672c\u200b\u3002\u200b\u66f4\u200b\u591a\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u8bf7\u200b\u53c2\u8003\u200b\u6587\u6863\u200b\u3002</p> <p>2. \u200b\u65b0\u200b\u7684\u200b\u7b97\u6cd5\u200b</p> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b Prompt-to-prompt, DDIM Inversion \u200b\u548c\u200b Null-text Inversion. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b.</li> </ul> <p>\u200b\u4ece\u5de6\u5230\u53f3\u200b: origin image, DDIM inversion, Null-text inversion</p> <p> </p> <p>Prompt-to-prompt \u200b\u7f16\u8f91\u200b</p> cat -&gt; dog spider man -&gt; iron man(attention replace) Effel tower -&gt; Effel tower at night (attention refine) blossom sakura tree -&gt; blossom(-3) sakura tree (attention reweight) <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b Textual Inversion. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b.</li> </ul> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b Attention Injection \u200b\u4ee5\u4fbf\u200b\u4f7f\u7528\u200b controlnet \u200b\u751f\u6210\u200b\u66f4\u200b\u7a33\u5b9a\u200b\u7684\u200b\u89c6\u9891\u200b. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b Stable Diffusion Inpainting. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b.</li> </ul> <p>\u200b\u65b0\u200b\u529f\u80fd\u200b\u548c\u200b\u6539\u8fdb\u200b</p> <ul> <li>[\u200b\u589e\u5f3a\u200b] \u200b\u652f\u6301\u200b\u5728\u200b\u7a33\u5b9a\u200b\u6269\u6563\u200b\u8bad\u7ec3\u200b\u4e2d\u200b\u7684\u200b\u566a\u58f0\u200b\u504f\u79fb\u200b\uff0c\u200b\u7531\u200b @LeoXing1996 \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1880 \u2197</li> <li>[\u200b\u793e\u533a\u200b] \u200b\u652f\u6301\u200b Glide Upsampler\uff0c\u200b\u7531\u200b @Taited \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1663 \u2197</li> <li>[\u200b\u589e\u5f3a\u200b] \u200b\u652f\u6301\u200b controlnet \u200b\u63a8\u7406\u200b\u5668\u200b\uff0c\u200b\u7531\u200b @Z-Fran \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1891 \u2197</li> <li>[\u200b\u529f\u80fd\u200b] \u200b\u652f\u6301\u200b Albumentations \u200b\u589e\u5f3a\u200b\u53d8\u6362\u200b\u548c\u200b\u6d41\u6c34\u7ebf\u200b\uff0c\u200b\u7531\u200b @Z-Fran \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1894 \u2197</li> <li>[\u200b\u529f\u80fd\u200b] \u200b\u4e3a\u200b unet \u200b\u6dfb\u52a0\u200b\u6ce8\u610f\u529b\u200b\u6ce8\u5165\u200b\uff0c\u200b\u7531\u200b @liuwenran \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1895 \u2197</li> <li>[\u200b\u589e\u5f3a\u200b] \u200b\u66f4\u65b0\u200b\u57fa\u51c6\u200b\u6d4b\u8bd5\u200b\u811a\u672c\u200b\uff0c\u200b\u7531\u200b @Z-Fran \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1907 \u2197</li> <li>[\u200b\u589e\u5f3a\u200b] \u200b\u66f4\u65b0\u200b mmagic \u200b\u6587\u6863\u200b\uff0c\u200b\u7531\u200b @crazysteeaam \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1920 \u2197</li> <li>[\u200b\u589e\u5f3a\u200b] \u200b\u652f\u6301\u200b Prompt-to-prompt\u3001ddim inversion \u200b\u548c\u200b null-text inversion\uff0c\u200b\u7531\u200b @FerryHuang \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1908 \u2197</li> <li>[CodeCamp2023-302] \u200b\u652f\u6301\u200b MMagic \u200b\u53ef\u89c6\u5316\u200b\u5e76\u200b\u7f16\u5199\u200b\u7528\u6237\u200b\u6307\u5357\u200b\uff0c\u200b\u7531\u200b @aptsunny \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1939 \u2197</li> <li>[\u200b\u529f\u80fd\u200b] \u200b\u652f\u6301\u200btextual inversion\uff0c\u200b\u7531\u200b @LeoXing1996 \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1822 \u2197</li> <li>[\u200b\u589e\u5f3a\u200b] \u200b\u5bf9\u200b\u4e00\u4e9b\u200b\u6a21\u578b\u200b\u91c7\u7528\u200b BaseModule\uff0c\u200b\u7531\u200b @LeoXing1996 \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1543 \u2197</li> <li>[MMSIG] \u200b\u652f\u6301\u200b DeblurGANv2 \u200b\u63a8\u7406\u200b\uff0c\u200b\u7531\u200b @xiaomile \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1955 \u2197</li> <li>[CodeCamp2023-647] \u200b\u6dfb\u52a0\u200b EG3D \u200b\u7684\u200b\u65b0\u200b\u914d\u7f6e\u200b\uff0c\u200b\u7531\u200b @RangeKing \u200b\u63d0\u4ea4\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1985 \u2197</li> </ul> <p>Bug \u200b\u4fee\u590d\u200b</p> <ul> <li>\u200b\u4fee\u590d\u200b\u4e86\u200b StableDiffusion \u200b\u548c\u200b DreamBooth \u200b\u8bad\u7ec3\u200b\u4e2d\u200b\u7684\u200b dtype \u200b\u9519\u8bef\u200b\u3002 by @LeoXing1996 in https://github.com/open-mmlab/mmagic/pull/1879</li> <li>\u200b\u4fee\u590d\u200b\u4e86\u200b gui VideoSlider \u200b\u7684\u200b bug\u3002 by @Z-Fran in https://github.com/open-mmlab/mmagic/pull/1885</li> <li>\u200b\u4fee\u590d\u200b\u4e86\u200b init_model \u200b\u548c\u200b glide demo \u200b\u7684\u200b\u95ee\u9898\u200b\u3002 by @Z-Fran in https://github.com/open-mmlab/mmagic/pull/1888</li> <li>\u200b\u4fee\u590d\u200b\u4e86\u200b\u5f53\u200b dim=3 \u200b\u65f6\u200b\u7684\u200b InstColorization bug\u3002 by @Z-Fran in https://github.com/open-mmlab/mmagic/pull/1901</li> <li>\u200b\u4fee\u590d\u200b\u4e86\u200b sd \u200b\u548c\u200b controlnet \u200b\u7684\u200b fp16 bug\u3002 by @Z-Fran in https://github.com/open-mmlab/mmagic/pull/1914</li> <li>\u200b\u4fee\u590d\u200b\u4e86\u200b controlnet \u200b\u4e2d\u200b\u7684\u200b num_images_per_prompt\u3002 by @LeoXing1996 in https://github.com/open-mmlab/mmagic/pull/1936</li> <li>\u200b\u4fee\u6b63\u200b\u4e86\u200b sd-inpainting \u200b\u7684\u200b metafile \u200b\u4ee5\u200b\u4fee\u590d\u200b\u63a8\u7406\u200b\u5668\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u3002 by @LeoXing1996 in https://github.com/open-mmlab/mmagic/pull/1995</li> </ul> <p>\u200b\u65b0\u200b\u8d21\u732e\u8005\u200b</p> <ul> <li>@wyyang23 \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1886</li> <li>@yehuixie \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1912</li> <li>@crazysteeaam \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1920</li> <li>@BUPT-NingXinyu \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1921</li> <li>@zhjunqin \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1918</li> <li>@xuesheng1031 \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1923</li> <li>@wslgqq277g \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1934</li> <li>@LYMDLUT \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1933</li> <li>@RangeKing \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1930</li> <li>@xin-li-67 \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1932</li> <li>@chg0901 \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1931</li> <li>@aptsunny \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1939</li> <li>@YanxingLiu \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1943</li> <li>@tackhwa \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1937</li> <li>@Geo-Chou \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1940</li> <li>@qsun1 \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1956</li> <li>@ththth888 \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1961</li> <li>@sijiua \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1967</li> <li>@MING-ZCH \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1982</li> <li>@AllYoung \u200b\u9996\u6b21\u200b\u8d21\u732e\u200b\u4e8e\u200b https://github.com/open-mmlab/mmagic/pull/1996</li> </ul>"},{"location":"changelog/#v101-26052023","title":"v1.0.1 (26/05/2023)","text":"<p>\u200b\u65b0\u200b\u529f\u80fd\u200b\u548c\u200b\u6539\u8fdb\u200b</p> <ul> <li>\u200b\u652f\u6301\u200b StableDiffusion tomesd \u200b\u52a0\u901f\u200b. #1801</li> <li>\u200b\u652f\u6301\u200b\u6240\u6709\u200b inpainting/matting/image restoration \u200b\u6a21\u578b\u200b\u7684\u200b inferencer. #1833, #1873</li> <li>\u200b\u652f\u6301\u200b animated drawings. #1837</li> <li>\u200b\u652f\u6301\u200b Style-Based Global Appearance Flow for Virtual Try-On at projects. #1786</li> <li>\u200b\u652f\u6301\u200b tokenizer wrapper \u200b\u548c\u200b EmbeddingLayerWithFixe. #1846</li> </ul> <p>Bug \u200b\u4fee\u590d\u200b</p> <ul> <li>\u200b\u4fee\u590d\u200b\u5b89\u88c5\u200b\u4f9d\u8d56\u200b. #1819</li> <li>\u200b\u4fee\u590d\u200b inst-colorization PackInputs. #1828, #1827</li> <li>\u200b\u4fee\u590d\u200b pip install \u200b\u65f6\u200b inferencer \u200b\u65e0\u6cd5\u200b\u4f7f\u7528\u200b\u7684\u200b\u95ee\u9898\u200b. #1875</li> </ul>"},{"location":"changelog/#v100-25042023","title":"v1.0.0 (25/04/2023)","text":"<p>\u200b\u6211\u4eec\u200b\u6b63\u5f0f\u200b\u53d1\u5e03\u200b MMagic v1.0.0 \u200b\u7248\u672c\u200b\uff0c\u200b\u6e90\u81ea\u200b MMEditing \u200b\u548c\u200b MMGeneration\u3002</p> <p></p> <p>\u200b\u81ea\u4ece\u200b MMEditing \u200b\u8bde\u751f\u200b\u4ee5\u6765\u200b\uff0c\u200b\u5b83\u200b\u4e00\u76f4\u200b\u662f\u200b\u8bb8\u591a\u200b\u56fe\u50cf\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b\u3001\u200b\u7f16\u8f91\u200b\u548c\u200b\u751f\u6210\u200b\u4efb\u52a1\u200b\u7684\u200b\u9996\u9009\u200b\u7b97\u6cd5\u200b\u5e93\u200b\uff0c\u200b\u5e2e\u52a9\u200b\u591a\u4e2a\u200b\u7814\u7a76\u200b\u56e2\u961f\u200b\u53d6\u5f97\u200b 10 \u200b\u4f59\u200b \u200b\u9879\u200b\u56fd\u9645\u200b\u9876\u7ea7\u200b\u8d5b\u4e8b\u200b\u7684\u200b\u80dc\u5229\u200b\uff0c\u200b\u652f\u6491\u200b\u4e86\u200b 100 \u200b\u591a\u4e2a\u200b GitHub \u200b\u751f\u6001\u200b\u9879\u76ee\u200b\u3002\u200b\u7ecf\u8fc7\u200b OpenMMLab 2.0 \u200b\u6846\u67b6\u200b\u7684\u200b\u8fed\u4ee3\u200b\u66f4\u65b0\u200b\u4ee5\u53ca\u200b\u4e0e\u200b MMGeneration \u200b\u7684\u200b\u5408\u5e76\u200b\uff0cMMEditing \u200b\u5df2\u7ecf\u200b\u6210\u4e3a\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u652f\u6301\u200b\u57fa\u4e8e\u200b GAN \u200b\u548c\u200b CNN \u200b\u7684\u200b\u5e95\u5c42\u200b\u89c6\u89c9\u200b\u7b97\u6cd5\u200b\u7684\u200b\u5f3a\u5927\u200b\u5de5\u5177\u200b\u3002</p> <p>\u200b\u800c\u200b\u4eca\u5929\u200b\uff0cMMEditing \u200b\u5c06\u200b\u66f4\u52a0\u200b\u62e5\u62b1\u200b\u751f\u6210\u5f0f\u200b AI\uff08Generative AI\uff09\uff0c\u200b\u6b63\u5f0f\u200b\u66f4\u540d\u200b\u4e3a\u200b MMagic\uff08Multimodal Advanced, Generative, and Intelligent Creation\uff09\uff0c\u200b\u81f4\u529b\u4e8e\u200b\u6253\u9020\u200b\u66f4\u200b\u5148\u8fdb\u200b\u3001\u200b\u66f4\u200b\u5168\u9762\u200b\u7684\u200b AIGC \u200b\u5f00\u6e90\u200b\u7b97\u6cd5\u200b\u5e93\u200b\u3002</p> <p>\u200b\u5728\u200b MMagic \u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u652f\u6301\u200b\u4e86\u200b 53+ \u200b\u6a21\u578b\u200b\uff0c\u200b\u5206\u5e03\u200b\u4e8e\u200b Stable Diffusion \u200b\u7684\u200b\u5fae\u8c03\u200b\u3001\u200b\u56fe\u6587\u200b\u751f\u6210\u200b\u3001\u200b\u56fe\u50cf\u200b\u53ca\u200b\u89c6\u9891\u200b\u4fee\u590d\u200b\u3001\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b\u3001\u200b\u7f16\u8f91\u200b\u548c\u200b\u751f\u6210\u200b\u7b49\u200b\u591a\u79cd\u200b\u4efb\u52a1\u200b\u3002\u200b\u914d\u5408\u200b MMEngine \u200b\u51fa\u8272\u200b\u7684\u200b\u8bad\u7ec3\u200b\u4e0e\u200b\u5b9e\u9a8c\u200b\u7ba1\u7406\u200b\u652f\u6301\u200b\uff0cMMagic \u200b\u5c06\u200b\u4e3a\u200b\u5e7f\u5927\u200b\u7814\u7a76\u8005\u200b\u4e0e\u200b AIGC \u200b\u7231\u597d\u8005\u200b\u4eec\u200b\u63d0\u4f9b\u200b\u66f4\u52a0\u200b\u5feb\u6377\u200b\u7075\u6d3b\u200b\u7684\u200b\u5b9e\u9a8c\u200b\u652f\u6301\u200b\uff0c\u200b\u52a9\u529b\u200b\u4f60\u200b\u7684\u200b AIGC \u200b\u63a2\u7d22\u4e4b\u65c5\u200b\u3002\u200b\u4f7f\u7528\u200b MMagic\uff0c\u200b\u4f53\u9a8c\u200b\u66f4\u200b\u591a\u200b\u751f\u6210\u200b\u7684\u200b\u9b54\u529b\u200b\uff01\u200b\u8ba9\u200b\u6211\u4eec\u200b\u4e00\u8d77\u200b\u5f00\u542f\u200b\u8d85\u8d8a\u200b\u7f16\u8f91\u200b\u7684\u200b\u65b0\u7eaa\u5143\u200b\uff01 More than Editing, Unlock the Magic!</p> <p>\u200b\u4e3b\u8981\u200b\u66f4\u65b0\u200b</p> <p>1. \u200b\u65b0\u200b\u7b97\u6cd5\u200b</p> <p>\u200b\u6211\u4eec\u200b\u652f\u6301\u200b\u4e86\u200b4\u200b\u4e2a\u200b\u65b0\u200b\u4efb\u52a1\u200b\u4ee5\u53ca\u200b11\u200b\u4e2a\u200b\u65b0\u200b\u7b97\u6cd5\u200b\u3002</p> <ul> <li>Text2Image / Diffusion</li> <li>ControlNet</li> <li>DreamBooth</li> <li>Stable Diffusion</li> <li>Disco Diffusion</li> <li>GLIDE</li> <li>Guided Diffusion</li> <li>3D-aware Generation</li> <li>EG3D</li> <li>Image Restoration</li> <li>NAFNet</li> <li>Restormer</li> <li>SwinIR</li> <li>Image Colorization</li> <li>InstColorization</li> </ul> <p>https://user-images.githubusercontent.com/49083766/233564593-7d3d48ed-e843-4432-b610-35e3d257765c.mp4</p> <p>2. Magic Diffusion Model</p> <p>\u200b\u9488\u5bf9\u200b Diffusion Model\uff0c\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u201c\u200b\u9b54\u6cd5\u200b\u201d</p> <ul> <li> <p>\u200b\u652f\u6301\u200b\u57fa\u4e8e\u200b Stable Diffusion \u200b\u4e0e\u200b Disco Diffusion \u200b\u7684\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b.</p> </li> <li> <p>\u200b\u652f\u6301\u200b Dreambooth \u200b\u4ee5\u53ca\u200b DreamBooth LoRA \u200b\u7b49\u200b Finetune \u200b\u65b9\u6cd5\u200b.</p> </li> <li> <p>\u200b\u652f\u6301\u200b ControlNet \u200b\u8fdb\u884c\u200b\u53ef\u63a7\u6027\u200b\u7684\u200b\u6587\u672c\u200b\u5230\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b.   </p> </li> <li> <p>\u200b\u652f\u6301\u200b xFormers \u200b\u52a0\u901f\u200b\u548c\u200b\u4f18\u5316\u200b\u7b56\u7565\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u8bad\u7ec3\u200b\u4e0e\u200b\u63a8\u7406\u200b\u6548\u7387\u200b.</p> </li> <li> <p>\u200b\u652f\u6301\u200b\u57fa\u4e8e\u200b MultiFrame Render \u200b\u7684\u200b\u89c6\u9891\u200b\u751f\u6210\u200b.   MMagic \u200b\u652f\u6301\u200b\u901a\u8fc7\u200b ControlNet \u200b\u4e0e\u200b\u591a\u200b\u5e27\u200b\u6e32\u67d3\u6cd5\u200b\u5b9e\u73b0\u200b\u957f\u200b\u89c6\u9891\u200b\u7684\u200b\u751f\u6210\u200b\u3002   prompt keywords: a handsome man, silver hair, smiling, play basketball</p> </li> </ul> <p>https://user-images.githubusercontent.com/12782558/227149757-fd054d32-554f-45d5-9f09-319184866d85.mp4</p> <p>prompt keywords: a girl, black hair, white pants, smiling, play basketball</p> <p>https://user-images.githubusercontent.com/49083766/233559964-bd5127bd-52f6-44b6-a089-9d7adfbc2430.mp4</p> <p>prompt keywords: a handsome man</p> <p>https://user-images.githubusercontent.com/12782558/227152129-d70d5f76-a6fc-4d23-97d1-a94abd08f95a.mp4</p> <ul> <li> <p>\u200b\u652f\u6301\u200b\u901a\u8fc7\u200b Wrapper \u200b\u8c03\u7528\u200b Diffusers \u200b\u7684\u200b\u57fa\u7840\u200b\u6a21\u578b\u200b\u4ee5\u53ca\u200b\u91c7\u6837\u200b\u7b56\u7565\u200b.</p> </li> <li> <p>SAM + MMagic = Generate Anything\uff01   \u200b\u5f53\u4e0b\u200b\u6d41\u884c\u200b\u7684\u200b SAM\uff08Segment Anything Model\uff09\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4e3a\u200b MMagic \u200b\u63d0\u4f9b\u200b\u66f4\u200b\u591a\u200b\u52a0\u6301\u200b\uff01\u200b\u60f3\u200b\u5236\u4f5c\u200b\u81ea\u5df1\u200b\u7684\u200b\u52a8\u753b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u79fb\u6b65\u200b\u81f3\u200b OpenMMLab PlayGround\uff01</p> </li> </ul> <p>https://user-images.githubusercontent.com/49083766/233562228-f39fc675-326c-4ae8-986a-c942059effd0.mp4</p> <p>3. \u200b\u6846\u67b6\u200b\u5347\u7ea7\u200b</p> <p>\u200b\u4e3a\u4e86\u200b\u63d0\u5347\u200b\u4f60\u200b\u7684\u200b\u201c\u200b\u65bd\u6cd5\u200b\u201d\u200b\u6548\u7387\u200b\uff0c\u200b\u6211\u4eec\u200b\u5bf9\u200b\u201c\u200b\u9b54\u672f\u200b\u56de\u8def\u200b\u201d\u200b\u505a\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u5347\u7ea7\u200b:</p> <ul> <li>\u200b\u901a\u8fc7\u200b OpenMMLab 2.0 \u200b\u6846\u67b6\u200b\u7684\u200b MMEngine \u200b\u548c\u200b MMCV\uff0c MMagic \u200b\u5c06\u200b\u7f16\u8f91\u200b\u6846\u67b6\u200b\u5206\u89e3\u200b\u4e3a\u200b\u4e0d\u540c\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5e76\u4e14\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u7ec4\u5408\u200b\u4e0d\u540c\u200b\u7684\u200b\u6a21\u5757\u200b\u8f7b\u677e\u200b\u5730\u200b\u6784\u5efa\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u7f16\u8f91\u5668\u200b\u6a21\u578b\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u50cf\u200b\u642d\u5efa\u200b\u201c\u200b\u4e50\u9ad8\u200b\u201d\u200b\u4e00\u6837\u200b\u5b9a\u4e49\u200b\u8bad\u7ec3\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e30\u5bcc\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u548c\u200b\u7b56\u7565\u200b\u3002\u200b\u5728\u200b MMagic \u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b APIs \u200b\u5b8c\u5168\u200b\u63a7\u5236\u200b\u8bad\u7ec3\u200b\u6d41\u7a0b\u200b.</li> <li>\u200b\u652f\u6301\u200b 33+ \u200b\u7b97\u6cd5\u200b Pytorch 2.0 \u200b\u52a0\u901f\u200b.</li> <li>\u200b\u91cd\u6784\u200b DataSample\uff0c\u200b\u652f\u6301\u200b batch \u200b\u7ef4\u5ea6\u200b\u7684\u200b\u7ec4\u5408\u200b\u4e0e\u200b\u62c6\u5206\u200b.</li> <li>\u200b\u91cd\u6784\u200b DataPreprocessor\uff0c\u200b\u5e76\u200b\u7edf\u4e00\u200b\u5404\u79cd\u200b\u4efb\u52a1\u200b\u5728\u200b\u8bad\u7ec3\u200b\u4e0e\u200b\u63a8\u7406\u200b\u65f6\u200b\u7684\u200b\u6570\u636e\u683c\u5f0f\u200b.</li> <li>\u200b\u91cd\u6784\u200b MultiValLoop \u200b\u4e0e\u200b MultiTestLoop\uff0c\u200b\u540c\u65f6\u200b\u652f\u6301\u200b\u751f\u6210\u200b\u7c7b\u578b\u200b\u6307\u6807\u200b\uff08e.g. FID\uff09\u200b\u4e0e\u200b\u91cd\u5efa\u200b\u7c7b\u578b\u200b\u6307\u6807\u200b\uff08e.g. SSIM\uff09 \u200b\u7684\u200b\u8bc4\u6d4b\u200b\uff0c\u200b\u540c\u65f6\u200b\u652f\u6301\u200b\u4e00\u6b21\u6027\u200b\u8bc4\u6d4b\u200b\u591a\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b</li> <li>\u200b\u652f\u6301\u200b\u672c\u5730\u200b\u53ef\u89c6\u5316\u200b\u4ee5\u53ca\u200b\u4f7f\u7528\u200b tensorboard \u200b\u6216\u200b wandb\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b.</li> </ul> <p>\u200b\u65b0\u200b\u529f\u80fd\u200b\u548c\u200b\u6539\u8fdb\u200b</p> <ul> <li>\u200b\u652f\u6301\u200b 53+ \u200b\u7b97\u6cd5\u200b\uff0c232+ \u200b\u914d\u7f6e\u200b\uff0c213+ \u200b\u6a21\u578b\u200b\u6743\u91cd\u200b\uff0c26+ \u200b\u635f\u5931\u200b\u51fd\u6570\u200b\uff0cand 20+ \u200b\u8bc4\u4ef7\u200b\u6307\u6807\u200b.</li> <li>\u200b\u652f\u6301\u200b controlnet \u200b\u52a8\u753b\u200b\u751f\u6210\u200b\u4ee5\u53ca\u200b Gradio gui. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b.</li> <li>\u200b\u652f\u6301\u200b Inferencer \u200b\u548c\u200b Demo\uff0c\u200b\u4f7f\u7528\u200bHigh-level Inference APIs. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b.</li> <li>\u200b\u652f\u6301\u200b Inpainting \u200b\u63a8\u7406\u200b\u7684\u200b Gradio gui. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b.</li> <li>\u200b\u652f\u6301\u200b\u53ef\u89c6\u5316\u200b\u56fe\u50cf\u200b/\u200b\u89c6\u9891\u200b\u8d28\u91cf\u200b\u6bd4\u8f83\u200b\u5de5\u5177\u200b. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b.</li> <li>\u200b\u5f00\u542f\u200b projects\uff0c\u200b\u52a9\u529b\u200b\u793e\u533a\u200b\u66f4\u5feb\u200b\u5411\u200b\u7b97\u6cd5\u200b\u5e93\u4e2d\u200b\u6dfb\u52a0\u200b\u65b0\u200b\u7b97\u6cd5\u200b. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b.</li> <li>\u200b\u5b8c\u5584\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u9884\u5904\u7406\u200b\u811a\u672c\u200b\u548c\u200b\u4f7f\u7528\u200b\u8bf4\u660e\u200b\u6587\u6863\u200b. \u200b\u70b9\u51fb\u200b\u67e5\u770b\u200b.</li> </ul>"},{"location":"changelog/#v100rc7-07042023","title":"v1.0.0rc7 (07/04/2023)","text":"<p>\u200b\u4e3b\u8981\u200b\u66f4\u65b0\u200b</p> <p>\u200b\u6211\u4eec\u200b\u5f88\u200b\u9ad8\u5174\u200b\u53d1\u5e03\u200b MMEditing 1.0.0rc7 \u200b\u7248\u672c\u200b\u3002 \u200b\u6b64\u200b\u7248\u672c\u200b\u652f\u6301\u200b\u4e86\u200b MMEditing \u200b\u548c\u200b MMGeneration \u200b\u7684\u200b 51+ \u200b\u6a21\u578b\u200b\uff0c226+ configs \u200b\u548c\u200b 212+ checkpoints\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6b64\u6b21\u200b\u7248\u672c\u200b\u53d1\u5e03\u200b\u7684\u200b\u91cd\u70b9\u200b\u65b0\u200b\u529f\u80fd\u200b</p> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b DiffuserWrapper.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b ControlNet \u200b\u7684\u200b\u63a8\u7406\u200b\u4e0e\u200b\u8bad\u7ec3\u200b.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b PyTorch 2.0.</li> </ul> <p>\u200b\u65b0\u200b\u529f\u80fd\u200b\u548c\u200b\u6539\u8fdb\u200b</p> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b DiffuserWrapper. #1692</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b ControlNet \u200b\u7684\u200b\u63a8\u7406\u200b\u4e0e\u200b\u8bad\u7ec3\u200b. #1744</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b PyTorch 2.0 (\u200b\u4f7f\u7528\u200b 'inductor' \u200b\u540e\u200b\u7aef\u200b\u6210\u529f\u200b\u7f16\u8bd1\u200b 33+ \u200b\u6a21\u578b\u200b) #1742.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b\u56fe\u50cf\u200b\u8d85\u5206\u200b\u548c\u200b\u89c6\u9891\u200b\u8d85\u5206\u200b\u7684\u200b inferencer. #1662, #1720</li> <li>\u200b\u91cd\u6784\u200b get_flops \u200b\u811a\u672c\u200b. #1675</li> <li>\u200b\u91cd\u6784\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b dataset_converters \u200b\u811a\u672c\u200b\u548c\u200b\u4f7f\u7528\u200b\u6587\u6863\u200b. #1690</li> <li>\u200b\u8fc1\u79fb\u200b stylegan \u200b\u7b97\u5b50\u200b\u5230\u200b MMCV \u200b\u4e2d\u200b. #1383</li> </ul> <p>Bug \u200b\u4fee\u590d\u200b</p> <ul> <li>\u200b\u4fee\u590d\u200b disco inferencer. #1673</li> <li>\u200b\u4fee\u590d\u200b nafnet optimizer \u200b\u914d\u7f6e\u200b. #1716</li> <li>\u200b\u4fee\u590d\u200b tof typo. #1711</li> </ul> <p>\u200b\u8d21\u732e\u8005\u200b</p> <p>@LeoXing1996, @Z-Fran, @plyfager, @zengyh1900, @liuwenran, @ryanxingql, @HAOCHENYE, @VongolaWu</p>"},{"location":"changelog/#v100rc6-02032023","title":"v1.0.0rc6 (02/03/2023)","text":"<p>\u200b\u4e3b\u8981\u200b\u66f4\u65b0\u200b</p> <p>\u200b\u6211\u4eec\u200b\u5f88\u200b\u9ad8\u5174\u200b\u53d1\u5e03\u200b MMEditing 1.0.0rc6 \u200b\u7248\u672c\u200b\u3002 \u200b\u6b64\u200b\u7248\u672c\u200b\u652f\u6301\u200b\u4e86\u200b MMEditing \u200b\u548c\u200b MMGeneration \u200b\u7684\u200b 50+ \u200b\u6a21\u578b\u200b\uff0c222+ configs \u200b\u548c\u200b 209+ checkpoints\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6b64\u6b21\u200b\u7248\u672c\u200b\u53d1\u5e03\u200b\u7684\u200b\u91cd\u70b9\u200b\u65b0\u200b\u529f\u80fd\u200b</p> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b Inpainting \u200b\u4efb\u52a1\u200b\u63a8\u7406\u200b\u7684\u200b Gradio gui.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b\u56fe\u50cf\u200b\u4e0a\u200b\u8272\u200b\u3001\u200b\u56fe\u50cf\u200b\u7ffb\u8bd1\u200b\u548c\u200b GAN \u200b\u6a21\u578b\u200b\u7684\u200b inferencer.</li> </ul> <p>\u200b\u65b0\u200b\u529f\u80fd\u200b\u548c\u200b\u6539\u8fdb\u200b</p> <ul> <li>\u200b\u91cd\u6784\u200b\u4e86\u200b FileIO. #1572</li> <li>\u200b\u91cd\u6784\u200b\u4e86\u200b registry. #1621</li> <li>\u200b\u91cd\u6784\u200b\u4e86\u200b Random degradations. #1583</li> <li>\u200b\u91cd\u6784\u200b\u4e86\u200b DataSample, DataPreprocessor, Metric \u200b\u548c\u200b Loop. #1656</li> <li>\u200b\u4f7f\u7528\u200b mmengine.basemodule \u200b\u66ff\u6362\u200b nn.module. #1491</li> <li>\u200b\u91cd\u6784\u200b\u4e86\u200b\u7b97\u6cd5\u200b\u5e93\u200b\u4e3b\u9875\u200b. #1609</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b Inpainting \u200b\u4efb\u52a1\u200b\u63a8\u7406\u200b\u7684\u200b Gradio gui. #1601</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b\u56fe\u50cf\u200b\u4e0a\u8272\u200b\u7684\u200b inferencer. #1588</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b\u56fe\u50cf\u200b\u7ffb\u8bd1\u200b\u548c\u200b\u6240\u6709\u200b GAN \u200b\u6a21\u578b\u200b\u7684\u200b inferencer. #1650</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b GAN \u200b\u6a21\u578b\u200b\u7684\u200b inferencer. #1653, #1659</li> <li>\u200b\u65b0\u589e\u200b Print config \u200b\u5de5\u5177\u200b. #1590</li> <li>\u200b\u6539\u8fdb\u200b type hints. #1604</li> <li>\u200b\u66f4\u65b0\u200b metrics \u200b\u548c\u200b datasets \u200b\u7684\u200b\u4e2d\u6587\u200b\u6587\u6863\u200b. #1568, #1638</li> <li>\u200b\u66f4\u65b0\u200b BigGAN \u200b\u548c\u200b Disco-Diffusion \u200b\u7684\u200b\u4e2d\u6587\u200b\u6587\u6863\u200b. #1620</li> <li>\u200b\u66f4\u65b0\u200b Guided-Diffusion \u200b\u7684\u200b Evaluation \u200b\u548c\u200b README. #1547</li> </ul> <p>Bug \u200b\u4fee\u590d\u200b</p> <ul> <li>\u200b\u4fee\u590d\u200b EMA <code>momentum</code>. #1581</li> <li>\u200b\u4fee\u590d\u200b RandomNoise \u200b\u7684\u200b\u8f93\u51fa\u200b\u7c7b\u578b\u200b. #1585</li> <li>\u200b\u4fee\u590d\u200b pytorch2onnx \u200b\u5de5\u5177\u200b. #1629</li> <li>\u200b\u4fee\u590d\u200b API \u200b\u6587\u6863\u200b. #1641, #1642</li> <li>\u200b\u4fee\u590d\u200b RealESRGAN \u200b\u52a0\u8f7d\u200b EMA \u200b\u53c2\u6570\u200b. #1647</li> <li>\u200b\u4fee\u590d\u200b dataset_converters \u200b\u811a\u672c\u200b\u7684\u200b arg passing bug. #1648</li> </ul> <p>\u200b\u8d21\u732e\u8005\u200b</p> <p>@plyfager, @LeoXing1996, @Z-Fran, @zengyh1900, @VongolaWu, @liuwenran, @austinmw, @dienachtderwelt, @liangzelong, @i-aki-y, @xiaomile, @Li-Qingyun, @vansin, @Luo-Yihang, @ydengbi, @ruoningYu, @triple-Mu</p>"},{"location":"changelog/#v100rc5-04012023","title":"v1.0.0rc5 (04/01/2023)","text":"<p>\u200b\u4e3b\u8981\u200b\u66f4\u65b0\u200b</p> <p>\u200b\u6211\u4eec\u200b\u5f88\u200b\u9ad8\u5174\u200b\u53d1\u5e03\u200b MMEditing 1.0.0rc5 \u200b\u7248\u672c\u200b\u3002 \u200b\u6b64\u200b\u7248\u672c\u200b\u652f\u6301\u200b\u4e86\u200b MMEditing \u200b\u548c\u200b MMGeneration \u200b\u7684\u200b 49+ \u200b\u6a21\u578b\u200b\uff0c180+ configs \u200b\u548c\u200b 177+ checkpoints\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6b64\u6b21\u200b\u7248\u672c\u200b\u53d1\u5e03\u200b\u7684\u200b\u91cd\u70b9\u200b\u65b0\u200b\u529f\u80fd\u200b</p> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b Restormer \u200b\u7b97\u6cd5\u200b.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b GLIDE \u200b\u7b97\u6cd5\u200b.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b SwinIR \u200b\u7b97\u6cd5\u200b.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b Stable Diffusion \u200b\u7b97\u6cd5\u200b.</li> </ul> <p>\u200b\u65b0\u200b\u529f\u80fd\u200b\u548c\u200b\u6539\u8fdb\u200b</p> <ul> <li>\u200b\u65b0\u589e\u200b Disco notebook. (#1507)</li> <li>\u200b\u4f18\u5316\u200b\u6d4b\u8bd5\u200b requirements \u200b\u548c\u200b CI. (#1514)</li> <li>\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u6587\u6863\u200b summary \u200b\u548c\u200b API docstring. (#1517)</li> <li>\u200b\u5f00\u542f\u200b projects. (#1526)</li> <li>\u200b\u652f\u6301\u200b mscoco dataset. (#1520)</li> <li>\u200b\u6539\u8fdb\u200b\u4e2d\u6587\u200b\u6587\u6863\u200b. (#1532)</li> <li>\u200b\u6dfb\u52a0\u200b Type hints. (#1481)</li> <li>\u200b\u66f4\u65b0\u200b\u6a21\u578b\u200b\u6743\u91cd\u200b\u4e0b\u8f7d\u200b\u94fe\u63a5\u200b. (#1554)</li> <li>\u200b\u66f4\u65b0\u200b\u90e8\u7f72\u200b\u6307\u5357\u200b. (#1551)</li> </ul> <p>Bug \u200b\u4fee\u590d\u200b</p> <ul> <li>\u200b\u4fee\u590d\u200b\u6587\u6863\u200b\u94fe\u63a5\u200b\u68c0\u67e5\u200b. (#1522)</li> <li>\u200b\u4fee\u590d\u200b ssim bug. (#1515)</li> <li>\u200b\u4fee\u590d\u200b realesrgan \u200b\u7684\u200b <code>extract_gt_data</code>. (#1542)</li> <li>\u200b\u4fee\u590d\u200b\u7b97\u6cd5\u200b\u7d22\u5f15\u200b. (#1559)</li> <li>F\u200b\u4fee\u590d\u200b disco-diffusion \u200b\u7684\u200b config \u200b\u8def\u5f84\u200b. (#1553)</li> <li>Fix text2image inferencer. (#1523)</li> </ul> <p>\u200b\u8d21\u732e\u8005\u200b</p> <p>@plyfager, @LeoXing1996, @Z-Fran, @zengyh1900, @VongolaWu, @liuwenran, @AlexZou14, @lvhan028, @xiaomile, @ldr426, @austin273, @whu-lee, @willaty, @curiosity654, @Zdafeng, @Taited</p>"},{"location":"changelog/#v100rc4-05122022","title":"v1.0.0rc4 (05/12/2022)","text":"<p>\u200b\u4e3b\u8981\u200b\u66f4\u65b0\u200b</p> <p>\u200b\u6211\u4eec\u200b\u5f88\u200b\u9ad8\u5174\u200b\u53d1\u5e03\u200b MMEditing 1.0.0rc4 \u200b\u7248\u672c\u200b\u3002 \u200b\u6b64\u200b\u7248\u672c\u200b\u652f\u6301\u200b\u4e86\u200b MMEditing \u200b\u548c\u200b MMGeneration \u200b\u7684\u200b 45+ \u200b\u6a21\u578b\u200b\uff0c176+ configs \u200b\u548c\u200b 175+ checkpoints\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6b64\u6b21\u200b\u7248\u672c\u200b\u53d1\u5e03\u200b\u7684\u200b\u91cd\u70b9\u200b\u65b0\u200b\u529f\u80fd\u200b</p> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b High-level APIs.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b diffusion \u200b\u7b97\u6cd5\u200b.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b Text2Image \u200b\u4efb\u52a1\u200b.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b 3D-Aware Generation.</li> </ul> <p>\u200b\u65b0\u200b\u529f\u80fd\u200b\u548c\u200b\u6539\u8fdb\u200b</p> <ul> <li>\u200b\u652f\u6301\u200b\u548c\u200b\u91cd\u6784\u200b\u4e86\u200b High-level APIs. (#1410)</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b disco-diffusion \u200b\u6587\u751f\u200b\u56fe\u200b\u7b97\u6cd5\u200b. (#1234, #1504)</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b EG3D \u200b\u7b97\u6cd5\u200b. (#1482, #1493, #1494, #1499)</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b NAFNet \u200b\u7b97\u6cd5\u200b. (#1369)</li> </ul> <p>Bug \u200b\u4fee\u590d\u200b</p> <ul> <li>\u200b\u4fee\u590d\u200b srgan \u200b\u7684\u200b\u8bad\u7ec3\u200b\u914d\u7f6e\u200b. (#1441)</li> <li>\u200b\u4fee\u590d\u200b cain \u200b\u7684\u200b config. (#1404)</li> <li>\u200b\u4fee\u590d\u200b rdn \u200b\u548c\u200b srcnn \u200b\u7684\u200b\u8bad\u7ec3\u200b\u914d\u7f6e\u200b. (#1392)</li> </ul> <p>\u200b\u8d21\u732e\u8005\u200b</p> <p>@plyfager, @LeoXing1996, @Z-Fran, @zengyh1900, @VongolaWu, @gaoyang07, @ChangjianZhao, @zxczrx123, @jackghosts, @liuwenran, @CCODING04, @RoseZhao929, @shaocongliu, @liangzelong.</p>"},{"location":"changelog/#v100rc3-10112022","title":"v1.0.0rc3 (10/11/2022)","text":"<p>\u200b\u4e3b\u8981\u200b\u66f4\u65b0\u200b</p> <p>\u200b\u6211\u4eec\u200b\u5f88\u200b\u9ad8\u5174\u200b\u53d1\u5e03\u200b MMEditing 1.0.0rc3 \u200b\u7248\u672c\u200b\u3002 \u200b\u6b64\u200b\u7248\u672c\u200b\u652f\u6301\u200b\u4e86\u200b MMEditing \u200b\u548c\u200b MMGeneration \u200b\u7684\u200b 43+ \u200b\u6a21\u578b\u200b\uff0c170+ configs \u200b\u548c\u200b 169+ checkpoints\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6b64\u6b21\u200b\u7248\u672c\u200b\u53d1\u5e03\u200b\u7684\u200b\u91cd\u70b9\u200b\u65b0\u200b\u529f\u80fd\u200b</p> <ul> <li>\u200b\u5c06\u200b <code>mmdet</code> \u200b\u548c\u200b <code>clip</code> \u200b\u6539\u4e3a\u200b\u53ef\u200b\u9009\u200b\u5b89\u88c5\u200b\u9700\u6c42\u200b.</li> </ul> <p>\u200b\u65b0\u200b\u529f\u80fd\u200b\u548c\u200b\u6539\u8fdb\u200b</p> <ul> <li>\u200b\u652f\u6301\u200b <code>mmdet</code> \u200b\u7684\u200b <code>try_import</code>. (#1408)</li> <li>\u200b\u652f\u6301\u200b <code>flip</code> \u200b\u7684\u200b <code>try_import</code>. (#1420)</li> <li>\u200b\u66f4\u65b0\u200b <code>.gitignore</code>. ($1416)</li> <li>\u200b\u8bbe\u7f6e\u200b <code>inception_utils</code> \u200b\u7684\u200b <code>real_feat</code> \u200b\u4e3a\u200b cpu \u200b\u53d8\u91cf\u200b. (#1415)</li> <li>\u200b\u66f4\u65b0\u200b StyleGAN2 \u200b\u548c\u200b PEGAN \u200b\u7684\u200b README \u200b\u548c\u200b configs.  (#1418)</li> <li>\u200b\u6539\u8fdb\u200b API \u200b\u6587\u6863\u200b\u7684\u200b\u6e32\u67d3\u200b. (#1373)</li> </ul> <p>Bug \u200b\u4fee\u590d\u200b</p> <ul> <li>\u200b\u4fee\u590d\u200b ESRGAN \u200b\u7684\u200b config \u200b\u548c\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u52a0\u8f7d\u200b. (#1407)</li> <li>\u200b\u4fee\u590d\u200b LSGAN \u200b\u7684\u200b config. (#1409)</li> <li>\u200b\u4fee\u590d\u200b CAIN \u200b\u7684\u200b config. (#1404)</li> </ul> <p>\u200b\u8d21\u732e\u8005\u200b</p> <p>@Z-Fran, @zengyh1900, @plyfager, @LeoXing1996, @ruoningYu.</p>"},{"location":"changelog/#v100rc2-02112022","title":"v1.0.0rc2 (02/11/2022)","text":"<p>\u200b\u4e3b\u8981\u200b\u66f4\u65b0\u200b</p> <p>\u200b\u6211\u4eec\u200b\u5f88\u200b\u9ad8\u5174\u200b\u53d1\u5e03\u200b MMEditing 1.0.0rc2 \u200b\u7248\u672c\u200b\u3002 \u200b\u6b64\u200b\u7248\u672c\u200b\u652f\u6301\u200b\u4e86\u200b MMEditing \u200b\u548c\u200b MMGeneration \u200b\u7684\u200b 43+ \u200b\u6a21\u578b\u200b\uff0c170+ configs \u200b\u548c\u200b 169+ checkpoints\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6b64\u6b21\u200b\u7248\u672c\u200b\u53d1\u5e03\u200b\u7684\u200b\u91cd\u70b9\u200b\u65b0\u200b\u529f\u80fd\u200b</p> <ul> <li>\u200b\u57fa\u4e8e\u200b patch \u200b\u548c\u200b slider \u200b\u7684\u200b \u200b\u56fe\u50cf\u200b\u548c\u200b\u89c6\u9891\u200b\u53ef\u89c6\u5316\u200b\u8d28\u91cf\u200b\u6bd4\u8f83\u200b\u5de5\u5177\u200b.</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b\u56fe\u50cf\u200b\u4e0a\u200b\u8272\u200b\u7b97\u6cd5\u200b.</li> </ul> <p>\u200b\u65b0\u200b\u529f\u80fd\u200b\u548c\u200b\u6539\u8fdb\u200b</p> <ul> <li>\u200b\u652f\u6301\u200b\u4e86\u200b\u8d28\u91cf\u200b\u6bd4\u8f83\u200b\u5de5\u5177\u200b. (#1303)</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b instance aware colorization \u200b\u4e0a\u200b\u8272\u200b\u7b97\u6cd5\u200b. (#1370)</li> <li>\u200b\u652f\u6301\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u91c7\u6837\u200b\u6a21\u578b\u200b\u7684\u200b multi-metrics. (#1171)</li> <li>\u200b\u6539\u8fdb\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b</li> <li>\u200b\u91cd\u6784\u200b evaluation metrics. (#1164)</li> <li>\u200b\u5728\u200b PGGAN \u200b\u7684\u200b <code>forward</code> \u200b\u4e2d\u200b\u4fdd\u5b58\u200b gt \u200b\u56fe\u50cf\u200b. (#1332)</li> <li>\u200b\u6539\u8fdb\u200b <code>preprocess_div2k_dataset.py</code> \u200b\u811a\u672c\u200b\u7684\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b. (#1380)</li> <li>\u200b\u652f\u6301\u200b\u5728\u200b visualizer \u200b\u4e2d\u200b\u88c1\u526a\u200b\u50cf\u7d20\u200b\u503c\u200b. (#1365)</li> <li>\u200b\u652f\u6301\u200b\u4e86\u200b SinGAN \u200b\u6570\u636e\u200b\u96c6\u200b\u548c\u200b SinGAN demo. (#1363)</li> <li>\u200b\u652f\u6301\u200b GenDataPreprocessor \u200b\u4e2d\u200b\u8fd4\u56de\u200b int \u200b\u548c\u200b float \u200b\u6570\u636e\u7c7b\u578b\u200b. (#1385)</li> <li>\u200b\u6539\u8fdb\u200b\u6587\u6863\u200b</li> <li>\u200b\u66f4\u65b0\u200b\u83dc\u5355\u200b\u5207\u6362\u200b. (#1162)</li> <li>\u200b\u4fee\u590d\u200b TTSR README. (#1325)</li> </ul> <p>Bug \u200b\u4fee\u590d\u200b</p> <ul> <li>\u200b\u4fee\u590d\u200b PPL bug. (#1172)</li> <li>\u200b\u4fee\u590d\u200b RDN <code>number of channels</code> \u200b\u53c2\u6570\u200b. (#1328)</li> <li>\u200b\u4fee\u590d\u200b demo \u200b\u7684\u200b exceptions \u200b\u7c7b\u578b\u200b. (#1372)</li> <li>\u200b\u4fee\u590d\u200b realesrgan ema. (#1341)</li> <li>\u200b\u6539\u8fdb\u200b assertion \u200b\u68c0\u67e5\u200b <code>GenerateFacialHeatmap</code> \u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\u4e3a\u200b <code>np.float32</code>. (#1310)</li> <li>\u200b\u4fee\u590d\u200b <code>unpaired_dataset.py</code> \u200b\u7684\u200b\u91c7\u6837\u200b\u65b9\u5f0f\u200b. (#1308)</li> <li>\u200b\u4fee\u590d\u200b\u89c6\u9891\u200b\u8d85\u5206\u200b\u6a21\u578b\u200b\u7684\u200b pytorch2onnx \u200b\u811a\u672c\u200b. (#1300)</li> <li>\u200b\u4fee\u590d\u200b\u9519\u8bef\u200b\u7684\u200b config \u200b\u914d\u7f6e\u200b. (#1167,#1200,#1236,#1293,#1302,#1304,#1319,#1331,#1336,#1349,#1352,#1353,#1358,#1364,#1367,#1384,#1386,#1391,#1392,#1393)</li> </ul> <p>\u200b\u8d21\u732e\u8005\u200b</p> <p>@LeoXing1996, @Z-Fran, @zengyh1900, @plyfager, @ryanxingql, @ruoningYu, @gaoyang07.</p>"},{"location":"changelog/#v100rc12392022","title":"v1.0.0rc1(23/9/2022)","text":"<p>MMEditing 1.0.0rc1 \u200b\u5df2\u7ecf\u200b\u5408\u5e76\u200b\u4e86\u200b MMGeneration 1.x\u3002</p> <ul> <li>\u200b\u652f\u6301\u200b 42+ \u200b\u7b97\u6cd5\u200b, 169+ \u200b\u914d\u7f6e\u6587\u4ef6\u200b and 168+ \u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u53c2\u6570\u200b\u6587\u4ef6\u200b.</li> <li>\u200b\u652f\u6301\u200b 26+ loss functions, 20+ metrics.</li> <li>\u200b\u652f\u6301\u200b tensorboard, wandb.</li> <li>\u200b\u652f\u6301\u200b unconditional GANs, conditional GANs, image2image translation \u200b\u4ee5\u53ca\u200b internal learning.</li> </ul>"},{"location":"changelog/#v100rc03182022","title":"v1.0.0rc0(31/8/2022)","text":"<p>MMEditing 1.0.0rc0 \u200b\u662f\u200b MMEditing 1.x \u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u7248\u672c\u200b\uff0c\u200b\u662f\u200b OpenMMLab 2.0 \u200b\u9879\u76ee\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\u3002</p> <p>\u200b\u57fa\u4e8e\u200b\u65b0\u200b\u7684\u200b\u8bad\u7ec3\u200b\u5f15\u64ce\u200b, MMEditing 1.x \u200b\u7edf\u4e00\u200b\u4e86\u200b\u6570\u636e\u200b\u3001\u200b\u6a21\u578b\u200b\u3001\u200b\u8bc4\u6d4b\u200b\u548c\u200b\u53ef\u89c6\u5316\u200b\u7684\u200b\u63a5\u53e3\u200b\u3002</p> <p>\u200b\u8be5\u200b\u7248\u672c\u200b\u5b58\u5728\u200b\u6709\u200b\u4e00\u4e9b\u200b BC-breaking \u200b\u7684\u200b\u4fee\u6539\u200b\u3002 \u200b\u8bf7\u200b\u5728\u200b\u8fc1\u79fb\u200b\u6307\u5357\u200b\u4e2d\u200b\u67e5\u770b\u200b\u66f4\u200b\u591a\u200b\u7ec6\u8282\u200b\u3002</p>"},{"location":"faq/","title":"\u5e38\u89c1\u200b\u95ee\u9898\u89e3\u7b54","text":"<p>\u200b\u6211\u4eec\u200b\u5728\u200b\u6b64\u200b\u5217\u51fa\u200b\u4e86\u200b\u8bb8\u591a\u200b\u7528\u6237\u200b\u9762\u4e34\u200b\u7684\u200b\u4e00\u4e9b\u200b\u5e38\u89c1\u95ee\u9898\u200b\u53ca\u5176\u200b\u76f8\u5e94\u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u53d1\u73b0\u200b\u4efb\u4f55\u200b\u5e38\u89c1\u95ee\u9898\u200b\uff0c\u200b\u5e76\u200b\u6709\u200b\u529e\u6cd5\u200b\u5e2e\u52a9\u200b\u4ed6\u4eba\u200b\u89e3\u51b3\u200b\u8fd9\u4e9b\u200b\u95ee\u9898\u200b\uff0c\u200b\u8bf7\u200b\u968f\u65f6\u200b\u4e30\u5bcc\u200b\u5217\u8868\u200b\u5185\u5bb9\u200b\u3002\u200b\u5982\u679c\u200b\u8fd9\u91cc\u200b\u7684\u200b\u5185\u5bb9\u200b\u6ca1\u6709\u200b\u6db5\u76d6\u200b\u60a8\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b\u63d0\u4f9b\u200b\u7684\u200b\u6a21\u677f\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u5e76\u200b\u786e\u4fdd\u200b\u586b\u5199\u200b\u4e86\u200b\u6a21\u677f\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u5fc5\u8981\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"faq/#_2","title":"\u5e38\u89c1\u95ee\u9898","text":"<p>\u200b\u95ee\u9898\u200b1\uff1a \u201cxxx: \u2018yyy is not in the zzz registry\u2019\u201d.</p> <p>\u200b\u56de\u7b54\u200b1\uff1a \u200b\u53ea\u6709\u200b\u5bfc\u5165\u200b\u6a21\u5757\u200b\u6587\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u624d\u200b\u4f1a\u200b\u89e6\u53d1\u200b\u6ce8\u518c\u8868\u200b\u673a\u5236\u200b\u3002\u200b\u6240\u4ee5\u200b\u4f60\u200b\u9700\u8981\u200b\u5728\u200b\u67d0\u4e2a\u200b\u5730\u65b9\u200b\u5bfc\u5165\u200b\u8be5\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u95ee\u9898\u200b2\uff1a \u200b\u67d0\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\u7ed3\u6784\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f</p> <p>\u200b\u56de\u7b54\u200b2\uff1a \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u6570\u636e\u200b\u96c6\u200b\u51c6\u5907\u200b\u6559\u7a0b\u200b\u6765\u200b\u786e\u4fdd\u200b\u6587\u4ef6\u5939\u200b\u7ed3\u6784\u200b\u7684\u200b\u6b63\u786e\u6027\u200b\u3002</p> <p>\u200b\u95ee\u9898\u200b3\uff1a \u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b LMDB \u200b\u6570\u636e\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff1f</p> <p>\u200b\u56de\u7b54\u200b3\uff1a \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5de5\u5177\u200b/\u200b\u6570\u636e\u200b\u4e2d\u200b\u7684\u200b\u811a\u672c\u200b\u5236\u4f5c\u200b LMDB \u200b\u6587\u4ef6\u200b\u3002\u200b\u66f4\u200b\u591a\u200b\u8be6\u60c5\u8bf7\u200b\u53c2\u89c1\u200b\u6570\u636e\u200b\u96c6\u200b\u51c6\u5907\u200b\u6559\u7a0b\u200b\u3002</p> <p>\u200b\u95ee\u9898\u200b4\uff1a \u200b\u4e3a\u4ec0\u4e48\u200b\u4f7f\u7528\u200b\u4e86\u200b MMCV==xxx\uff0c\u200b\u4f46\u200b\u5728\u200b\u5bfc\u5165\u200b mmagic \u200b\u65f6\u200b\u5374\u200b\u51fa\u73b0\u200b\u4e86\u200b\u4e0d\u200b\u517c\u5bb9\u200b\uff1f</p> <p>\u200b\u56de\u7b54\u200b4\uff1a \u200b\u8fd9\u200b\u662f\u56e0\u4e3a\u200b MMCV \u200b\u548c\u200b MMagic \u200b\u7684\u200b\u7248\u672c\u200b\u4e0d\u200b\u517c\u5bb9\u200b\u3002\u200b\u517c\u5bb9\u200b\u7684\u200b MMagic \u200b\u548c\u200b MMCV \u200b\u7248\u672c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u3002\u200b\u8bf7\u200b\u9009\u62e9\u200b\u6b63\u786e\u200b\u7684\u200b MMCV \u200b\u7248\u672c\u200b\u4ee5\u200b\u907f\u514d\u200b\u5b89\u88c5\u200b\u95ee\u9898\u200b\u3002</p> MMagic\u200b\u7248\u672c\u200b MMCV \u200b\u7248\u672c\u200b master mmcv-full&gt;=2.0.0 <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u5982\u679c\u200b\u5df2\u200b\u5b89\u88c5\u200b mmcv\uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u5148\u200b\u8fd0\u884c\u200b pip uninstall mmcv\u3002\u200b\u5982\u679c\u200b\u540c\u65f6\u200b\u5b89\u88c5\u200b\u4e86\u200b mmcv \u200b\u548c\u200b mmcv-full\uff0c\u200b\u5219\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u6a21\u5757\u200b\u672a\u627e\u5230\u200b\u9519\u8bef\u200b\uff08ModuleNotFoundError\uff09\u3002 \u200b\u95ee\u9898\u200b5\uff1a \u200b\u5982\u4f55\u200b\u5ffd\u7565\u200b\u57fa\u672c\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u7684\u200b\u67d0\u4e9b\u200b\u5b57\u200b\u6bb5\u200b\uff1f</p> <p>\u200b\u56de\u7b54\u200b5\uff1a \u200b\u6709\u4e9b\u200b\u65f6\u5019\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b delete=True \u200b\u6765\u200b\u5ffd\u7565\u200b\u57fa\u672c\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u7684\u200b\u67d0\u4e9b\u200b\u5b57\u200b\u6bb5\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b MMEngine \u200b\u7684\u200b\u7b80\u5355\u200b\u8bf4\u660e\u200b\u3002 \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ed4\u7ec6\u9605\u8bfb\u200b\u672c\u200b\u6559\u7a0b\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u66f4\u597d\u200b\u5730\u200b\u7406\u89e3\u200b\u8fd9\u4e00\u200b\u529f\u80fd\u200b\u3002</p> <p>\u200b\u95ee\u9898\u200b6\uff1a \u200b\u5982\u4f55\u200b\u5728\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u4e2d\u95f4\u200b\u53d8\u91cf\u200b\uff1f</p> <p>\u200b\u56de\u7b54\u200b6\uff1a \u200b\u6709\u4e9b\u200b\u4e2d\u95f4\u200b\u53d8\u91cf\u200b\u4f1a\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u4f7f\u7528\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u7684\u200b train_pipeline/test_pipeline\u3002\u200b\u503c\u5f97\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u5f53\u200b\u4fee\u6539\u200b\u5b50\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u7684\u200b\u4e2d\u95f4\u200b\u53d8\u91cf\u200b\u65f6\u200b\uff0c\u200b\u7528\u6237\u200b\u9700\u8981\u200b\u518d\u6b21\u200b\u5c06\u200b\u4e2d\u95f4\u200b\u53d8\u91cf\u200b\u4f20\u9012\u200b\u5230\u200b\u76f8\u5e94\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u4e2d\u200b\u3002</p>"},{"location":"advanced_guides/data_flow/","title":"\u6570\u636e\u6d41","text":"<ul> <li>\u200b\u6570\u636e\u6d41\u200b</li> <li>\u200b\u6570\u636e\u6d41\u200b\u6982\u8ff0\u200b</li> <li>\u200b\u6570\u636e\u200b\u96c6\u200b\u4e0e\u200b\u6a21\u578b\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6570\u636e\u6d41\u200b<ul> <li>\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u7684\u200b\u6570\u636e\u5904\u7406\u200b</li> <li>\u200b\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\u7684\u200b\u6570\u636e\u5904\u7406\u200b</li> </ul> </li> <li>\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u4e0e\u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6570\u636e\u6d41\u200b</li> </ul>"},{"location":"advanced_guides/data_flow/#_2","title":"\u6570\u636e\u6d41\u200b\u6982\u8ff0","text":"<p>Runner \u200b\u76f8\u5f53\u4e8e\u200b MMEngine \u200b\u4e2d\u200b\u7684\u200b\u201c\u200b\u96c6\u6210\u200b\u5668\u200b\u201d\u3002\u200b\u5b83\u200b\u8986\u76d6\u200b\u4e86\u200b\u6846\u67b6\u200b\u7684\u200b\u6240\u6709\u200b\u65b9\u9762\u200b\uff0c\u200b\u5e76\u200b\u80a9\u8d1f\u7740\u200b\u7ec4\u7ec7\u200b\u548c\u200b\u8c03\u5ea6\u200b\u51e0\u4e4e\u200b\u6240\u6709\u200b\u6a21\u5757\u200b\u7684\u200b\u8d23\u4efb\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u5404\u200b\u6a21\u5757\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6570\u636e\u6d41\u200b\u4e5f\u200b\u7531\u200b <code>Runner</code> \u200b\u63a7\u5236\u200b\u3002\u200b\u5728\u200b\u672c\u200b\u7ae0\u8282\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ecb\u7ecd\u200b Runner \u200b\u7ba1\u7406\u200b\u7684\u200b\u5185\u90e8\u200b\u6a21\u5757\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6570\u636e\u6d41\u200b\u548c\u200b\u6570\u636e\u683c\u5f0f\u200b\u7ea6\u5b9a\u200b\u3002</p> <p>\u200b\u5728\u200b\u4e0a\u200b\u56fe\u200b\u4e2d\u200b\uff0c\u200b\u5728\u200b\u8bad\u7ec3\u200b\u8fed\u4ee3\u200b\u4e2d\u200b\uff0c\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\uff08dataloader\uff09\u200b\u4ece\u200b\u5b58\u50a8\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\u5e76\u200b\u4f20\u8f93\u200b\u5230\u200b\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\uff08data preprocessor\uff09\uff0c\u200b\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\u4f1a\u200b\u5c06\u200b\u56fe\u50cf\u200b\u653e\u5230\u200b\u7279\u5b9a\u200b\u7684\u200b\u8bbe\u5907\u200b\u4e0a\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u6570\u636e\u200b\u5806\u53e0\u200b\u5230\u200b\u6279\u5904\u7406\u200b\u4e2d\u200b\uff0c\u200b\u4e4b\u540e\u200b\u6a21\u578b\u200b\u63a5\u53d7\u200b\u6279\u5904\u7406\u200b\u6570\u636e\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u6700\u540e\u200b\u5c06\u200b\u6a21\u578b\u200b\u7684\u200b\u8f93\u51fa\u200b\u8ba1\u7b97\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\uff08loss\uff09\u3002\u200b\u5728\u200b\u8bc4\u4f30\u200b\u65f6\u200b\u6a21\u578b\u200b\u53c2\u6570\u200b\u4f1a\u200b\u88ab\u200b\u51bb\u7ed3\u200b\uff0c\u200b\u6a21\u578b\u200b\u7684\u200b\u8f93\u51fa\u200b\u9700\u8981\u200b\u7ecf\u7531\u200b\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\uff08data preprocessor\uff09\u200b\u89e3\u6784\u200b\u518d\u200b\u88ab\u200b\u4f20\u9012\u200b\u7ed9\u200b Evaluator\u200b\u8ba1\u7b97\u200b\u6307\u6807\u200b\u6216\u8005\u200b\u63d0\u4f9b\u200b\u7ed9\u200bVisualizer\u200b\u8fdb\u884c\u200b\u53ef\u89c6\u5316\u200b\u3002</p>"},{"location":"advanced_guides/data_flow/#_3","title":"\u6570\u636e\u200b\u96c6\u200b\u4e0e\u200b\u6a21\u578b\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6570\u636e\u6d41","text":"<p>\u200b\u5728\u200b\u672c\u8282\u200b\u4e2d\u5c06\u200b\u4ecb\u7ecd\u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u7684\u200b\u6570\u636e\u6d41\u200b\u4f20\u9012\u200b\uff0c\u200b\u5173\u4e8e\u200b\u6570\u636e\u200b\u96c6\u200b\u5b9a\u4e49\u200b\u548c\u200b\u6570\u636e\u5904\u7406\u200b\u7ba1\u7ebf\u200b\u76f8\u5173\u200b\u7684\u200b\u89e3\u8bfb\u200b\u8be6\u89c1\u200b\u5f00\u53d1\u200b\u6307\u5357\u200b\u3002\u200b\u6570\u636e\u200b\u96c6\u200b \uff08dataset\uff09 \u200b\u548c\u200b\u6a21\u578b\u200b \uff08model\uff09\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6570\u636e\u6d41\u200b\u4f20\u9012\u200b\u4e00\u822c\u200b\u53ef\u4ee5\u200b\u5206\u4e3a\u200b\u5982\u4e0b\u200b\u56db\u4e2a\u200b\u6b65\u9aa4\u200b :</p> <ol> <li> <p>\u200b\u8bfb\u53d6\u200b <code>XXDataset</code> \u200b\u6536\u96c6\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u539f\u59cb\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5e76\u4e14\u200b\u901a\u8fc7\u200b\u6570\u636e\u5904\u7406\u200b\u7ba1\u7ebf\u200b\u5bf9\u200b\u6570\u636e\u200b\u8fdb\u884c\u200b\u6570\u636e\u200b\u8f6c\u6362\u200b\u5904\u7406\u200b;</p> </li> <li> <p>\u200b\u4f7f\u7528\u200b <code>PackInputs</code> \u200b\u5c06\u200b\u8f6c\u6362\u200b\u5b8c\u6210\u200b\u7684\u200b\u6570\u636e\u200b\u6253\u5305\u200b\u6210\u4e3a\u200b\u4e00\u4e2a\u200b\u5b57\u5178\u200b;</p> </li> <li> <p>\u200b\u4f7f\u7528\u200b <code>collate_fn</code> \u200b\u5c06\u200b\u5404\u4e2a\u200b\u5f20\u91cf\u200b\u96c6\u200b\u6210\u4e3a\u200b\u4e00\u4e2a\u200b\u6279\u5904\u7406\u200b\u5f20\u91cf\u200b;</p> </li> <li> <p>\u200b\u4f7f\u7528\u200b <code>data_preprocessor</code> \u200b\u628a\u200b\u4ee5\u4e0a\u200b\u6240\u6709\u200b\u6570\u636e\u200b\u8fc1\u79fb\u200b\u5230\u200b GPUS \u200b\u7b49\u200b\u76ee\u6807\u200b\u8bbe\u5907\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u4e2d\u5c06\u200b\u4e4b\u524d\u200b\u6253\u5305\u200b\u7684\u200b\u5b57\u5178\u200b\u89e3\u538b\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u5143\u7ec4\u200b\uff0c\u200b\u8be5\u200b\u5143\u7ec4\u200b\u5305\u542b\u200b\u8f93\u5165\u200b\u56fe\u50cf\u200b\u4e0e\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5143\u200b\u4fe1\u606f\u200b\uff08<code>DataSample</code>\uff09\u3002</p> </li> </ol>"},{"location":"advanced_guides/data_flow/#_4","title":"\u6570\u636e\u5904\u7406\u200b\u7ba1\u7ebf\u200b\u7684\u200b\u6570\u636e\u5904\u7406","text":"<p>\u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\uff0c\u200b\u7ecf\u7531\u200b\u4e0d\u540c\u200b\u7c7b\u578b\u200b\u7684\u200b<code>XXDataset</code>, \u200b\u5206\u522b\u200b\u8bfb\u53d6\u6570\u636e\u200b(LQ)\u200b\u4ee5\u53ca\u200b\u6807\u6ce8\u200b(GT)\uff0c\u200b\u5e76\u4e14\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u6570\u636e\u200b\u9884\u5904\u7406\u200b\u7ba1\u9053\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u6570\u636e\u200b\u8f6c\u6362\u200b\uff0c\u200b\u6700\u540e\u200b\u901a\u8fc7\u200b<code>PackInputs</code>\u200b\u5c06\u200b\u5904\u7406\u200b\u4e4b\u540e\u200b\u7684\u200b\u6570\u636e\u200b\u6253\u5305\u200b\u4e3a\u200b\u5b57\u5178\u200b\uff0c\u200b\u6b64\u200b\u5b57\u5178\u200b\u5305\u542b\u200b\u8bad\u7ec3\u200b\u4ee5\u53ca\u200b\u6d4b\u8bd5\u200b\u8fc7\u7a0b\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6240\u6709\u200b\u6570\u636e\u200b\u3002</p>  base_edit_model.py   base_conditional_gan.py  <pre><code>@MODELS.register_module()\nclass BaseEditModel(BaseModel):\n    \"\"\"Base model for image and video editing.\n    \"\"\"\n    def forward(self,\n                inputs: torch.Tensor,\n                data_samples: Optional[List[DataSample]] = None,\n                mode: str = 'tensor',\n                **kwargs) -&gt; Union[torch.Tensor, List[DataSample], dict]:\n        if isinstance(inputs, dict):\n            inputs = inputs['img']\n        if mode == 'tensor':\n            return self.forward_tensor(inputs, data_samples, **kwargs)\n\n        elif mode == 'predict':\n            predictions = self.forward_inference(inputs, data_samples,\n                                                 **kwargs)\n            predictions = self.convert_to_datasample(predictions, data_samples,\n                                                     inputs)\n            return predictions\n\n        elif mode == 'loss':\n            return self.forward_train(inputs, data_samples, **kwargs)\n</code></pre> <pre><code>@MODELS.register_module()\nclass BaseConditionalGAN(BaseGAN):\n    \"\"\"Base class for Conditional GAM models.\n    \"\"\"\n    def forward(self,\n                inputs: ForwardInputs,\n                data_samples: Optional[list] = None,\n                mode: Optional[str] = None) -&gt; List[DataSample]:\n        if isinstance(inputs, Tensor):\n            noise = inputs\n            sample_kwargs = {}\n        else:\n            noise = inputs.get('noise', None)\n            num_batches = get_valid_num_batches(inputs, data_samples)\n            noise = self.noise_fn(noise, num_batches=num_batches)\n            sample_kwargs = inputs.get('sample_kwargs', dict())\n        num_batches = noise.shape[0]\n\n        pass\n        ...\n</code></pre> <p>\u200b\u4f8b\u5982\u200b\u5728\u200b<code>BaseEditModel</code>\u200b\u548c\u200b<code>BaseConditionalGAN</code>\u200b\u6a21\u578b\u200b\u4e2d\u200b\u5206\u522b\u200b\u9700\u8981\u200b\u8f93\u5165\u200b\uff08input\uff09\u200b\u5305\u62ec\u200b <code>img</code> \u200b\u548c\u200b <code>noise</code> \u200b\u7684\u200b\u952e\u503c\u200b\u8f93\u5165\u200b\u3002\u200b\u540c\u65f6\u200b\uff0c\u200b\u76f8\u5e94\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u4e5f\u200b\u5e94\u8be5\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u66b4\u9732\u200b, \u200b\u4ee5\u200bcyclegan_lsgan-id0-resnet-in_1xb1-80kiters_facades.py\u200b\u4e3a\u4f8b\u200b\uff0c</p> <pre><code>domain_a = 'photo'\ndomain_b = 'mask'\npack_input = dict(\n    type='PackInputs',\n    keys=[f'img_{domain_a}', f'img_{domain_b}'],\n    data_keys=[f'img_{domain_a}', f'img_{domain_b}'])\n</code></pre>"},{"location":"advanced_guides/data_flow/#_5","title":"\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u7684\u200b\u6570\u636e\u5904\u7406","text":"<p>\u200b\u4ee5\u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u7684\u200b\u83b7\u53d6\u200b\u5b57\u5178\u200b\u5217\u8868\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\uff08dataloader\uff09\u200b\u4e2d\u200b\u7684\u200b <code>collect_fn</code> \u200b\u4f1a\u200b\u63d0\u53d6\u200b\u6bcf\u4e2a\u200b\u5b57\u5178\u200b\u7684\u200b<code>inputs</code>\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u6574\u5408\u200b\u6210\u200b\u4e00\u4e2a\u200b\u6279\u5904\u7406\u200b\u5f20\u91cf\u200b\uff1b\u200b\u6b64\u5916\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u5b57\u5178\u200b\u4e2d\u200b\u7684\u200b<code>data_sample</code>\u200b\u4e5f\u200b\u4f1a\u200b\u88ab\u200b\u6574\u5408\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u5217\u8868\u200b\uff0c\u200b\u4ece\u800c\u200b\u8f93\u51fa\u200b\u4e00\u4e2a\u200b\u4e0e\u200b\u5148\u524d\u200b\u5b57\u5178\u200b\u6709\u200b\u76f8\u540c\u200b\u952e\u200b\u7684\u200b\u5b57\u5178\u200b\uff1b\u200b\u6700\u7ec8\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u4f1a\u200b\u901a\u8fc7\u200b <code>collect_fn</code> \u200b\u8f93\u51fa\u200b\u8fd9\u4e2a\u200b\u5b57\u5178\u200b\u3002\u200b\u8be6\u7ec6\u200b\u6587\u6863\u200b\u53ef\u89c1\u200b\u6570\u636e\u200b\u96c6\u200b\u4e0e\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u3002</p>"},{"location":"advanced_guides/data_flow/#_6","title":"\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\u7684\u200b\u6570\u636e\u5904\u7406","text":"<p>\u200b\u6570\u636e\u200b\u9884\u5904\u7406\u200b\u662f\u200b\u6570\u636e\u200b\u8f93\u5165\u200b\u6a21\u578b\u200b\u4e4b\u524d\u200b\uff0c\u200b\u5904\u7406\u200b\u6570\u636e\u200b\u8fc7\u7a0b\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u6b65\u200b\u3002 \u200b\u6570\u636e\u200b\u9884\u5904\u7406\u200b\u8fc7\u7a0b\u200b\u4f1a\u200b\u5bf9\u200b\u56fe\u50cf\u200b\u8fdb\u884c\u200b\u5f52\u4e00\u200b\u5904\u7406\u200b\uff0c\u200b\u5982\u200b\u628a\u200b BGR \u200b\u6a21\u5f0f\u200b\u8f6c\u6362\u200b\u4e3a\u200b RGB \u200b\u6a21\u5f0f\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u6240\u6709\u200b\u6570\u636e\u200b\u8fc1\u79fb\u200b\u81f3\u200b GPU \u200b\u7b49\u200b\u76ee\u6807\u200b\u8bbe\u5907\u200b\u4e2d\u200b \u3002\u200b\u4e0a\u8ff0\u200b\u5404\u200b\u6b65\u9aa4\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u6700\u7ec8\u200b\u4f1a\u200b\u5f97\u5230\u200b\u4e00\u4e2a\u200b\u5143\u7ec4\u200b\uff0c\u200b\u8be5\u200b\u5143\u7ec4\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u6279\u5904\u7406\u200b\u56fe\u50cf\u200b\u7684\u200b\u5217\u8868\u200b\uff0c\u200b\u548c\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u6837\u672c\u200b\u7684\u200b\u5217\u8868\u200b\u3002\u200b\u8be6\u7ec6\u200b\u6587\u6863\u200b\u53ef\u89c1\u200b\u6570\u636e\u200b\u9884\u5904\u7406\u200b\u3002</p>"},{"location":"advanced_guides/data_flow/#_7","title":"\u6a21\u578b\u200b\u8f93\u51fa\u200b\u4e0e\u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6570\u636e\u6d41","text":"<p>MMEngine\u200b\u7ea6\u5b9a\u200b\u4e86\u200b\u62bd\u8c61\u200b\u6570\u636e\u200b\u63a5\u53e3\u200b\u7528\u4e8e\u200b\u6570\u636e\u200b\u4f20\u9012\u200b\uff0c\u200b\u5176\u4e2d\u200b \u200b\u6570\u636e\u200b\u6837\u672c\u200b(DataSample) \u200b\u4f5c\u4e3a\u200b\u4e00\u5c42\u200b\u66f4\u52a0\u200b\u9ad8\u7ea7\u200b\u5c01\u88c5\u200b\u53ef\u4ee5\u200b\u5bb9\u7eb3\u200b\u66f4\u200b\u591a\u200b\u7c7b\u522b\u200b\u7684\u200b\u6807\u7b7e\u200b\u6570\u636e\u200b\u3002\u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\uff0c\u200b\u7528\u4e8e\u200b\u53ef\u89c6\u5316\u200b\u5bf9\u6bd4\u200b\u7684\u200b<code>ConcatImageVisualizer</code>\u200b\u540c\u65f6\u200b\u4e5f\u200b\u901a\u8fc7\u200b <code>add_datasample</code> \u200b\u65b9\u6cd5\u200b\u63a7\u5236\u200b\u53ef\u89c6\u5316\u200b\u5177\u4f53\u5185\u5bb9\u200b\uff0c\u200b\u5177\u4f53\u200b\u914d\u7f6e\u200b\u5982\u4e0b\u200b\u3002</p> <pre><code>visualizer = dict(\n    type='ConcatImageVisualizer',\n    vis_backends=[dict(type='LocalVisBackend')],\n    fn_key='gt_path',\n    img_keys=['gt_img', 'input', 'pred_img'],\n    bgr2rgb=True)\n</code></pre>"},{"location":"advanced_guides/data_preprocessor/","title":"\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\uff08\u200b\u5f85\u200b\u66f4\u65b0\u200b\uff09","text":""},{"location":"advanced_guides/evaluator/","title":"\u8bc4\u4f30\u5668","text":""},{"location":"advanced_guides/evaluator/#_2","title":"\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u4e0e\u200b\u8bc4\u6d4b\u200b\u5668","text":"<p>\u200b\u5728\u200b\u6a21\u578b\u200b\u7684\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u4e2d\u200b\uff0c\u200b\u901a\u5e38\u200b\u9700\u8981\u200b\u5bf9\u6a21\u578b\u200b\u7684\u200b\u7cbe\u5ea6\u200b\u8fdb\u884c\u200b\u5b9a\u91cf\u200b\u7684\u200b\u8bc4\u6d4b\u200b\u3002\u200b\u5728\u200bmmagic\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b(metric)\u200b\u548c\u200b\u8bc4\u6d4b\u200b\u5668\u200b(evaluator)\u200b\u6765\u200b\u5b8c\u6210\u200b\u8fd9\u4e00\u200b\u529f\u80fd\u200b\u3002</p> <ul> <li>\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b(metric)\u200b\u7528\u4e8e\u200b\u6839\u636e\u200b\u6d4b\u8bd5\u6570\u636e\u200b\u548c\u200b\u6a21\u578b\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\uff0c\u200b\u7279\u5b9a\u200b\u6a21\u578b\u200b\u7cbe\u5ea6\u200b\u6307\u6807\u200b\u7684\u200b\u8ba1\u7b97\u200b\u3002\u200b\u5728\u200bmmagic\u200b\u4e2d\u200b\u5185\u7f6e\u200b\u4e86\u200b\u591a\u79cd\u200bmetric\uff0c\u200b\u8be6\u89c1\u200b\u8bc4\u4ef7\u200b\u6307\u6807\u200b\u3002\u200b\u540c\u65f6\u200bmetric\u200b\u548c\u200b\u6570\u636e\u200b\u96c6\u89e3\u200b\u8026\u200b\uff0c\u200b\u6bcf\u79cd\u200bmetric\u200b\u53ef\u4ee5\u200b\u7528\u4e8e\u200b\u591a\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\u3002</li> <li>\u200b\u8bc4\u6d4b\u200b\u5668\u200b(evaluator)\u200b\u662f\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u7684\u200b\u4e0a\u5c42\u200b\u6a21\u5757\u200b\uff0c\u200b\u901a\u5e38\u200b\u9700\u8981\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u6216\u8005\u200b\u591a\u4e2a\u200b\u6307\u6807\u200b\u3002\u200b\u8bc4\u6d4b\u200b\u5668\u200b\u7684\u200b\u4f5c\u7528\u200b\u662f\u200b\u5728\u200b\u6a21\u578b\u200b\u8bc4\u6d4b\u200b\u65f6\u200b\u5b8c\u6210\u200b\u5fc5\u8981\u200b\u7684\u200b\u6570\u636e\u683c\u5f0f\u200b\u8f6c\u6362\u200b\uff0c\u200b\u5e76\u200b\u8c03\u7528\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u6765\u200b\u8ba1\u7b97\u200b\u6a21\u578b\u200b\u7cbe\u5ea6\u200b\u3002\u200b\u8bc4\u6d4b\u200b\u5668\u200b\u901a\u5e38\u200b\u7531\u200b\u6267\u884c\u5668\u200b\u6216\u200b\u6d4b\u8bd5\u200b\u811a\u672c\u200b\u6784\u5efa\u200b\uff0c\u200b\u5206\u522b\u200b\u7528\u4e8e\u200b\u5728\u7ebf\u200b\u8bc4\u6d4b\u200b\u548c\u200b\u79bb\u7ebf\u200b\u8bc4\u6d4b\u200b\u3002</li> </ul> <p>mmagic\u200b\u4e2d\u200b\u7684\u200b\u8bc4\u6d4b\u200b\u5668\u200b\u7ee7\u627f\u200b\u81ea\u200bmmengine\u200b\u4e2d\u200b\u7684\u200b\u8bc4\u6d4b\u200b\u5668\u200b\uff0c\u200b\u57fa\u672c\u200b\u4f7f\u7528\u200b\u65b9\u6cd5\u200b\u4e5f\u200b\u4e0e\u200bmmengine\u200b\u4e2d\u200b\u7684\u200b\u8bc4\u6d4b\u200b\u5668\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u5177\u4f53\u200b\u53ef\u4ee5\u200b\u53c2\u89c1\u200b\u6a21\u578b\u200b\u7cbe\u5ea6\u200b\u8bc4\u6d4b\u200b\u3002\u200b\u4f46\u200b\u4e0d\u540c\u4e8e\u200b\u5176\u4ed6\u200b\u4e0a\u5c42\u200b\u89c6\u89c9\u200b\u4efb\u52a1\u200b\uff0c\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u7684\u200b\u8bc4\u4f30\u200b\u6307\u6807\u200b\u5f80\u5f80\u200b\u5177\u6709\u200b\u591a\u79cd\u200b\u8f93\u5165\u200b\u3002\u200b\u4f8b\u5982\u200bInception Score\uff08IS\uff09\u200b\u6307\u6807\u200b\u7684\u200b\u8f93\u5165\u200b\u4ec5\u4e3a\u200b\u865a\u5047\u200b\u56fe\u7247\u200b\u548c\u200b\u4efb\u610f\u200b\u6570\u91cf\u200b\u7684\u200b\u771f\u5b9e\u200b\u56fe\u7247\u200b\uff1bPerceptual path length\uff08PPL) \u200b\u5219\u200b\u9700\u8981\u200b\u4ece\u9690\u200b\u7a7a\u95f4\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u91c7\u6837\u200b\u3002\u200b\u4e3a\u4e86\u200b\u5bf9\u200b\u4e0d\u540c\u200b\u7684\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u8fdb\u884c\u200b\u517c\u5bb9\u200b\uff0cmmagic\u200b\u8bbe\u8ba1\u200b\u4e86\u200b\u4e24\u4e2a\u200b\u91cd\u8981\u200b\u7684\u200b\u65b9\u6cd5\u200bprepare_metrics\u200b\u548c\u200bprepare_samplers\u200b\u6765\u200b\u5b9e\u73b0\u200b\u4e0a\u8ff0\u200b\u8981\u6c42\u200b\u3002</p>"},{"location":"advanced_guides/evaluator/#prepare_metrics","title":"prepare_metrics","text":"<pre><code>class Evaluator(Evaluator):\n    ...\n    def prepare_metrics(self, module: BaseModel, dataloader: DataLoader):\n        \"\"\"Prepare for metrics before evaluation starts. Some metrics use\n        pretrained model to extract feature. Some metrics use pretrained model\n        to extract feature and input channel order may vary among those models.\n        Therefore, we first parse the output color order from data\n        preprocessor and set the color order for each metric. Then we pass the\n        dataloader to each metrics to prepare pre-calculated items. (e.g.\n        inception feature of the real images). If metric has no pre-calculated\n        items, :meth:`metric.prepare` will be ignored. Once the function has\n        been called, :attr:`self.is_ready` will be set as `True`. If\n        :attr:`self.is_ready` is `True`, this function will directly return to\n        avoid duplicate computation.\n\n        Args:\n            module (BaseModel): Model to evaluate.\n            dataloader (DataLoader): The dataloader for real images.\n        \"\"\"\n        if self.metrics is None:\n            self.is_ready = True\n            return\n\n        if self.is_ready:\n            return\n\n        # prepare metrics\n        for metric in self.metrics:\n            metric.prepare(module, dataloader)\n        self.is_ready = True\n</code></pre> <p>prepare_metrics\u200b\u65b9\u6cd5\u200b\u9700\u8981\u200b\u5728\u200b\u8bc4\u6d4b\u200b\u5f00\u59cb\u200b\u4e4b\u524d\u200b\u8c03\u7528\u200b\u3002\u200b\u5b83\u200b\u88ab\u200b\u7528\u4e8e\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u5f00\u59cb\u200b\u8bc4\u6d4b\u200b\u4e4b\u524d\u200b\u8fdb\u884c\u200b\u9884\u5904\u7406\u200b\uff0c\u200b\u4f1a\u200b\u4f9d\u6b21\u200b\u8c03\u7528\u200bevaluator\u200b\u7684\u200b\u6240\u6709\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u7684\u200bprepare\u200b\u65b9\u6cd5\u200b\u6765\u200b\u51c6\u5907\u200b\u8be5\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u7684\u200b\u9700\u8981\u200b\u9884\u5148\u200b\u8ba1\u7b97\u200b\u597d\u200b\u7684\u200b\u5143\u7d20\u200b(\u200b\u4f8b\u5982\u200b\u4e00\u4e9b\u200b\u9690\u85cf\u200b\u5c42\u200b\u7684\u200b\u7279\u5f81\u200b)\u3002\u200b\u540c\u65f6\u200b\u4e3a\u4e86\u200b\u907f\u514d\u200b\u591a\u6b21\u91cd\u590d\u200b\u8c03\u7528\u200b\uff0c\u200b\u5728\u200b\u6240\u6709\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u9884\u5904\u7406\u200b\u5b8c\u6210\u200b\u4e4b\u540e\u200b\uff0cevaluator.is_ready \u200b\u6807\u5fd7\u200b\u4f4d\u4f1a\u200b\u88ab\u200b\u8bbe\u7f6e\u200b\u4e3a\u200bTrue\u3002</p> <pre><code>class GenMetric(BaseMetric):\n    ...\n    def prepare(self, module: nn.Module, dataloader: DataLoader) -&gt; None:\n        \"\"\"Prepare for the pre-calculating items of the metric. Defaults to do\n        nothing.\n\n        Args:\n            module (nn.Module): Model to evaluate.\n            dataloader (DataLoader): Dataloader for the real images.\n        \"\"\"\n        if is_model_wrapper(module):\n            module = module.module\n        self.data_preprocessor = module.data_preprocessor\n</code></pre>"},{"location":"advanced_guides/evaluator/#prepare_samplers","title":"prepare_samplers","text":"<p>\u200b\u5bf9\u4e8e\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u800c\u8a00\u200b\uff0c\u200b\u4e0d\u540c\u200b\u7684\u200bmetric\u200b\u9700\u8981\u200b\u4e0d\u540c\u200b\u7684\u200b\u8f93\u5165\u200b\u3002\u200b\u4f8b\u5982\u200bFID, KID, IS\u200b\u53ea\u200b\u9700\u8981\u200b\u751f\u6210\u200b\u7684\u200bfake images\uff0c\u200b\u800c\u200bPPL\u200b\u5219\u200b\u9700\u8981\u200b\u9690\u200b\u7a7a\u95f4\u200b\u7684\u200b\u5411\u91cf\u200b\u3002\u200b\u56e0\u6b64\u200bmmagic\u200b\u5c06\u200b\u4e0d\u540c\u200b\u7684\u200b\u8bc4\u4f30\u200b\u6307\u6807\u200b\u6309\u7167\u200b\u8f93\u5165\u200b\u7684\u200b\u7c7b\u578b\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5206\u7ec4\u200b\uff0c\u200b\u5c5e\u4e8e\u200b\u540c\u4e00\u4e2a\u200b\u7ec4\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6216\u8005\u200b\u591a\u4e2a\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u5171\u4eab\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u7684\u200b\u91c7\u6837\u5668\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u7684\u200bsampler mode\u200b\u7531\u8be5\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u7684\u200bSAMPLER_MODE\u200b\u5c5e\u6027\u200b\u51b3\u5b9a\u200b\u3002</p> <pre><code>class GenMetric(BaseMetric):\n    ...\n    SAMPLER_MODE = 'normal'\n\nclass GenerativeMetric(GenMetric):\n    ...\n    SAMPLER_MODE = 'Generative'\n</code></pre> <p>\u200b\u800c\u200bevaluator\u200b\u7684\u200bprepare_samplers \u200b\u65b9\u6cd5\u200b\u5c31\u662f\u200b\u6839\u636e\u200b\u6240\u6709\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u7684\u200bsampler mode\u200b\u6765\u200b\u51c6\u5907\u200b\u597d\u200bdata sampler\u3002</p> <pre><code>class Evaluator(Evaluator):\n    ...\n    def prepare_samplers(self, module: BaseModel, dataloader: DataLoader\n                         ) -&gt; List[Tuple[List[BaseMetric], Iterator]]:\n        \"\"\"Prepare for the sampler for metrics whose sampling mode are\n        different. For generative models, different metric need image\n        generated with different inputs. For example, FID, KID and IS need\n        images generated with random noise, and PPL need paired images on the\n        specific noise interpolation path. Therefore, we first group metrics\n        with respect to their sampler's mode (refers to\n        :attr:~`GenMetrics.SAMPLER_MODE`), and build a shared sampler for each\n        metric group. To be noted that, the length of the shared sampler\n        depends on the metric of the most images required in each group.\n\n        Args:\n            module (BaseModel): Model to evaluate. Some metrics (e.g. PPL)\n                require `module` in their sampler.\n            dataloader (DataLoader): The dataloader for real image.\n\n        Returns:\n            List[Tuple[List[BaseMetric], Iterator]]: A list of \"metrics-shared\n                sampler\" pair.\n        \"\"\"\n        if self.metrics is None:\n            return [[[None], []]]\n\n        # grouping metrics based on `SAMPLER_MODE` and `sample_mode`\n        metric_mode_dict = defaultdict(list)\n        for metric in self.metrics:  # \u200b\u4e3a\u200b\u6bcf\u4e2a\u200bmetric\u200b\u6307\u5b9a\u200bsampler group\n            metric_md5 = self._cal_metric_hash(metric)\n            metric_mode_dict[metric_md5].append(metric)\n\n        metrics_sampler_list = []\n        for metrics in metric_mode_dict.values(): #\u200b\u4e3a\u200b\u6bcf\u4e2a\u200bgroup\u200b\u751f\u6210\u200bsampler\n            first_metric = metrics[0]\n            metrics_sampler_list.append([\n                metrics,\n                first_metric.get_metric_sampler(module, dataloader, metrics)\n            ])\n\n        return metrics_sampler_list\n</code></pre> <p>\u200b\u8be5\u200b\u65b9\u6cd5\u200b\u4f1a\u200b\u9996\u5148\u200b\u68c0\u67e5\u200b\u81ea\u8eab\u200b\u662f\u5426\u200b\u6709\u200b\u9700\u8981\u200b\u8ba1\u7b97\u200b\u7684\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\uff1a\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\uff0c\u200b\u5982\u679c\u200b\u6709\u200b\u5219\u200b\u4f1a\u200b\u904d\u5386\u200b\u6240\u6709\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\uff0c\u200b\u5bf9\u200b\u6240\u6709\u200b\u91c7\u6837\u200b\u6307\u6807\u200b\u6839\u636e\u200bsampler_mode\u200b\u548c\u200bsample_model\u200b\u8fdb\u884c\u200b\u5206\u7ec4\u200b, \u200b\u5177\u4f53\u200b\u5b9e\u73b0\u200b\u65b9\u5f0f\u200b\u4e3a\u200b\u6839\u636e\u200bsampler_mode\u200b\u548c\u200bsample_model\u200b\u8ba1\u7b97\u200bhash\u200b\u7801\u200b\uff0c\u200b\u5c06\u200b\u5177\u6709\u200b\u76f8\u540c\u200bhash\u200b\u7801\u200b\u7684\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u653e\u5165\u200b\u540c\u4e00\u4e2a\u200b\u5217\u8868\u200b\u91cc\u200b\u3002</p> <pre><code>class Evaluator(Evaluator):\n    ...\n    @staticmethod\n    def _cal_metric_hash(metric: GenMetric):\n        \"\"\"Calculate a unique hash value based on the `SAMPLER_MODE` and\n        `sample_model`.\"\"\"\n        sampler_mode = metric.SAMPLER_MODE\n        sample_model = metric.sample_model\n        metric_dict = {\n            'SAMPLER_MODE': sampler_mode,\n            'sample_model': sample_model\n        }\n        if hasattr(metric, 'need_cond_input'):\n            metric_dict['need_cond_input'] = metric.need_cond_input\n        md5 = hashlib.md5(repr(metric_dict).encode('utf-8')).hexdigest()\n        return md5\n</code></pre> <p>\u200b\u6700\u540e\u200b\u8be5\u200b\u65b9\u6cd5\u200b\u4f1a\u4e3a\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u7ec4\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200bsampler\u200b\u91c7\u6837\u5668\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u5230\u200b\u5217\u8868\u200b\u8fd4\u56de\u200b\u3002</p>"},{"location":"advanced_guides/evaluator/#_3","title":"\u8bc4\u6d4b\u200b\u5668\u200b\u8bc4\u6d4b\u200b\u6d41\u7a0b","text":"<p>\u200b\u6574\u4e2a\u200b\u8bc4\u6d4b\u200b\u5668\u200b\u7684\u200b\u8bc4\u6d4b\u200b\u6d41\u7a0b\u200b\u5728\u200b\u65b9\u6cd5\u200bmmagic.engine.runner.MultiValLoop.run\u200b\u548c\u200bmmagic.engine.runner.MultiTestLoop.run\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u3002\u200b\u4ee5\u200bmmagic.engine.runner.MultiTestLoop.run\u200b\u4e3a\u4f8b\u200b\uff1a</p> <pre><code>class MultiValLoop(BaseLoop):\n    ...\n    def run(self):\n    ...\n        # 1. prepare all metrics and get the total length\n        metrics_sampler_lists = []\n        meta_info_list = []\n        dataset_name_list = []\n        for evaluator, dataloader in zip(self.evaluators, self.dataloaders):\n            # 1.1 prepare for metrics\n            evaluator.prepare_metrics(module, dataloader)\n            # 1.2 prepare for metric-sampler pair\n            metrics_sampler_list = evaluator.prepare_samplers(\n                module, dataloader)\n            metrics_sampler_lists.append(metrics_sampler_list)\n            # 1.3 update total length\n            self._total_length += sum([\n                len(metrics_sampler[1])\n                for metrics_sampler in metrics_sampler_list\n            ])\n            # 1.4 save metainfo and dataset's name\n            meta_info_list.append(\n                getattr(dataloader.dataset, 'metainfo', None))\n            dataset_name_list.append(dataloader.dataset.__class__.__name__)\n</code></pre> <p>runner\u200b\u9996\u5148\u200b\u4f1a\u200b\u901a\u8fc7\u200bevaluator.prepare_metrics\u200b\u548c\u200bevaluator.prepare_samplers\u200b\u4e24\u4e2a\u200b\u65b9\u6cd5\u200b\u6765\u200b\u8fdb\u884c\u200b\u8bc4\u6d4b\u200b\u6240\u200b\u9700\u8981\u200b\u7684\u200b\u9884\u5904\u7406\u200b\u5de5\u4f5c\u200b\u548c\u200b\u83b7\u53d6\u200b\u8bc4\u6d4b\u200b\u6240\u200b\u9700\u8981\u200b\u7684\u200b\u6570\u636e\u200b\u91c7\u6837\u5668\u200b\uff1b\u200b\u540c\u65f6\u200b\u66f4\u65b0\u200b\u6240\u6709\u200b\u91c7\u6837\u5668\u200b\u7684\u200b\u91c7\u6837\u200b\u603b\u957f\u5ea6\u200b\u3002\u200b\u7531\u4e8e\u200bmmagic\u200b\u7684\u200b\u8bc4\u6d4b\u200b\u6307\u6807\u200b\u548c\u200b\u6570\u636e\u200b\u96c6\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5206\u79bb\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4e00\u4e9b\u200b\u5728\u200b\u8bc4\u6d4b\u200b\u65f6\u6240\u200b\u9700\u8981\u200b\u7684\u200bmeta_info\u200b\u4e5f\u200b\u9700\u8981\u200b\u8fdb\u884c\u200b\u4fdd\u5b58\u200b\u5e76\u200b\u4f20\u9012\u200b\u7ed9\u200b\u8bc4\u6d4b\u200b\u5668\u200b\u3002</p> <pre><code>class MultiValLoop(BaseLoop):\n    ...\n    def run(self):\n    ...\n        # 2. run evaluation\n        for idx in range(len(self.evaluators)):\n            # 2.1 set self.evaluator for run_iter\n            self.evaluator = self.evaluators[idx]\n            self.dataloader = self.dataloaders[idx]\n\n            # 2.2 update metainfo for evaluator and visualizer\n            meta_info = meta_info_list[idx]\n            dataset_name = dataset_name_list[idx]\n            if meta_info:\n                self.evaluator.dataset_meta = meta_info\n                self._runner.visualizer.dataset_meta = meta_info\n            else:\n                warnings.warn(\n                    f'Dataset {dataset_name} has no metainfo. `dataset_meta` '\n                    'in evaluator, metric and visualizer will be None.')\n\n            # 2.3 generate images\n            metrics_sampler_list = metrics_sampler_lists[idx]\n            for metrics, sampler in metrics_sampler_list:\n                for data in sampler:\n                    self.run_iter(idx_counter, data, metrics)\n                    idx_counter += 1\n\n            # 2.4 evaluate metrics and update multi_metric\n            metrics = self.evaluator.evaluate()\n            if multi_metric and metrics.keys() &amp; multi_metric.keys():\n                raise ValueError('Please set different prefix for different'\n                                 ' datasets in `val_evaluator`')\n            else:\n                multi_metric.update(metrics)\n        # 3. finish evaluation and call hooks\n        self._runner.call_hook('after_val_epoch', metrics=multi_metric)\n        self._runner.call_hook('after_val')\n</code></pre> <p>\u200b\u5728\u200b\u5b8c\u6210\u200b\u4e86\u200b\u8bc4\u6d4b\u200b\u524d\u200b\u7684\u200b\u51c6\u5907\u200b\u4e4b\u540e\u200b\uff0crunner\u200b\u4f1a\u200b\u904d\u5386\u200b\u6240\u6709\u200bevaluator\uff0c\u200b\u4f9d\u6b21\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u6bcf\u4e2a\u200bevaluator\u200b\u9700\u8981\u200b\u5bf9\u5e94\u200b\u4e00\u4e2a\u200bdataloader\uff0c\u200b\u5b8c\u6210\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u8bc4\u6d4b\u200b\u5de5\u4f5c\u200b\u3002\u200b\u5177\u4f53\u200b\u5728\u200b\u5bf9\u200b\u6bcf\u4e2a\u200bevaluator\u200b\u8fdb\u884c\u200b\u8bc4\u6d4b\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u9996\u5148\u200b\u9700\u8981\u200b\u5c06\u200b\u8bc4\u6d4b\u200b\u6240\u200b\u9700\u8981\u200b\u7684\u200bmeta_info\u200b\u4f20\u9012\u200b\u7ed9\u200b\u8bc4\u6d4b\u200b\u5668\u200b\uff0c\u200b\u968f\u540e\u200b\u904d\u5386\u200b\u8be5\u200bevaluator\u200b\u7684\u200b\u6240\u6709\u200bmetrics_sampler\uff0c\u200b\u751f\u6210\u200b\u8bc4\u6d4b\u200b\u6240\u200b\u9700\u8981\u200b\u7684\u200b\u56fe\u50cf\u200b\uff0c\u200b\u6700\u540e\u200b\u518d\u200b\u5b8c\u6210\u200b\u8bc4\u6d4b\u200b\u3002</p>"},{"location":"advanced_guides/structures/","title":"Data Structure","text":"<p>MMaigc\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\u63a5\u53e3\u200b<code>DataSample</code> \u200b\u7ee7\u627f\u200b\u81ea\u200b MMEngine \u200b\u7684\u200b <code>BaseDataElement</code>.MMEngine \u200b\u7684\u200b\u62bd\u8c61\u200b\u6570\u636e\u200b\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u57fa\u7840\u200b\u7684\u200b\u589e\u200b/\u200b\u5220\u200b/\u200b\u6539\u200b/\u200b\u67e5\u200b\u529f\u80fd\u200b\uff0c\u200b\u4e14\u200b\u652f\u6301\u200b\u4e0d\u540c\u200b\u8bbe\u5907\u200b\u95f4\u200b\u7684\u200b\u6570\u636e\u200b\u8fc1\u79fb\u200b\uff0c\u200b\u4e5f\u200b\u652f\u6301\u200b\u4e86\u200b\u7c7b\u200b\u5b57\u5178\u200b\u548c\u200b\u5f20\u91cf\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5145\u5206\u200b\u6ee1\u8db3\u200b\u4e86\u200b\u6570\u636e\u200b\u7684\u200b\u65e5\u5e38\u200b\u4f7f\u7528\u200b\u9700\u6c42\u200b\uff0c\u200b\u8fd9\u200b\u4e5f\u200b\u4f7f\u5f97\u200b\u4e0d\u540c\u200b\u7b97\u6cd5\u200b\u7684\u200b\u6570\u636e\u200b\u63a5\u53e3\u200b\u53ef\u4ee5\u200b\u5f97\u5230\u200b\u7edf\u4e00\u200b\u3002</p> <p>\u200b\u7279\u522b\u200b\u7684\u200b\uff0c<code>BaseDataElement</code> \u200b\u4e2d\u200b\u5b58\u5728\u200b\u4e24\u79cd\u200b\u7c7b\u578b\u200b\u7684\u200b\u6570\u636e\u200b:</p> <ul> <li><code>metainfo</code> \u200b\u7c7b\u578b\u200b\uff0c\u200b\u5305\u542b\u200b\u6570\u636e\u200b\u7684\u200b\u5143\u200b\u4fe1\u606f\u200b\u4ee5\u200b\u786e\u4fdd\u200b\u6570\u636e\u200b\u7684\u200b\u5b8c\u6574\u6027\u200b\uff0c\u200b\u5982\u200b <code>img_shape</code>, <code>img_id</code> \u200b\u7b49\u200b\u6570\u636e\u200b\u6240\u5728\u200b\u56fe\u7247\u200b\u7684\u200b\u4e00\u4e9b\u200b\u57fa\u672c\u200b\u4fe1\u606f\u200b\uff0c\u200b\u65b9\u4fbf\u200b\u53ef\u89c6\u5316\u200b\u7b49\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5bf9\u200b\u6570\u636e\u200b\u8fdb\u884c\u200b\u6062\u590d\u200b\u548c\u200b\u4f7f\u7528\u200b\u3002</li> <li><code>data</code> \u200b\u7c7b\u578b\u200b\uff0c\u200b\u5982\u200b\u6807\u6ce8\u200b\u6846\u200b\u3001\u200b\u6846\u200b\u7684\u200b\u6807\u7b7e\u200b\u3001\u200b\u548c\u200b\u5b9e\u4f8b\u200b\u63a9\u7801\u200b\u7b49\u200b\u3002</li> </ul> <p>\u200b\u5f97\u76ca\u4e8e\u200b\u7edf\u4e00\u200b\u7684\u200b\u6570\u636e\u200b\u5c01\u88c5\u200b\uff0c\u200b\u7b97\u6cd5\u200b\u5e93\u5185\u200b\u7684\u200b <code>visualizer</code>, <code>evaluator</code>, <code>model</code> \u200b\u7b49\u200b\u5404\u4e2a\u200b\u6a21\u5757\u200b\u95f4\u200b\u7684\u200b\u6570\u636e\u200b\u6d41\u901a\u200b\u90fd\u200b\u5f97\u5230\u200b\u4e86\u200b\u6781\u5927\u200b\u7684\u200b\u7b80\u5316\u200b\u3002</p> <p><code>DataSample</code>\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u5206\u4e3a\u200b\u4ee5\u4e0b\u200b\u51e0\u4e2a\u200b\u5c5e\u6027\u200b\uff1a</p> <pre><code>- ``gt_img``: \u200b\u539f\u59cb\u200b\u56fe\u50cf\u200b\n- ``pred_img``: \u200b\u6a21\u578b\u200b\u9884\u6d4b\u200b\u56fe\u50cf\u200b\n- ``ref_img``:\u200b\u53c2\u8003\u200b\u56fe\u50cf\u200b\n- ``mask``: \u200b\u56fe\u50cf\u200b\u4fee\u590d\u200b\u4e2d\u200b\u7684\u200b\u906e\u6321\u200b\u533a\u57df\u200b\n- ``trimap``: \u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u4e2d\u200b\u7684\u200b\u4e09\u200b\u901a\u9053\u200b\u56fe\u200b\n- ``gt_alpha``: \u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u4e2d\u200b\u539f\u59cb\u200bAlpha\u200b\u56fe\u200b\n- ``pred_alpha``: \u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u4e2d\u200b\u6a21\u578b\u200b\u9884\u6d4b\u200bAlpha\u200b\u56fe\u200b\n- ``gt_fg``: \u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u4e2d\u200b\u539f\u59cb\u200b\u524d\u666f\u200b\u56fe\u200b\n- ``pred_fg``: \u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u4e2d\u200b\u6a21\u578b\u200b\u9884\u6d4b\u200b\u524d\u666f\u200b\u56fe\u200b\n- ``gt_bg``:  \u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u4e2d\u200b\u539f\u59cb\u200b\u80cc\u666f\u56fe\u200b\n- ``pred_bg``: \u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u4e2d\u200b\u6a21\u578b\u200b\u9884\u6d4b\u200b\u80cc\u666f\u56fe\u200b\n- ``gt_merged``:  \u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u4e2d\u200b\u539f\u59cb\u200b\u5408\u5e76\u200b\u56fe\u200b\n</code></pre> <p>\u200b\u4ee5\u4e0b\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b\u5c55\u793a\u200b\u4e86\u200b <code>DataSample</code> \u200b\u7684\u200b\u7ec4\u6210\u200b\u5143\u7d20\u200b\u7c7b\u578b\u200b\uff1a</p> <pre><code>import torch\nimport numpy as np\nfrom mmagic.structures import DataSample\nimg_meta = dict(img_shape=(800, 1196, 3))\nimg = torch.rand((3, 800, 1196))\ndata_sample = DataSample(gt_img=img, metainfo=img_meta)\nassert 'img_shape' in data_sample.metainfo_keys()\ndata_sample\n# `DataSample` \u200b\u7684\u200b\u7ec4\u6210\u200b\u5143\u7d20\u200b\u7c7b\u578b\u200b\n&lt;DataSample(\n\n        META INFORMATION\n        img_shape: (800, 1196, 3)\n\n        DATA FIELDS\n        gt_img: tensor(3, 800, 1196)\n    ) at 0x1f6a5a99a00&gt;\n</code></pre> <p><code>DataSample</code>\u200b\u540c\u6837\u200b\u652f\u6301\u200b<code>stack</code>\u200b\u548c\u200b<code>split</code>\u200b\u64cd\u4f5c\u200b\u5bf9\u200b\u6570\u636e\u200b\u8fdb\u884c\u200b\u6279\u5904\u7406\u200b:</p> <ol> <li>Stack</li> </ol> <p>\u200b\u8be5\u200b\u51fd\u6570\u200b\u7528\u4e8e\u200b\u5c06\u200b\u6570\u636e\u200b\u6837\u672c\u200b\u5217\u8868\u200b\u5806\u53e0\u200b\u6210\u200b\u4e00\u4e2a\u200b\u3002\u200b\u5f53\u200b\u6570\u636e\u200b\u6837\u672c\u200b\u5806\u53e0\u200b\u65f6\u200b\uff0c\u200b\u6240\u6709\u200b\u5f20\u91cf\u200b\u5b57\u6bb5\u200b\u90fd\u200b\u5c06\u200b\u5806\u53e0\u200b\u5728\u200b\u7b2c\u4e00\u200b\u7ef4\u5ea6\u200b\u3002\u200b\u5982\u679c\u200b\u6570\u636e\u200b\u6837\u672c\u200b\u4e2d\u6709\u200b\u975e\u200b\u5f20\u91cf\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u4f8b\u5982\u200b\u5217\u8868\u200b\u6216\u200b\u5b57\u5178\u200b\uff0c\u200b\u5219\u200b\u8fd9\u4e9b\u200b\u5b57\u6bb5\u200b\u7684\u200b\u503c\u200b\u5c06\u200b\u4fdd\u5b58\u200b\u5728\u200b\u5217\u8868\u200b\u4e2d\u200b\u3002</p> <pre><code>    Args:\n        data_samples (Sequence['DataSample']): \u200b\u5f85\u200b\u5806\u53e0\u200b\u7684\u200b\u6570\u636e\u200b\u6837\u672c\u200b\u5e8f\u5217\u200b\n\n    Returns:\n        DataSample: \u200b\u5806\u53e0\u200b\u7684\u200b\u6570\u636e\u200b\u6837\u672c\u200b\n</code></pre> <ol> <li>Split</li> </ol> <p>\u200b\u8be5\u200b\u51fd\u6570\u200b\u5c06\u200b\u5728\u200b\u7b2c\u4e00\u200b\u7ef4\u5ea6\u200b\u62c6\u5206\u200b\u6570\u636e\u200b\u6837\u672c\u200b\u5e8f\u5217\u200b\u3002</p> <pre><code>    Args:\n         allow_nonseq_value (bool): \u200b\u662f\u5426\u200b\u5141\u8bb8\u200b\u5728\u200b\u62c6\u5206\u200b\u64cd\u4f5c\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u975e\u200b\u987a\u5e8f\u200b\u6570\u636e\u200b\u3002\u200b\u5982\u679c\u200b\u4e3a\u200b \"True\"\uff0c           \u200b\u5c06\u200b\u4e3a\u200b\u6240\u6709\u200b\u62c6\u5206\u200b\u6570\u636e\u200b\u6837\u672c\u200b\u590d\u5236\u200b\u975e\u200b\u5e8f\u5217\u200b\u6570\u636e\u200b\uff1b\u200b\u5426\u5219\u200b\uff0c\u200b\u5c06\u200b\u5f15\u53d1\u200b\u9519\u8bef\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b \"False\"\u3002\n\n    Returns:\n         Sequence[DataSample]: \u200b\u62c6\u5206\u200b\u540e\u200b\u7684\u200b\u6570\u636e\u200b\u6837\u672c\u200b\u5217\u8868\u200b\u3002\n</code></pre> <p>\u200b\u4ee5\u4e0b\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b\u5c55\u793a\u200b\u4e86\u200b <code>stack</code>\u200b\u548c\u200b<code>split</code> \u200b\u7684\u200b\u4f7f\u7528\u200b\u65b9\u6cd5\u200b\uff1a</p> <pre><code>import torch\nimport numpy as np\nfrom mmagic.structures import DataSample\nimg_meta1 = img_meta2 = dict(img_shape=(800, 1196, 3))\nimg1 = torch.rand((3, 800, 1196))\nimg2 = torch.rand((3, 800, 1196))\ndata_sample1 = DataSample(gt_img=img1, metainfo=img_meta1)\ndata_sample2 = DataSample(gt_img=img2, metainfo=img_meta1)\n</code></pre> <pre><code># \u200b\u5806\u53e0\u200bstack\ndata_sample = DataSample.stack([data_sample1, data_sample2])\nprint(data_sample.gt_img.shape)\n    torch.Size([2, 3, 800, 1196])\nprint(data_sample.metainfo)\n    {'img_shape': [(800, 1196, 3), (800, 1196, 3)]}\n\n# \u200b\u62c6\u5206\u200bsplit\ndata_sample1_, data_sample2_ = data_sample.split()\nassert (data_sample1_.gt_img == img1).all()\nassert (data_sample2_.gt_img == img2).all()\n</code></pre>"},{"location":"community/contributing/","title":"\u8d21\u732e\u200b\u4ee3\u7801","text":"<p>\u200b\u6b22\u8fce\u200b\u52a0\u5165\u200b MMagic \u200b\u793e\u533a\u200b\uff0c\u200b\u6211\u4eec\u200b\u81f4\u529b\u4e8e\u200b\u6253\u9020\u200b\u65b0\u4e00\u4ee3\u200b\u4eba\u5de5\u667a\u80fd\u200b\u5185\u5bb9\u200b\u751f\u6210\u200b\uff08AIGC\uff09\u200b\u5de5\u5177\u7bb1\u200b\uff0c\u200b\u6211\u4eec\u200b\u6b22\u8fce\u200b\u4efb\u4f55\u200b\u7c7b\u578b\u200b\u7684\u200b\u8d21\u732e\u200b\uff0c\u200b\u5305\u62ec\u200b\u4f46\u200b\u4e0d\u200b\u9650\u4e8e\u200b</p> <p>\u200b\u4fee\u590d\u200b\u9519\u8bef\u200b</p> <p>\u200b\u4fee\u590d\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b\u9519\u8bef\u200b\u7684\u200b\u6b65\u9aa4\u200b\u5982\u4e0b\u200b\uff1a</p> <ol> <li>\u200b\u5982\u679c\u200b\u63d0\u4ea4\u200b\u7684\u200b\u4ee3\u7801\u200b\u6539\u52a8\u200b\u8f83\u5927\u200b\uff0c\u200b\u5efa\u8bae\u200b\u5148\u200b\u63d0\u4ea4\u200b issue\uff0c\u200b\u5e76\u200b\u6b63\u786e\u200b\u63cf\u8ff0\u200b issue \u200b\u7684\u200b\u73b0\u8c61\u200b\u3001\u200b\u539f\u56e0\u200b\u548c\u200b\u590d\u73b0\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u8ba8\u8bba\u200b\u540e\u200b\u786e\u8ba4\u200b\u4fee\u590d\u200b\u65b9\u6848\u200b\u3002</li> <li>\u200b\u4fee\u590d\u200b\u9519\u8bef\u200b\u5e76\u200b\u8865\u5145\u200b\u76f8\u5e94\u200b\u7684\u200b\u5355\u5143\u6d4b\u8bd5\u200b\uff0c\u200b\u63d0\u4ea4\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u3002</li> </ol> <p>\u200b\u65b0\u589e\u200b\u529f\u80fd\u200b\u6216\u200b\u7ec4\u4ef6\u200b</p> <ol> <li>\u200b\u5982\u679c\u200b\u65b0\u200b\u529f\u80fd\u200b\u6216\u200b\u6a21\u5757\u200b\u6d89\u53ca\u200b\u8f83\u5927\u200b\u7684\u200b\u4ee3\u7801\u200b\u6539\u52a8\u200b\uff0c\u200b\u5efa\u8bae\u200b\u5148\u200b\u63d0\u4ea4\u200b issue\uff0c\u200b\u786e\u8ba4\u200b\u529f\u80fd\u200b\u7684\u200b\u5fc5\u8981\u6027\u200b\u3002</li> <li>\u200b\u5b9e\u73b0\u200b\u65b0\u589e\u200b\u529f\u80fd\u200b\u5e76\u200b\u6dfb\u200b\u5355\u5143\u6d4b\u8bd5\u200b\uff0c\u200b\u63d0\u4ea4\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u3002</li> </ol> <p>\u200b\u6587\u6863\u200b\u8865\u5145\u200b</p> <p>\u200b\u4fee\u590d\u200b\u6587\u6863\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u63d0\u4ea4\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b</p> <p>\u200b\u6dfb\u52a0\u200b\u6587\u6863\u200b\u6216\u200b\u5c06\u200b\u6587\u6863\u200b\u7ffb\u8bd1\u6210\u200b\u5176\u4ed6\u200b\u8bed\u8a00\u200b\u6b65\u9aa4\u200b\u5982\u4e0b\u200b</p> <ol> <li>\u200b\u63d0\u4ea4\u200b issue\uff0c\u200b\u786e\u8ba4\u200b\u6dfb\u52a0\u200b\u6587\u6863\u200b\u7684\u200b\u5fc5\u8981\u6027\u200b\u3002</li> <li>\u200b\u6dfb\u52a0\u200b\u6587\u6863\u200b\uff0c\u200b\u63d0\u4ea4\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u3002</li> </ol>"},{"location":"community/contributing/#_2","title":"\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u5de5\u4f5c\u200b\u6d41","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u5bf9\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u4e0d\u200b\u4e86\u89e3\u200b\uff0c\u200b\u6ca1\u5173\u7cfb\u200b\uff0c\u200b\u63a5\u4e0b\u6765\u200b\u7684\u200b\u5185\u5bb9\u200b\u5c06\u4f1a\u200b\u4ece\u96f6\u5f00\u59cb\u200b\uff0c\u200b\u4e00\u6b65\u200b\u4e00\u6b65\u200b\u5730\u200b\u6307\u5f15\u200b\u4f60\u200b\u5982\u4f55\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u7684\u200b\u5f00\u53d1\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b github \u200b\u5b98\u65b9\u200b\u6587\u6863\u200b</p>"},{"location":"community/contributing/#1","title":"1. \u200b\u590d\u523b\u200b\u4ed3\u5e93","text":"<p>\u200b\u5f53\u200b\u4f60\u200b\u7b2c\u4e00\u6b21\u200b\u63d0\u4ea4\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u65f6\u200b\uff0c\u200b\u5148\u200b\u590d\u523b\u200b OpenMMLab \u200b\u539f\u4ee3\u7801\u200b\u5e93\u200b\uff0c\u200b\u70b9\u51fb\u200b GitHub \u200b\u9875\u9762\u200b\u53f3\u4e0a\u89d2\u200b\u7684\u200b Fork \u200b\u6309\u94ae\u200b\uff0c\u200b\u590d\u523b\u200b\u540e\u200b\u7684\u200b\u4ee3\u7801\u200b\u5e93\u200b\u5c06\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u5728\u200b\u4f60\u200b\u7684\u200b GitHub \u200b\u4e2a\u4eba\u4e3b\u9875\u200b\u4e0b\u200b\u3002</p> <p></p> <p>\u200b\u5c06\u200b\u4ee3\u7801\u200b\u514b\u9686\u200b\u5230\u200b\u672c\u5730\u200b</p> <pre><code>git clone git@github.com:{username}/mmagic.git\n</code></pre> <p>\u200b\u6dfb\u52a0\u200b\u539f\u4ee3\u7801\u200b\u5e93\u4e3a\u200b\u4e0a\u6e38\u200b\u4ee3\u7801\u200b\u5e93\u200b</p> <pre><code>git remote add upstream git@github.com:open-mmlab/mmagic\n</code></pre> <p>\u200b\u68c0\u67e5\u200b remote \u200b\u662f\u5426\u200b\u6dfb\u52a0\u200b\u6210\u529f\u200b\uff0c\u200b\u5728\u200b\u7ec8\u7aef\u200b\u8f93\u5165\u200b <code>git remote -v</code></p> <pre><code>origin  git@github.com:{username}/mmagic.git (fetch)\norigin  git@github.com:{username}/mmagic.git (push)\nupstream    git@github.com:open-mmlab/mmagic (fetch)\nupstream    git@github.com:open-mmlab/mmagic (push)\n</code></pre> <pre><code>\u200b\u8fd9\u91cc\u200b\u5bf9\u200b origin \u200b\u548c\u200b upstream \u200b\u8fdb\u884c\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u4ecb\u7ecd\u200b\uff0c\u200b\u5f53\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b git clone \u200b\u6765\u200b\u514b\u9686\u200b\u4ee3\u7801\u200b\u65f6\u200b\uff0c\u200b\u4f1a\u200b\u9ed8\u8ba4\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b origin \u200b\u7684\u200b remote\uff0c\u200b\u5b83\u200b\u6307\u5411\u200b\u6211\u4eec\u200b\u514b\u9686\u200b\u7684\u200b\u4ee3\u7801\u200b\u5e93\u200b\u5730\u5740\u200b\uff0c\u200b\u800c\u200b upstream \u200b\u5219\u200b\u662f\u200b\u6211\u4eec\u200b\u81ea\u5df1\u200b\u6dfb\u52a0\u200b\u7684\u200b\uff0c\u200b\u7528\u6765\u200b\u6307\u5411\u200b\u539f\u59cb\u200b\u4ee3\u7801\u200b\u5e93\u200b\u5730\u5740\u200b\u3002\u200b\u5f53\u7136\u200b\u5982\u679c\u200b\u4f60\u200b\u4e0d\u200b\u559c\u6b22\u200b\u4ed6\u200b\u53eb\u200b upstream\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u81ea\u5df1\u200b\u4fee\u6539\u200b\uff0c\u200b\u6bd4\u5982\u200b\u53eb\u200b open-mmlab\u3002\u200b\u6211\u4eec\u200b\u901a\u5e38\u200b\u5411\u200b origin \u200b\u63d0\u4ea4\u200b\u4ee3\u7801\u200b\uff08\u200b\u5373\u200b fork \u200b\u4e0b\u6765\u200b\u7684\u200b\u8fdc\u7a0b\u200b\u4ed3\u5e93\u200b\uff09\uff0c\u200b\u7136\u540e\u200b\u5411\u200b upstream \u200b\u63d0\u4ea4\u200b\u4e00\u4e2a\u200b pull request\u3002\u200b\u5982\u679c\u200b\u63d0\u4ea4\u200b\u7684\u200b\u4ee3\u7801\u200b\u548c\u200b\u6700\u65b0\u200b\u7684\u200b\u4ee3\u7801\u200b\u53d1\u751f\u51b2\u7a81\u200b\uff0c\u200b\u518d\u200b\u4ece\u200b upstream \u200b\u62c9\u53d6\u200b\u6700\u65b0\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u548c\u200b\u672c\u5730\u200b\u5206\u652f\u200b\u89e3\u51b3\u200b\u51b2\u7a81\u200b\uff0c\u200b\u518d\u200b\u63d0\u4ea4\u200b\u5230\u200b origin\u3002\n</code></pre>"},{"location":"community/contributing/#2-pre-commit","title":"2. \u200b\u914d\u7f6e\u200b pre-commit","text":"<p>\u200b\u5728\u200b\u672c\u5730\u200b\u5f00\u53d1\u200b\u73af\u5883\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b pre-commit \u200b\u6765\u200b\u68c0\u67e5\u200b\u4ee3\u7801\u200b\u98ce\u683c\u200b\uff0c\u200b\u4ee5\u200b\u786e\u4fdd\u200b\u4ee3\u7801\u200b\u98ce\u683c\u200b\u7684\u200b\u7edf\u4e00\u200b\u3002\u200b\u5728\u200b\u63d0\u4ea4\u200b\u4ee3\u7801\u200b\uff0c\u200b\u9700\u8981\u200b\u5148\u200b\u5b89\u88c5\u200b pre-commit\uff08\u200b\u9700\u8981\u200b\u5728\u200b mmagic \u200b\u76ee\u5f55\u200b\u4e0b\u200b\u6267\u884c\u200b\uff09:</p> <pre><code>pip install -U pre-commit\npre-commit install\n</code></pre> <p>\u200b\u68c0\u67e5\u200b pre-commit \u200b\u662f\u5426\u200b\u914d\u7f6e\u200b\u6210\u529f\u200b\uff0c\u200b\u5e76\u200b\u5b89\u88c5\u200b <code>.pre-commit-config.yaml</code> \u200b\u4e2d\u200b\u7684\u200b\u94a9\u5b50\u200b\uff1a</p> <pre><code>pre-commit run --all-files\n</code></pre> <p></p> <p></p> <pre><code>\u200b\u5982\u679c\u200b\u4f60\u200b\u662f\u200b\u4e2d\u56fd\u200b\u7528\u6237\u200b\uff0c\u200b\u7531\u4e8e\u200b\u7f51\u7edc\u200b\u539f\u56e0\u200b\uff0c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u5b89\u88c5\u200b\u5931\u8d25\u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c\u200b\u8fd9\u65f6\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u56fd\u5185\u200b\u6e90\u200b\n\npre-commit install -c .pre-commit-config-zh-cn.yaml\n\npre-commit run --all-files -c .pre-commit-config-zh-cn.yaml\n</code></pre> <p>\u200b\u5982\u679c\u200b\u5b89\u88c5\u200b\u8fc7\u7a0b\u200b\u88ab\u200b\u4e2d\u65ad\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u91cd\u590d\u200b\u6267\u884c\u200b <code>pre-commit run ...</code> \u200b\u7ee7\u7eed\u200b\u5b89\u88c5\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u63d0\u4ea4\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e0d\u200b\u7b26\u5408\u200b\u4ee3\u7801\u200b\u98ce\u683c\u200b\u89c4\u8303\u200b\uff0cpre-commit \u200b\u4f1a\u200b\u53d1\u51fa\u200b\u8b66\u544a\u200b\uff0c\u200b\u5e76\u200b\u81ea\u52a8\u200b\u4fee\u590d\u200b\u90e8\u5206\u200b\u9519\u8bef\u200b\u3002</p> <p></p> <p>\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u60f3\u200b\u4e34\u65f6\u200b\u7ed5\u5f00\u200b pre-commit \u200b\u7684\u200b\u68c0\u67e5\u200b\u63d0\u4ea4\u200b\u4e00\u6b21\u200b\u4ee3\u7801\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>git commit</code> \u200b\u65f6\u200b\u52a0\u4e0a\u200b <code>--no-verify</code>\uff08\u200b\u9700\u8981\u200b\u4fdd\u8bc1\u200b\u6700\u540e\u200b\u63a8\u9001\u200b\u81f3\u200b\u8fdc\u7a0b\u200b\u4ed3\u5e93\u200b\u7684\u200b\u4ee3\u7801\u200b\u80fd\u591f\u200b\u901a\u8fc7\u200b pre-commit \u200b\u68c0\u67e5\u200b\uff09\u3002</p> <pre><code>git commit -m \"xxx\" --no-verify\n</code></pre>"},{"location":"community/contributing/#3","title":"3. \u200b\u521b\u5efa\u200b\u5f00\u53d1\u200b\u5206\u652f","text":"<p>\u200b\u5b89\u88c5\u200b\u5b8c\u200b pre-commit \u200b\u4e4b\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u57fa\u4e8e\u200b main \u200b\u521b\u5efa\u200b\u5f00\u53d1\u200b\u5206\u652f\u200b\uff0c\u200b\u5efa\u8bae\u200b\u7684\u200b\u5206\u652f\u200b\u547d\u540d\u200b\u89c4\u5219\u200b\u4e3a\u200b <code>username/pr_name</code>\u3002</p> <pre><code>git checkout -b yhc/refactor_contributing_doc\n</code></pre> <p>\u200b\u5728\u200b\u540e\u7eed\u200b\u7684\u200b\u5f00\u53d1\u200b\u4e2d\u200b\uff0c\u200b\u5982\u679c\u200b\u672c\u5730\u200b\u4ed3\u5e93\u200b\u7684\u200b main \u200b\u5206\u652f\u200b\u843d\u540e\u200b\u4e8e\u200b upstream \u200b\u7684\u200b main \u200b\u5206\u652f\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5148\u62c9\u53d6\u200b upstream \u200b\u7684\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u540c\u6b65\u200b\uff0c\u200b\u518d\u200b\u6267\u884c\u200b\u4e0a\u9762\u200b\u7684\u200b\u547d\u4ee4\u200b</p> <pre><code>git pull upstream main\n</code></pre>"},{"location":"community/contributing/#4","title":"4. \u200b\u63d0\u4ea4\u200b\u4ee3\u7801\u200b\u5e76\u200b\u5728\u200b\u672c\u5730\u200b\u901a\u8fc7\u200b\u5355\u5143\u6d4b\u8bd5","text":"<ul> <li> <p>mmagic \u200b\u5f15\u5165\u200b\u4e86\u200b mypy \u200b\u6765\u200b\u505a\u200b\u9759\u6001\u200b\u7c7b\u578b\u200b\u68c0\u67e5\u200b\uff0c\u200b\u4ee5\u200b\u589e\u52a0\u200b\u4ee3\u7801\u200b\u7684\u200b\u9c81\u68d2\u6027\u200b\u3002\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u5728\u200b\u63d0\u4ea4\u200b\u4ee3\u7801\u200b\u65f6\u200b\uff0c\u200b\u9700\u8981\u200b\u8865\u5145\u200b Type Hints\u3002\u200b\u5177\u4f53\u200b\u89c4\u5219\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u6559\u7a0b\u200b\u3002</p> </li> <li> <p>\u200b\u63d0\u4ea4\u200b\u7684\u200b\u4ee3\u7801\u200b\u540c\u6837\u200b\u9700\u8981\u200b\u901a\u8fc7\u200b\u5355\u5143\u6d4b\u8bd5\u200b</p> </li> </ul> <pre><code># \u200b\u901a\u8fc7\u200b\u5168\u91cf\u200b\u5355\u5143\u6d4b\u8bd5\u200b\npytest tests\n\n# \u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4fdd\u8bc1\u200b\u63d0\u4ea4\u200b\u7684\u200b\u4ee3\u7801\u200b\u80fd\u591f\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b\u6a21\u5757\u200b\u7684\u200b\u5355\u5143\u6d4b\u8bd5\u200b\uff0c\u200b\u4ee5\u200b runner \u200b\u4e3a\u4f8b\u200b\npytest tests/test_runner/test_runner.py\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u7531\u4e8e\u200b\u7f3a\u5c11\u200b\u4f9d\u8d56\u200b\u65e0\u6cd5\u200b\u8fd0\u884c\u200b\u4fee\u6539\u200b\u6a21\u5757\u200b\u7684\u200b\u5355\u5143\u6d4b\u8bd5\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u6307\u5f15\u200b-\u200b\u5355\u5143\u6d4b\u8bd5\u200b</p> <ul> <li>\u200b\u5982\u679c\u200b\u4fee\u6539\u200b/\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u6587\u6863\u200b\uff0c\u200b\u53c2\u8003\u200b\u6307\u5f15\u200b\u786e\u8ba4\u200b\u6587\u6863\u200b\u6e32\u67d3\u200b\u6b63\u5e38\u200b\u3002</li> </ul>"},{"location":"community/contributing/#5","title":"5. \u200b\u63a8\u9001\u200b\u4ee3\u7801\u200b\u5230\u200b\u8fdc\u7a0b","text":"<p>\u200b\u4ee3\u7801\u200b\u901a\u8fc7\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u548c\u200b pre-commit \u200b\u68c0\u67e5\u200b\u540e\u200b\uff0c\u200b\u5c06\u200b\u4ee3\u7801\u200b\u63a8\u9001\u200b\u5230\u200b\u8fdc\u7a0b\u200b\u4ed3\u5e93\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u200b\u7b2c\u4e00\u6b21\u200b\u63a8\u9001\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>git push</code> \u200b\u540e\u200b\u52a0\u4e0a\u200b <code>-u</code> \u200b\u53c2\u6570\u200b\u4ee5\u200b\u5173\u8054\u200b\u8fdc\u7a0b\u200b\u5206\u652f\u200b</p> <pre><code>git push -u origin {branch_name}\n</code></pre> <p>\u200b\u8fd9\u6837\u200b\u4e0b\u6b21\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b <code>git push</code> \u200b\u547d\u4ee4\u200b\u63a8\u9001\u200b\u4ee3\u7801\u200b\u4e86\u200b\uff0c\u200b\u800c\u200b\u65e0\u9700\u200b\u6307\u5b9a\u200b\u5206\u652f\u200b\u548c\u200b\u8fdc\u7a0b\u200b\u4ed3\u5e93\u200b\u3002</p>"},{"location":"community/contributing/#6-pr","title":"6. \u200b\u63d0\u4ea4\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\uff08PR\uff09","text":"<p>(1) \u200b\u5728\u200b GitHub \u200b\u7684\u200b Pull request \u200b\u754c\u9762\u200b\u521b\u5efa\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b </p> <p>(2) \u200b\u6839\u636e\u200b\u6307\u5f15\u200b\u4fee\u6539\u200b PR \u200b\u63cf\u8ff0\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4e8e\u200b\u5176\u4ed6\u200b\u5f00\u53d1\u8005\u200b\u66f4\u597d\u200b\u5730\u200b\u7406\u89e3\u200b\u4f60\u200b\u7684\u200b\u4fee\u6539\u200b</p> <p></p> <p>\u200b\u63cf\u8ff0\u200b\u89c4\u8303\u200b\u8be6\u89c1\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u89c4\u8303\u200b</p> <p> </p> <p>\u200b\u6ce8\u610f\u4e8b\u9879\u200b</p> <p>(a) PR \u200b\u63cf\u8ff0\u200b\u5e94\u8be5\u200b\u5305\u542b\u200b\u4fee\u6539\u200b\u7406\u7531\u200b\u3001\u200b\u4fee\u6539\u200b\u5185\u5bb9\u200b\u4ee5\u53ca\u200b\u4fee\u6539\u200b\u540e\u200b\u5e26\u6765\u200b\u7684\u200b\u5f71\u54cd\u200b\uff0c\u200b\u5e76\u200b\u5173\u8054\u200b\u76f8\u5173\u200b Issue\uff08\u200b\u5177\u4f53\u200b\u65b9\u5f0f\u200b\u89c1\u200b\u6587\u6863\u200b\uff09</p> <p>(b) \u200b\u5982\u679c\u200b\u662f\u200b\u7b2c\u4e00\u6b21\u200b\u4e3a\u200b OpenMMLab \u200b\u505a\u200b\u8d21\u732e\u200b\uff0c\u200b\u9700\u8981\u200b\u7b7e\u7f72\u200b CLA</p> <p></p> <p>(c) \u200b\u68c0\u67e5\u200b\u63d0\u4ea4\u200b\u7684\u200b PR \u200b\u662f\u5426\u200b\u901a\u8fc7\u200b CI\uff08\u200b\u96c6\u6210\u200b\u6d4b\u8bd5\u200b\uff09</p> <p></p> <p>mmagic \u200b\u4f1a\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u5e73\u53f0\u200b\uff08Linux\u3001Window\u3001Mac\uff09\uff0c\u200b\u57fa\u4e8e\u200b\u4e0d\u540c\u200b\u7248\u672c\u200b\u7684\u200b Python\u3001PyTorch\u3001CUDA \u200b\u5bf9\u200b\u63d0\u4ea4\u200b\u7684\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u5355\u5143\u6d4b\u8bd5\u200b\uff0c\u200b\u4ee5\u200b\u4fdd\u8bc1\u200b\u4ee3\u7801\u200b\u7684\u200b\u6b63\u786e\u6027\u200b\uff0c\u200b\u5982\u679c\u200b\u6709\u200b\u4efb\u4f55\u200b\u4e00\u4e2a\u200b\u6ca1\u6709\u200b\u901a\u8fc7\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u200b\u70b9\u51fb\u200b\u4e0a\u56fe\u200b\u4e2d\u200b\u7684\u200b <code>Details</code> \u200b\u6765\u200b\u67e5\u770b\u200b\u5177\u4f53\u200b\u7684\u200b\u6d4b\u8bd5\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4e8e\u200b\u6211\u4eec\u200b\u4fee\u6539\u200b\u4ee3\u7801\u200b\u3002</p> <p>(3) \u200b\u5982\u679c\u200b PR \u200b\u901a\u8fc7\u200b\u4e86\u200b CI\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u7b49\u5f85\u200b\u5176\u4ed6\u200b\u5f00\u53d1\u8005\u200b\u7684\u200b review\uff0c\u200b\u5e76\u200b\u6839\u636e\u200b reviewer \u200b\u7684\u200b\u610f\u89c1\u200b\uff0c\u200b\u4fee\u6539\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5e76\u200b\u91cd\u590d\u200b 4-5 \u200b\u6b65\u9aa4\u200b\uff0c\u200b\u76f4\u5230\u200b reviewer \u200b\u540c\u610f\u200b\u5408\u5165\u200b PR\u3002</p> <p></p> <p>\u200b\u6240\u6709\u200b reviewer \u200b\u540c\u610f\u200b\u5408\u5165\u200b PR \u200b\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f1a\u200b\u5c3d\u5feb\u200b\u5c06\u200b PR \u200b\u5408\u5e76\u200b\u5230\u200b\u4e3b\u200b\u5206\u652f\u200b\u3002</p>"},{"location":"community/contributing/#7","title":"7. \u200b\u89e3\u51b3\u200b\u51b2\u7a81","text":"<p>\u200b\u968f\u7740\u200b\u65f6\u95f4\u200b\u7684\u200b\u63a8\u79fb\u200b\uff0c\u200b\u6211\u4eec\u200b\u7684\u200b\u4ee3\u7801\u200b\u5e93\u4f1a\u200b\u4e0d\u65ad\u66f4\u65b0\u200b\uff0c\u200b\u8fd9\u65f6\u5019\u200b\uff0c\u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200b PR \u200b\u4e0e\u200b\u4e3b\u200b\u5206\u652f\u200b\u5b58\u5728\u200b\u51b2\u7a81\u200b\uff0c\u200b\u4f60\u200b\u9700\u8981\u200b\u89e3\u51b3\u200b\u51b2\u7a81\u200b\uff0c\u200b\u89e3\u51b3\u200b\u51b2\u7a81\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6709\u200b\u4e24\u79cd\u200b\uff1a</p> <pre><code>git fetch --all --prune\ngit rebase upstream/main\n</code></pre> <p>\u200b\u6216\u8005\u200b</p> <pre><code>git fetch --all --prune\ngit merge upstream/main\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u975e\u5e38\u200b\u5584\u4e8e\u200b\u5904\u7406\u200b\u51b2\u7a81\u200b\uff0c\u200b\u90a3\u4e48\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b rebase \u200b\u7684\u200b\u65b9\u5f0f\u200b\u6765\u200b\u89e3\u51b3\u200b\u51b2\u7a81\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u200b\u80fd\u591f\u200b\u4fdd\u8bc1\u200b\u4f60\u200b\u7684\u200b commit log \u200b\u7684\u200b\u6574\u6d01\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u4e0d\u592a\u719f\u6089\u200b <code>rebase</code> \u200b\u7684\u200b\u4f7f\u7528\u200b\uff0c\u200b\u90a3\u4e48\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>merge</code> \u200b\u7684\u200b\u65b9\u5f0f\u200b\u6765\u200b\u89e3\u51b3\u200b\u51b2\u7a81\u200b\u3002</p>"},{"location":"community/contributing/#_3","title":"\u6307\u5f15","text":""},{"location":"community/contributing/#_4","title":"\u5355\u5143\u6d4b\u8bd5","text":"<p>\u200b\u5728\u200b\u63d0\u4ea4\u200b\u4fee\u590d\u200b\u4ee3\u7801\u200b\u9519\u8bef\u200b\u6216\u200b\u65b0\u589e\u200b\u7279\u6027\u200b\u7684\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u5e94\u8be5\u200b\u5c3d\u53ef\u80fd\u200b\u7684\u200b\u8ba9\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u8986\u76d6\u200b\u6240\u6709\u200b\u63d0\u4ea4\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u8ba1\u7b97\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u8986\u76d6\u7387\u200b\u7684\u200b\u65b9\u6cd5\u200b\u5982\u4e0b\u200b</p> <pre><code>python -m coverage run -m pytest /path/to/test_file\npython -m coverage html\n# check file in htmlcov/index.html\n</code></pre>"},{"location":"community/contributing/#_5","title":"\u6587\u6863\u200b\u6e32\u67d3","text":"<p>\u200b\u5728\u200b\u63d0\u4ea4\u200b\u4fee\u590d\u200b\u4ee3\u7801\u200b\u9519\u8bef\u200b\u6216\u200b\u65b0\u589e\u200b\u7279\u6027\u200b\u7684\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u65f6\u200b\uff0c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u9700\u8981\u200b\u4fee\u6539\u200b/\u200b\u65b0\u589e\u200b\u6a21\u5757\u200b\u7684\u200b docstring\u3002\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u786e\u8ba4\u200b\u6e32\u67d3\u200b\u540e\u200b\u7684\u200b\u6587\u6863\u200b\u6837\u5f0f\u200b\u662f\u200b\u6b63\u786e\u200b\u7684\u200b\u3002 \u200b\u672c\u5730\u200b\u751f\u6210\u200b\u6e32\u67d3\u200b\u540e\u200b\u7684\u200b\u6587\u6863\u200b\u7684\u200b\u65b9\u6cd5\u200b\u5982\u4e0b\u200b</p> <pre><code>pip install -r requirements/docs.txt\ncd docs/zh_cn/\n# or docs/en\nmake html\n# check file in ./docs/zh_cn/_build/html/index.html\n</code></pre>"},{"location":"community/contributing/#_6","title":"\u4ee3\u7801\u200b\u98ce\u683c","text":""},{"location":"community/contributing/#python","title":"Python","text":"<p>PEP8 \u200b\u4f5c\u4e3a\u200b OpenMMLab \u200b\u7b97\u6cd5\u200b\u5e93\u200b\u9996\u9009\u200b\u7684\u200b\u4ee3\u7801\u200b\u89c4\u8303\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u5de5\u5177\u200b\u68c0\u67e5\u548c\u200b\u683c\u5f0f\u5316\u200b\u4ee3\u7801\u200b</p> <ul> <li>flake8: Python \u200b\u5b98\u65b9\u200b\u53d1\u5e03\u200b\u7684\u200b\u4ee3\u7801\u200b\u89c4\u8303\u200b\u68c0\u67e5\u200b\u5de5\u5177\u200b\uff0c\u200b\u662f\u200b\u591a\u4e2a\u200b\u68c0\u67e5\u200b\u5de5\u5177\u200b\u7684\u200b\u5c01\u88c5\u200b</li> <li>isort: \u200b\u81ea\u52a8\u200b\u8c03\u6574\u200b\u6a21\u5757\u200b\u5bfc\u5165\u200b\u987a\u5e8f\u200b\u7684\u200b\u5de5\u5177\u200b</li> <li>yapf: Google \u200b\u53d1\u5e03\u200b\u7684\u200b\u4ee3\u7801\u200b\u89c4\u8303\u200b\u68c0\u67e5\u200b\u5de5\u5177\u200b</li> <li>codespell: \u200b\u68c0\u67e5\u200b\u5355\u8bcd\u200b\u62fc\u5199\u200b\u662f\u5426\u200b\u6709\u8bef\u200b</li> <li>mdformat: \u200b\u68c0\u67e5\u200b markdown \u200b\u6587\u4ef6\u200b\u7684\u200b\u5de5\u5177\u200b</li> <li>docformatter: \u200b\u683c\u5f0f\u5316\u200b docstring \u200b\u7684\u200b\u5de5\u5177\u200b</li> </ul> <p>yapf \u200b\u548c\u200b isort \u200b\u7684\u200b\u914d\u7f6e\u200b\u53ef\u4ee5\u200b\u5728\u200b setup.cfg \u200b\u627e\u5230\u200b</p> <p>\u200b\u901a\u8fc7\u200b\u914d\u7f6e\u200b pre-commit hook \uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b\u63d0\u4ea4\u200b\u4ee3\u7801\u200b\u65f6\u200b\u81ea\u52a8\u200b\u68c0\u67e5\u548c\u200b\u683c\u5f0f\u5316\u200b <code>flake8</code>\u3001<code>yapf</code>\u3001<code>isort</code>\u3001<code>trailing whitespaces</code>\u3001<code>markdown files</code>\uff0c\u200b\u4fee\u590d\u200b <code>end-of-files</code>\u3001<code>double-quoted-strings</code>\u3001<code>python-encoding-pragma</code>\u3001<code>mixed-line-ending</code>\uff0c\u200b\u8c03\u6574\u200b <code>requirments.txt</code> \u200b\u7684\u200b\u5305\u200b\u987a\u5e8f\u200b\u3002 pre-commit \u200b\u94a9\u5b50\u200b\u7684\u200b\u914d\u7f6e\u200b\u53ef\u4ee5\u200b\u5728\u200b .pre-commit-config \u200b\u627e\u5230\u200b\u3002</p> <p>pre-commit \u200b\u5177\u4f53\u200b\u7684\u200b\u5b89\u88c5\u200b\u4f7f\u7528\u200b\u65b9\u5f0f\u200b\u89c1\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u3002</p> <p>\u200b\u66f4\u200b\u5177\u4f53\u200b\u7684\u200b\u89c4\u8303\u200b\u8bf7\u200b\u53c2\u8003\u200b OpenMMLab \u200b\u4ee3\u7801\u200b\u89c4\u8303\u200b\u3002</p>"},{"location":"community/contributing/#c-and-cuda","title":"C++ and CUDA","text":"<p>C++ \u200b\u548c\u200b CUDA \u200b\u7684\u200b\u4ee3\u7801\u200b\u89c4\u8303\u200b\u9075\u4ece\u200b Google C++ Style Guide</p>"},{"location":"community/contributing/#_7","title":"\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\u89c4\u8303","text":"<ol> <li> <p>\u200b\u4f7f\u7528\u200b pre-commit hook\uff0c\u200b\u5c3d\u91cf\u51cf\u5c11\u200b\u4ee3\u7801\u200b\u98ce\u683c\u200b\u76f8\u5173\u200b\u95ee\u9898\u200b</p> </li> <li> <p>\u200b\u4e00\u4e2a\u200b<code>\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b</code>\u200b\u5bf9\u5e94\u200b\u4e00\u4e2a\u200b\u77ed\u671f\u200b\u5206\u652f\u200b</p> </li> <li> <p>\u200b\u7c92\u5ea6\u200b\u8981\u7ec6\u200b\uff0c\u200b\u4e00\u4e2a\u200b<code>\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b</code>\u200b\u53ea\u200b\u505a\u200b\u4e00\u4ef6\u200b\u4e8b\u60c5\u200b\uff0c\u200b\u907f\u514d\u200b\u8d85\u5927\u200b\u7684\u200b<code>\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b</code></p> </li> <li> <p>Bad\uff1a\u200b\u5b9e\u73b0\u200b Faster R-CNN</p> </li> <li>Acceptable\uff1a\u200b\u7ed9\u200b Faster R-CNN \u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b box head</li> <li> <p>Good\uff1a\u200b\u7ed9\u200b box head \u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u6765\u200b\u652f\u6301\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b conv \u200b\u5c42\u6570\u200b</p> </li> <li> <p>\u200b\u6bcf\u6b21\u200b Commit \u200b\u65f6\u200b\u9700\u8981\u200b\u63d0\u4f9b\u200b\u6e05\u6670\u200b\u4e14\u200b\u6709\u200b\u610f\u4e49\u200b commit \u200b\u4fe1\u606f\u200b</p> </li> <li> <p>\u200b\u63d0\u4f9b\u200b\u6e05\u6670\u200b\u4e14\u200b\u6709\u200b\u610f\u4e49\u200b\u7684\u200b<code>\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b</code>\u200b\u63cf\u8ff0\u200b</p> </li> <li> <p>\u200b\u6807\u9898\u200b\u5199\u200b\u660e\u767d\u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b\uff0c\u200b\u4e00\u822c\u200b\u683c\u5f0f\u200b:[Prefix] Short description of the pull request (Suffix)</p> </li> <li>prefix: \u200b\u65b0\u589e\u200b\u529f\u80fd\u200b [Feature], \u200b\u4fee\u200b bug [Fix], \u200b\u6587\u6863\u200b\u76f8\u5173\u200b [Docs], \u200b\u5f00\u53d1\u200b\u4e2d\u200b [WIP] (\u200b\u6682\u65f6\u200b\u4e0d\u4f1a\u200b\u88ab\u200breview)</li> <li>\u200b\u63cf\u8ff0\u200b\u91cc\u200b\u4ecb\u7ecd\u200b<code>\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b</code>\u200b\u7684\u200b\u4e3b\u8981\u200b\u4fee\u6539\u200b\u5185\u5bb9\u200b\uff0c\u200b\u7ed3\u679c\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5bf9\u200b\u5176\u4ed6\u200b\u90e8\u5206\u200b\u7684\u200b\u5f71\u54cd\u200b, \u200b\u53c2\u8003\u200b<code>\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b</code>\u200b\u6a21\u677f\u200b</li> <li> <p>\u200b\u5173\u8054\u200b\u76f8\u5173\u200b\u7684\u200b<code>\u200b\u8bae\u9898\u200b</code> (issue) \u200b\u548c\u200b\u5176\u4ed6\u200b<code>\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b</code></p> </li> <li> <p>\u200b\u5982\u679c\u200b\u5f15\u5165\u200b\u4e86\u200b\u5176\u4ed6\u200b\u4e09\u65b9\u200b\u5e93\u200b\uff0c\u200b\u6216\u200b\u501f\u9274\u200b\u4e86\u200b\u4e09\u65b9\u200b\u5e93\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u8bf7\u200b\u786e\u8ba4\u200b\u4ed6\u4eec\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\u548c\u200b mmagic \u200b\u517c\u5bb9\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u501f\u9274\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e0a\u200b\u8865\u5145\u200b <code>This code is inspired from http://</code></p> </li> </ol>"},{"location":"community/contributing/#_8","title":"\u4ee3\u7801\u200b\u89c4\u8303","text":""},{"location":"community/contributing/#_9","title":"\u4ee3\u7801\u200b\u89c4\u8303\u200b\u6807\u51c6","text":""},{"location":"community/contributing/#pep-8-python","title":"PEP 8 \u2014\u2014 Python \u200b\u5b98\u65b9\u200b\u4ee3\u7801\u200b\u89c4\u8303","text":"<p>Python \u200b\u5b98\u65b9\u200b\u7684\u200b\u4ee3\u7801\u200b\u98ce\u683c\u200b\u6307\u5357\u200b\uff0c\u200b\u5305\u542b\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u51e0\u4e2a\u200b\u65b9\u9762\u200b\u7684\u200b\u5185\u5bb9\u200b\uff1a</p> <ul> <li> <p>\u200b\u4ee3\u7801\u200b\u5e03\u5c40\u200b\uff0c\u200b\u4ecb\u7ecd\u200b\u4e86\u200b Python \u200b\u4e2d\u200b\u7a7a\u884c\u200b\u3001\u200b\u65ad\u884c\u200b\u4ee5\u53ca\u200b\u5bfc\u5165\u200b\u76f8\u5173\u200b\u7684\u200b\u4ee3\u7801\u200b\u98ce\u683c\u200b\u89c4\u8303\u200b\u3002\u200b\u6bd4\u5982\u200b\u4e00\u4e2a\u200b\u5e38\u89c1\u200b\u7684\u200b\u95ee\u9898\u200b\uff1a\u200b\u5f53\u200b\u6211\u200b\u7684\u200b\u4ee3\u7801\u200b\u8f83\u957f\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u5728\u200b\u4e00\u884c\u200b\u5199\u4e0b\u200b\u65f6\u200b\uff0c\u200b\u4f55\u5904\u200b\u53ef\u4ee5\u200b\u65ad\u884c\u200b\uff1f</p> </li> <li> <p>\u200b\u8868\u8fbe\u5f0f\u200b\uff0c\u200b\u4ecb\u7ecd\u200b\u4e86\u200b Python \u200b\u4e2d\u200b\u8868\u8fbe\u5f0f\u200b\u7a7a\u683c\u200b\u76f8\u5173\u200b\u7684\u200b\u4e00\u4e9b\u200b\u98ce\u683c\u200b\u89c4\u8303\u200b\u3002</p> </li> <li> <p>\u200b\u5c3e\u968f\u200b\u9017\u53f7\u200b\u76f8\u5173\u200b\u7684\u200b\u89c4\u8303\u200b\u3002\u200b\u5f53\u200b\u5217\u8868\u200b\u8f83\u957f\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u4e00\u884c\u200b\u5199\u4e0b\u200b\u800c\u200b\u5199\u6210\u200b\u5982\u4e0b\u200b\u9010\u884c\u200b\u5217\u8868\u200b\u65f6\u200b\uff0c\u200b\u63a8\u8350\u200b\u5728\u200b\u672b\u9879\u200b\u540e\u52a0\u200b\u9017\u53f7\u200b\uff0c\u200b\u4ece\u800c\u200b\u4fbf\u4e8e\u200b\u8ffd\u52a0\u200b\u9009\u9879\u200b\u3001\u200b\u7248\u672c\u63a7\u5236\u200b\u7b49\u200b\u3002</p> </li> </ul> <pre><code># Correct:\nFILES = ['setup.cfg', 'tox.ini']\n# Correct:\nFILES = [\n    'setup.cfg',\n    'tox.ini',\n]\n# Wrong:\nFILES = ['setup.cfg', 'tox.ini',]\n# Wrong:\nFILES = [\n    'setup.cfg',\n    'tox.ini'\n]\n</code></pre> <ul> <li>\u200b\u547d\u540d\u200b\u76f8\u5173\u200b\u89c4\u8303\u200b\u3001\u200b\u6ce8\u91ca\u200b\u76f8\u5173\u200b\u89c4\u8303\u200b\u3001\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\u76f8\u5173\u200b\u89c4\u8303\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u540e\u7eed\u200b\u7ae0\u8282\u200b\u4e2d\u200b\u505a\u200b\u8be6\u7ec6\u200b\u4ecb\u7ecd\u200b\u3002</li> </ul> <p>\"A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important.\" PEP 8 -- Style Guide for Python Code</p> <p>:::{note} PEP 8 \u200b\u7684\u200b\u4ee3\u7801\u200b\u89c4\u8303\u200b\u5e76\u200b\u4e0d\u662f\u200b\u7edd\u5bf9\u200b\u7684\u200b\uff0c\u200b\u9879\u76ee\u200b\u5185\u200b\u7684\u200b\u4e00\u81f4\u6027\u200b\u8981\u200b\u4f18\u5148\u200b\u4e8e\u200b PEP 8 \u200b\u7684\u200b\u89c4\u8303\u200b\u3002OpenMMLab \u200b\u5404\u4e2a\u200b\u9879\u76ee\u200b\u90fd\u200b\u5728\u200b setup.cfg \u200b\u8bbe\u5b9a\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u4ee3\u7801\u200b\u89c4\u8303\u200b\u7684\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u8bf7\u200b\u9075\u7167\u200b\u8fd9\u4e9b\u200b\u8bbe\u7f6e\u200b\u3002\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u662f\u200b\u5728\u200b PEP 8 \u200b\u4e2d\u6709\u200b\u5982\u4e0b\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\uff1a</p> <pre><code># Correct:\nhypot2 = x*x + y*y\n# Wrong:\nhypot2 = x * x + y * y\n</code></pre> <p>\u200b\u8fd9\u4e00\u200b\u89c4\u8303\u200b\u662f\u200b\u4e3a\u4e86\u200b\u6307\u793a\u200b\u4e0d\u540c\u200b\u4f18\u5148\u7ea7\u200b\uff0c\u200b\u4f46\u200b OpenMMLab \u200b\u7684\u200b\u8bbe\u7f6e\u200b\u4e2d\u200b\u901a\u5e38\u200b\u6ca1\u6709\u200b\u542f\u7528\u200b yapf \u200b\u7684\u200b <code>ARITHMETIC_PRECEDENCE_INDICATION</code> \u200b\u9009\u9879\u200b\uff0c\u200b\u56e0\u800c\u200b\u683c\u5f0f\u200b\u89c4\u8303\u200b\u5de5\u5177\u200b\u4e0d\u4f1a\u200b\u6309\u7167\u200b\u63a8\u8350\u200b\u6837\u5f0f\u200b\u683c\u5f0f\u5316\u200b\uff0c\u200b\u4ee5\u200b\u8bbe\u7f6e\u200b\u4e3a\u51c6\u200b\u3002 :::</p>"},{"location":"community/contributing/#google","title":"Google \u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\u98ce\u683c\u200b\u6307\u5357","text":"<p>Google \u200b\u4f7f\u7528\u200b\u7684\u200b\u7f16\u7a0b\u200b\u98ce\u683c\u200b\u6307\u5357\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e86\u200b Python \u200b\u76f8\u5173\u200b\u7684\u200b\u7ae0\u8282\u200b\u3002\u200b\u76f8\u8f83\u200b\u4e8e\u200b PEP 8\uff0c\u200b\u8be5\u200b\u6307\u5357\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u66f4\u4e3a\u200b\u8be6\u5c3d\u200b\u7684\u200b\u4ee3\u7801\u200b\u6307\u5357\u200b\u3002\u200b\u8be5\u200b\u6307\u5357\u200b\u5305\u62ec\u200b\u4e86\u200b\u8bed\u8a00\u200b\u89c4\u8303\u200b\u548c\u200b\u98ce\u683c\u200b\u89c4\u8303\u200b\u4e24\u4e2a\u200b\u90e8\u5206\u200b\u3002</p> <p>\u200b\u5176\u4e2d\u200b\uff0c\u200b\u8bed\u8a00\u200b\u89c4\u8303\u200b\u5bf9\u200b Python \u200b\u4e2d\u200b\u5f88\u591a\u200b\u8bed\u8a00\u200b\u7279\u6027\u200b\u8fdb\u884c\u200b\u4e86\u200b\u4f18\u7f3a\u70b9\u200b\u7684\u200b\u5206\u6790\u200b\uff0c\u200b\u5e76\u200b\u7ed9\u51fa\u200b\u4e86\u200b\u4f7f\u7528\u200b\u6307\u5bfc\u200b\u610f\u89c1\u200b\uff0c\u200b\u5982\u200b\u5f02\u5e38\u200b\u3001Lambda \u200b\u8868\u8fbe\u5f0f\u200b\u3001\u200b\u5217\u8868\u200b\u63a8\u5bfc\u200b\u5f0f\u200b\u3001metaclass \u200b\u7b49\u200b\u3002</p> <p>\u200b\u98ce\u683c\u200b\u89c4\u8303\u200b\u7684\u200b\u5185\u5bb9\u200b\u4e0e\u200b PEP 8 \u200b\u8f83\u4e3a\u200b\u63a5\u8fd1\u200b\uff0c\u200b\u5927\u90e8\u5206\u200b\u7ea6\u5b9a\u200b\u5efa\u7acb\u200b\u5728\u200b PEP 8 \u200b\u7684\u200b\u57fa\u7840\u200b\u4e0a\u200b\uff0c\u200b\u4e5f\u200b\u6709\u200b\u4e00\u4e9b\u200b\u66f4\u4e3a\u200b\u8be6\u7ec6\u200b\u7684\u200b\u7ea6\u5b9a\u200b\uff0c\u200b\u5982\u200b\u51fd\u6570\u200b\u957f\u5ea6\u200b\u3001TODO \u200b\u6ce8\u91ca\u200b\u3001\u200b\u6587\u4ef6\u200b\u4e0e\u200b socket \u200b\u5bf9\u8c61\u200b\u7684\u200b\u8bbf\u95ee\u200b\u7b49\u200b\u3002</p> <p>\u200b\u63a8\u8350\u200b\u5c06\u200b\u8be5\u200b\u6307\u5357\u200b\u4f5c\u4e3a\u200b\u53c2\u8003\u200b\u8fdb\u884c\u200b\u5f00\u53d1\u200b\uff0c\u200b\u4f46\u200b\u4e0d\u5fc5\u200b\u4e25\u683c\u200b\u9075\u7167\u200b\uff0c\u200b\u4e00\u6765\u200b\u8be5\u200b\u6307\u5357\u200b\u5b58\u5728\u200b\u4e00\u4e9b\u200b Python 2 \u200b\u517c\u5bb9\u200b\u9700\u6c42\u200b\uff0c\u200b\u4f8b\u5982\u200b\u6307\u5357\u200b\u4e2d\u200b\u8981\u6c42\u200b\u6240\u6709\u200b\u65e0\u200b\u57fa\u7c7b\u200b\u7684\u200b\u7c7b\u200b\u5e94\u5f53\u200b\u663e\u5f0f\u200b\u5730\u200b\u7ee7\u627f\u200b Object, \u200b\u800c\u200b\u5728\u200b\u4ec5\u200b\u4f7f\u7528\u200b Python 3 \u200b\u7684\u200b\u73af\u5883\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u4e00\u200b\u8981\u6c42\u200b\u662f\u200b\u4e0d\u5fc5\u8981\u200b\u7684\u200b\uff0c\u200b\u4f9d\u672c\u200b\u9879\u76ee\u200b\u4e2d\u200b\u7684\u200b\u60ef\u4f8b\u200b\u5373\u53ef\u200b\u3002\u200b\u4e8c\u6765\u200b OpenMMLab \u200b\u7684\u200b\u9879\u76ee\u200b\u4f5c\u4e3a\u200b\u6846\u67b6\u200b\u7ea7\u200b\u7684\u200b\u5f00\u6e90\u200b\u8f6f\u4ef6\u200b\uff0c\u200b\u4e0d\u5fc5\u200b\u5bf9\u200b\u4e00\u4e9b\u200b\u9ad8\u7ea7\u200b\u6280\u5de7\u200b\u8fc7\u4e8e\u200b\u907f\u8bb3\u200b\uff0c\u200b\u5c24\u5176\u200b\u662f\u200b MMCV\u3002\u200b\u4f46\u200b\u5c1d\u8bd5\u200b\u4f7f\u7528\u200b\u8fd9\u4e9b\u200b\u6280\u5de7\u200b\u524d\u200b\u5e94\u5f53\u200b\u8ba4\u771f\u200b\u8003\u8651\u200b\u662f\u5426\u200b\u771f\u7684\u200b\u6709\u200b\u5fc5\u8981\u200b\uff0c\u200b\u5e76\u200b\u5bfb\u6c42\u200b\u5176\u4ed6\u200b\u5f00\u53d1\u4eba\u5458\u200b\u7684\u200b\u5e7f\u6cdb\u200b\u8bc4\u4f30\u200b\u3002</p> <p>\u200b\u53e6\u5916\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u7684\u200b\u4e00\u5904\u200b\u89c4\u8303\u200b\u662f\u200b\u5173\u4e8e\u200b\u5305\u200b\u7684\u200b\u5bfc\u5165\u200b\uff0c\u200b\u5728\u200b\u8be5\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u8981\u6c42\u200b\u5bfc\u5165\u200b\u672c\u5730\u200b\u5305\u65f6\u200b\u5fc5\u987b\u200b\u4f7f\u7528\u200b\u8def\u5f84\u200b\u5168\u79f0\u200b\uff0c\u200b\u4e14\u200b\u5bfc\u5165\u200b\u7684\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u6a21\u5757\u200b\u90fd\u200b\u5e94\u5f53\u200b\u5355\u72ec\u200b\u6210\u884c\u200b\uff0c\u200b\u901a\u5e38\u200b\u8fd9\u662f\u200b\u4e0d\u5fc5\u8981\u200b\u7684\u200b\uff0c\u200b\u800c\u4e14\u200b\u4e5f\u200b\u4e0d\u200b\u7b26\u5408\u200b\u76ee\u524d\u200b\u9879\u76ee\u200b\u7684\u200b\u5f00\u53d1\u200b\u60ef\u4f8b\u200b\uff0c\u200b\u6b64\u5904\u200b\u8fdb\u884c\u200b\u5982\u4e0b\u200b\u7ea6\u5b9a\u200b\uff1a</p> <pre><code># Correct\nfrom mmagic.cnn.bricks import (Conv2d, build_norm_layer, DropPath, MaxPool2d,\n                             Linear)\nfrom ..utils import ext_loader\n\n# Wrong\nfrom mmagic.cnn.bricks import Conv2d, build_norm_layer, DropPath, MaxPool2d, \\\n                            Linear  # \u200b\u4f7f\u7528\u200b\u62ec\u53f7\u200b\u8fdb\u884c\u200b\u8fde\u63a5\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u53cd\u200b\u659c\u6760\u200b\nfrom ...utils import is_str  # \u200b\u6700\u200b\u591a\u200b\u5411\u4e0a\u200b\u56de\u6eaf\u200b\u4e00\u5c42\u200b\uff0c\u200b\u8fc7\u591a\u200b\u7684\u200b\u56de\u6eaf\u200b\u5bb9\u6613\u200b\u5bfc\u81f4\u200b\u7ed3\u6784\u200b\u6df7\u4e71\u200b\n</code></pre> <p>OpenMMLab \u200b\u9879\u76ee\u200b\u4f7f\u7528\u200b pre-commit \u200b\u5de5\u5177\u200b\u81ea\u52a8\u200b\u683c\u5f0f\u5316\u200b\u4ee3\u7801\u200b\uff0c\u200b\u8be6\u60c5\u200b\u89c1\u200b\u8d21\u732e\u200b\u4ee3\u7801\u200b\u3002</p>"},{"location":"community/contributing/#_10","title":"\u547d\u540d\u200b\u89c4\u8303","text":""},{"location":"community/contributing/#_11","title":"\u547d\u540d\u200b\u89c4\u8303\u200b\u7684\u200b\u91cd\u8981\u6027","text":"<p>\u200b\u4f18\u79c0\u200b\u7684\u200b\u547d\u540d\u200b\u662f\u200b\u826f\u597d\u200b\u4ee3\u7801\u200b\u53ef\u8bfb\u200b\u7684\u200b\u57fa\u7840\u200b\u3002\u200b\u57fa\u7840\u200b\u7684\u200b\u547d\u540d\u200b\u89c4\u8303\u200b\u5bf9\u200b\u5404\u7c7b\u200b\u53d8\u91cf\u200b\u7684\u200b\u547d\u540d\u200b\u505a\u200b\u4e86\u200b\u8981\u6c42\u200b\uff0c\u200b\u4f7f\u200b\u8bfb\u8005\u200b\u53ef\u4ee5\u200b\u65b9\u4fbf\u200b\u5730\u200b\u6839\u636e\u200b\u4ee3\u7801\u200b\u540d\u200b\u4e86\u89e3\u200b\u53d8\u91cf\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7c7b\u200b / \u200b\u5c40\u90e8\u53d8\u91cf\u200b / \u200b\u5168\u5c40\u53d8\u91cf\u200b\u7b49\u200b\u3002\u200b\u800c\u200b\u4f18\u79c0\u200b\u7684\u200b\u547d\u540d\u200b\u5219\u200b\u9700\u8981\u200b\u4ee3\u7801\u200b\u4f5c\u8005\u200b\u5bf9\u4e8e\u200b\u53d8\u91cf\u200b\u7684\u200b\u529f\u80fd\u200b\u6709\u200b\u6e05\u6670\u200b\u7684\u200b\u8ba4\u8bc6\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u826f\u597d\u200b\u7684\u200b\u8868\u8fbe\u80fd\u529b\u200b\uff0c\u200b\u4ece\u800c\u200b\u4f7f\u200b\u8bfb\u8005\u200b\u6839\u636e\u200b\u540d\u79f0\u200b\u5c31\u200b\u80fd\u200b\u4e86\u89e3\u200b\u5176\u200b\u542b\u4e49\u200b\uff0c\u200b\u751a\u81f3\u200b\u5e2e\u52a9\u200b\u4e86\u89e3\u200b\u8be5\u6bb5\u200b\u4ee3\u7801\u200b\u7684\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"community/contributing/#_12","title":"\u57fa\u7840\u200b\u547d\u540d\u200b\u89c4\u8303","text":"\u7c7b\u578b\u200b \u200b\u516c\u6709\u200b \u200b\u79c1\u6709\u200b \u200b\u6a21\u5757\u200b lower_with_under _lower_with_under \u200b\u5305\u200b lower_with_under \u200b\u7c7b\u200b CapWords _CapWords \u200b\u5f02\u5e38\u200b CapWordsError \u200b\u51fd\u6570\u200b\uff08\u200b\u65b9\u6cd5\u200b\uff09 lower_with_under _lower_with_under \u200b\u51fd\u6570\u200b / \u200b\u65b9\u6cd5\u200b\u53c2\u6570\u200b lower_with_under \u200b\u5168\u5c40\u200b / \u200b\u7c7b\u5185\u200b\u5e38\u91cf\u200b CAPS_WITH_UNDER _CAPS_WITH_UNDER \u200b\u5168\u5c40\u200b / \u200b\u7c7b\u5185\u200b\u53d8\u91cf\u200b lower_with_under _lower_with_under \u200b\u53d8\u91cf\u200b lower_with_under _lower_with_under \u200b\u5c40\u90e8\u53d8\u91cf\u200b lower_with_under <p>\u200b\u6ce8\u610f\u200b\uff1a</p> <ul> <li>\u200b\u5c3d\u91cf\u907f\u514d\u200b\u53d8\u91cf\u540d\u200b\u4e0e\u200b\u4fdd\u7559\u5b57\u200b\u51b2\u7a81\u200b\uff0c\u200b\u7279\u6b8a\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5982\u200b\u4e0d\u53ef\u907f\u514d\u200b\uff0c\u200b\u53ef\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u540e\u7f6e\u200b\u4e0b\u5212\u7ebf\u200b\uff0c\u200b\u5982\u200b class_</li> <li>\u200b\u5c3d\u91cf\u200b\u4e0d\u8981\u200b\u4f7f\u7528\u200b\u8fc7\u4e8e\u200b\u7b80\u5355\u200b\u7684\u200b\u547d\u540d\u200b\uff0c\u200b\u9664\u4e86\u200b\u7ea6\u5b9a\u4fd7\u6210\u200b\u7684\u200b\u5faa\u73af\u200b\u53d8\u91cf\u200b i\uff0c\u200b\u6587\u4ef6\u200b\u53d8\u91cf\u200b f\uff0c\u200b\u9519\u8bef\u200b\u53d8\u91cf\u200b e \u200b\u7b49\u200b\u3002</li> <li>\u200b\u4e0d\u4f1a\u200b\u88ab\u200b\u7528\u5230\u200b\u7684\u200b\u53d8\u91cf\u200b\u53ef\u4ee5\u200b\u547d\u540d\u200b\u4e3a\u200b _\uff0c\u200b\u903b\u8f91\u200b\u68c0\u67e5\u200b\u5668\u4f1a\u200b\u5c06\u200b\u5176\u200b\u5ffd\u7565\u200b\u3002</li> </ul>"},{"location":"community/contributing/#_13","title":"\u547d\u540d\u200b\u6280\u5de7","text":"<p>\u200b\u826f\u597d\u200b\u7684\u200b\u53d8\u91cf\u200b\u547d\u540d\u200b\u9700\u8981\u200b\u4fdd\u8bc1\u200b\u4e09\u70b9\u200b\uff1a</p> <ol> <li>\u200b\u542b\u4e49\u200b\u51c6\u786e\u200b\uff0c\u200b\u6ca1\u6709\u200b\u6b67\u4e49\u200b</li> <li>\u200b\u957f\u77ed\u200b\u9002\u4e2d\u200b</li> <li>\u200b\u524d\u540e\u200b\u7edf\u4e00\u200b</li> </ol> <pre><code># Wrong\nclass Masks(metaclass=ABCMeta):  # \u200b\u547d\u540d\u200b\u65e0\u6cd5\u200b\u8868\u73b0\u200b\u57fa\u7c7b\u200b\uff1bInstance or Semantic\uff1f\n    pass\n\n# Correct\nclass BaseInstanceMasks(metaclass=ABCMeta):\n    pass\n\n# Wrong\uff0c\u200b\u4e0d\u540c\u200b\u5730\u65b9\u200b\u542b\u4e49\u200b\u76f8\u540c\u200b\u7684\u200b\u53d8\u91cf\u200b\u5c3d\u91cf\u200b\u7528\u200b\u7edf\u4e00\u200b\u7684\u200b\u547d\u540d\u200b\ndef __init__(self, inplanes, planes):\n    pass\n\ndef __init__(self, in_channels, out_channels):\n    pass\n</code></pre> <p>\u200b\u5e38\u89c1\u200b\u7684\u200b\u51fd\u6570\u200b\u547d\u540d\u200b\u65b9\u6cd5\u200b\uff1a</p> <ul> <li>\u200b\u52a8\u5bbe\u200b\u547d\u540d\u200b\u6cd5\u200b\uff1acrop_img, init_weights</li> <li>\u200b\u52a8\u5bbe\u200b\u5012\u7f6e\u200b\u547d\u540d\u200b\u6cd5\u200b\uff1aimread, bbox_flip</li> </ul> <p>\u200b\u6ce8\u610f\u200b\u51fd\u6570\u200b\u547d\u540d\u200b\u4e0e\u200b\u53c2\u6570\u200b\u7684\u200b\u987a\u5e8f\u200b\uff0c\u200b\u4fdd\u8bc1\u200b\u4e3b\u8bed\u200b\u5728\u200b\u524d\u200b\uff0c\u200b\u7b26\u5408\u200b\u8bed\u8a00\u200b\u4e60\u60ef\u200b\uff1a</p> <ul> <li>check_keys_exist(key, container)</li> <li>check_keys_contain(container, key)</li> </ul> <p>\u200b\u6ce8\u610f\u200b\u907f\u514d\u200b\u975e\u5e38\u89c4\u200b\u6216\u200b\u7edf\u4e00\u200b\u7ea6\u5b9a\u200b\u7684\u200b\u7f29\u5199\u200b\uff0c\u200b\u5982\u200b nb -&gt; num_blocks\uff0cin_nc -&gt; in_channels</p>"},{"location":"community/contributing/#docstring","title":"docstring \u200b\u89c4\u8303","text":""},{"location":"community/contributing/#docstring_1","title":"\u4e3a\u4ec0\u4e48\u200b\u8981\u200b\u5199\u200b docstring","text":"<p>docstring \u200b\u662f\u200b\u5bf9\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u3001\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u529f\u80fd\u200b\u4e0e\u200b API \u200b\u63a5\u53e3\u200b\u7684\u200b\u8be6\u7ec6\u63cf\u8ff0\u200b\uff0c\u200b\u6709\u200b\u4e24\u4e2a\u200b\u529f\u80fd\u200b\uff0c\u200b\u4e00\u662f\u200b\u5e2e\u52a9\u200b\u5176\u4ed6\u200b\u5f00\u53d1\u8005\u200b\u4e86\u89e3\u200b\u4ee3\u7801\u200b\u529f\u80fd\u200b\uff0c\u200b\u65b9\u4fbf\u200b debug \u200b\u548c\u200b\u590d\u7528\u200b\u4ee3\u7801\u200b\uff1b\u200b\u4e8c\u662f\u200b\u5728\u200b Readthedocs \u200b\u6587\u6863\u200b\u4e2d\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u76f8\u5173\u200b\u7684\u200b API reference \u200b\u6587\u6863\u200b\uff0c\u200b\u5e2e\u52a9\u200b\u4e0d\u200b\u4e86\u89e3\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u793e\u533a\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b\u76f8\u5173\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"community/contributing/#docstring_2","title":"\u5982\u4f55\u200b\u5199\u200b docstring","text":"<p>\u200b\u4e0e\u200b\u6ce8\u91ca\u200b\u4e0d\u540c\u200b\uff0c\u200b\u4e00\u4efd\u200b\u89c4\u8303\u200b\u7684\u200b docstring \u200b\u6709\u7740\u200b\u4e25\u683c\u200b\u7684\u200b\u683c\u5f0f\u200b\u8981\u6c42\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4e8e\u200b Python \u200b\u89e3\u91ca\u5668\u200b\u4ee5\u53ca\u200b sphinx \u200b\u8fdb\u884c\u200b\u6587\u6863\u200b\u89e3\u6790\u200b\uff0c\u200b\u8be6\u7ec6\u200b\u7684\u200b docstring \u200b\u7ea6\u5b9a\u200b\u53c2\u89c1\u200b PEP 257\u3002\u200b\u6b64\u5904\u200b\u4ee5\u200b\u4f8b\u5b50\u200b\u7684\u200b\u5f62\u5f0f\u200b\u4ecb\u7ecd\u200b\u5404\u79cd\u200b\u6587\u6863\u200b\u7684\u200b\u6807\u51c6\u200b\u683c\u5f0f\u200b\uff0c\u200b\u53c2\u8003\u200b\u683c\u5f0f\u200b\u4e3a\u200b Google \u200b\u98ce\u683c\u200b\u3002</p> <ol> <li>\u200b\u6a21\u5757\u200b\u6587\u6863\u200b</li> </ol> <p>\u200b\u4ee3\u7801\u200b\u98ce\u683c\u200b\u89c4\u8303\u200b\u63a8\u8350\u200b\u4e3a\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u6a21\u5757\u200b\uff08\u200b\u5373\u200b Python \u200b\u6587\u4ef6\u200b\uff09\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b docstring\uff0c\u200b\u4f46\u200b\u76ee\u524d\u200b OpenMMLab \u200b\u9879\u76ee\u200b\u5927\u90e8\u5206\u200b\u6ca1\u6709\u200b\u6b64\u7c7b\u200b docstring\uff0c\u200b\u56e0\u6b64\u200b\u4e0d\u200b\u505a\u200b\u786c\u6027\u200b\u8981\u6c42\u200b\u3002</p> <pre><code>\"\"\"A one line summary of the module or program, terminated by a period.\n\nLeave one blank line. The rest of this docstring should contain an\noverall description of the module or program. Optionally, it may also\ncontain a brief description of exported classes and functions and/or usage\nexamples.\n\nTypical usage example:\n\nfoo = ClassFoo()\nbar = foo.FunctionBar()\n\"\"\"\n</code></pre> <ol> <li>\u200b\u7c7b\u200b\u6587\u6863\u200b</li> </ol> <p>\u200b\u7c7b\u200b\u6587\u6863\u200b\u662f\u200b\u6211\u4eec\u200b\u6700\u200b\u5e38\u200b\u9700\u8981\u200b\u7f16\u5199\u200b\u7684\u200b\uff0c\u200b\u6b64\u5904\u200b\uff0c\u200b\u6309\u7167\u200b OpenMMLab \u200b\u7684\u200b\u60ef\u4f8b\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4e86\u200b\u4e0e\u200b Google \u200b\u98ce\u683c\u200b\u4e0d\u540c\u200b\u7684\u200b\u5199\u6cd5\u200b\u3002\u200b\u5982\u4e0b\u200b\u4f8b\u200b\u6240\u793a\u200b\uff0c\u200b\u6587\u6863\u200b\u4e2d\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b Attributes \u200b\u63cf\u8ff0\u200b\u7c7b\u200b\u5c5e\u6027\u200b\uff0c\u200b\u800c\u662f\u200b\u4f7f\u7528\u200b Args \u200b\u63cf\u8ff0\u200b init \u200b\u51fd\u6570\u200b\u7684\u200b\u53c2\u6570\u200b\u3002</p> <p>\u200b\u5728\u200b Args \u200b\u4e2d\u200b\uff0c\u200b\u9075\u7167\u200b <code>parameter (type): Description.</code> \u200b\u7684\u200b\u683c\u5f0f\u200b\uff0c\u200b\u63cf\u8ff0\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u7c7b\u578b\u200b\u548c\u200b\u529f\u80fd\u200b\u3002\u200b\u5176\u4e2d\u200b\uff0c\u200b\u591a\u79cd\u7c7b\u578b\u200b\u53ef\u200b\u4f7f\u7528\u200b <code>(float or str)</code> \u200b\u7684\u200b\u5199\u6cd5\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4e3a\u200b None \u200b\u7684\u200b\u53c2\u6570\u200b\u53ef\u4ee5\u200b\u5199\u4e3a\u200b <code>(int, optional)</code>\u3002</p> <pre><code>class BaseRunner(metaclass=ABCMeta):\n    \"\"\"The base class of Runner, a training helper for PyTorch.\n\n    All subclasses should implement the following APIs:\n\n    - ``run()``\n    - ``train()``\n    - ``val()``\n    - ``save_checkpoint()``\n\n    Args:\n        model (:obj:`torch.nn.Module`): The model to be run.\n        batch_processor (callable, optional): A callable method that process\n            a data batch. The interface of this method should be\n            ``batch_processor(model, data, train_mode) -&gt; dict``.\n            Defaults to None.\n        optimizer (dict or :obj:`torch.optim.Optimizer`, optional): It can be\n            either an optimizer (in most cases) or a dict of optimizers\n            (in models that requires more than one optimizer, e.g., GAN).\n            Defaults to None.\n        work_dir (str, optional): The working directory to save checkpoints\n            and logs. Defaults to None.\n        logger (:obj:`logging.Logger`): Logger used during training.\n             Defaults to None. (The default value is just for backward\n             compatibility)\n        meta (dict, optional): A dict records some import information such as\n            environment info and seed, which will be logged in logger hook.\n            Defaults to None.\n        max_epochs (int, optional): Total training epochs. Defaults to None.\n        max_iters (int, optional): Total training iterations. Defaults to None.\n    \"\"\"\n\n    def __init__(self,\n                 model,\n                 batch_processor=None,\n                 optimizer=None,\n                 work_dir=None,\n                 logger=None,\n                 meta=None,\n                 max_iters=None,\n                 max_epochs=None):\n        ...\n</code></pre> <p>\u200b\u53e6\u5916\u200b\uff0c\u200b\u5728\u200b\u4e00\u4e9b\u200b\u7b97\u6cd5\u200b\u5b9e\u73b0\u200b\u7684\u200b\u4e3b\u4f53\u200b\u7c7b\u4e2d\u200b\uff0c\u200b\u5efa\u8bae\u200b\u52a0\u5165\u200b\u539f\u200b\u8bba\u6587\u200b\u7684\u200b\u94fe\u63a5\u200b\uff1b\u200b\u5982\u679c\u200b\u53c2\u8003\u200b\u4e86\u200b\u5176\u4ed6\u200b\u5f00\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5219\u200b\u5e94\u200b\u52a0\u5165\u200b modified from\uff0c\u200b\u800c\u200b\u5982\u679c\u200b\u662f\u200b\u76f4\u63a5\u200b\u590d\u5236\u200b\u4e86\u200b\u5176\u4ed6\u200b\u4ee3\u7801\u200b\u5e93\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5219\u200b\u5e94\u200b\u52a0\u5165\u200b copied from \uff0c\u200b\u5e76\u200b\u6ce8\u610f\u200b\u6e90\u7801\u200b\u7684\u200b License\u3002\u200b\u5982\u200b\u6709\u200b\u5fc5\u8981\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b .. math:: \u200b\u6765\u200b\u52a0\u5165\u200b\u6570\u5b66\u516c\u5f0f\u200b</p> <pre><code># \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b\n# This func is modified from `detectron2\n# &lt;https://github.com/facebookresearch/detectron2/blob/ffff8acc35ea88ad1cb1806ab0f00b4c1c5dbfd9/detectron2/structures/masks.py#L387&gt;`_.\n\n# \u200b\u590d\u5236\u200b\u4ee3\u7801\u200b\n# This code was copied from the `ubelt\n# library&lt;https://github.com/Erotemic/ubelt&gt;`_.\n\n# \u200b\u5f15\u7528\u200b\u8bba\u6587\u200b &amp; \u200b\u6dfb\u52a0\u200b\u516c\u5f0f\u200b\nclass LabelSmoothLoss(nn.Module):\n    r\"\"\"Initializer for the label smoothed cross entropy loss.\n\n    Refers to `Rethinking the Inception Architecture for Computer Vision\n    &lt;https://arxiv.org/abs/1512.00567&gt;`_.\n\n    This decreases gap between output scores and encourages generalization.\n    Labels provided to forward can be one-hot like vectors (NxC) or class\n    indices (Nx1).\n    And this accepts linear combination of one-hot like labels from mixup or\n    cutmix except multi-label task.\n\n    Args:\n        label_smooth_val (float): The degree of label smoothing.\n        num_classes (int, optional): Number of classes. Defaults to None.\n        mode (str): Refers to notes, Options are \"original\", \"classy_vision\",\n            \"multi_label\". Defaults to \"classy_vision\".\n        reduction (str): The method used to reduce the loss.\n            Options are \"none\", \"mean\" and \"sum\". Defaults to 'mean'.\n        loss_weight (float):  Weight of the loss. Defaults to 1.0.\n\n    Note:\n        if the ``mode`` is \"original\", this will use the same label smooth\n        method as the original paper as:\n\n        .. math::\n            (1-\\epsilon)\\delta_{k, y} + \\frac{\\epsilon}{K}\n\n        where :math:`\\epsilon` is the ``label_smooth_val``, :math:`K` is\n        the ``num_classes`` and :math:`\\delta_{k,y}` is Dirac delta,\n        which equals 1 for k=y and 0 otherwise.\n\n        if the ``mode`` is \"classy_vision\", this will use the same label\n        smooth method as the `facebookresearch/ClassyVision\n        &lt;https://github.com/facebookresearch/ClassyVision/blob/main/classy_vision/losses/label_smoothing_loss.py&gt;`_ repo as:\n\n        .. math::\n            \\frac{\\delta_{k, y} + \\epsilon/K}{1+\\epsilon}\n\n        if the ``mode`` is \"multi_label\", this will accept labels from\n        multi-label task and smoothing them as:\n\n        .. math::\n            (1-2\\epsilon)\\delta_{k, y} + \\epsilon\n</code></pre> <pre><code>\u200b\u6ce8\u610f\u200b \\`\\`here\\`\\`\u3001\\`here\\`\u3001\"here\" \u200b\u4e09\u79cd\u200b\u5f15\u53f7\u200b\u529f\u80fd\u200b\u662f\u200b\u4e0d\u540c\u200b\u3002\n\n\u200b\u5728\u200b reStructured \u200b\u8bed\u6cd5\u200b\u4e2d\u200b\uff0c\\`\\`here\\`\\` \u200b\u8868\u793a\u200b\u4e00\u6bb5\u200b\u4ee3\u7801\u200b\uff1b\\`here\\` \u200b\u8868\u793a\u200b\u659c\u4f53\u200b\uff1b\"here\" \u200b\u65e0\u200b\u7279\u6b8a\u200b\u542b\u4e49\u200b\uff0c\u200b\u4e00\u822c\u200b\u53ef\u7528\u200b\u6765\u200b\u8868\u793a\u200b\u5b57\u7b26\u4e32\u200b\u3002\u200b\u5176\u4e2d\u200b \\`here\\` \u200b\u7684\u200b\u7528\u6cd5\u200b\u4e0e\u200b Markdown \u200b\u4e2d\u200b\u4e0d\u540c\u200b\uff0c\u200b\u9700\u8981\u200b\u591a\u52a0\u200b\u7559\u610f\u200b\u3002\n\u200b\u53e6\u5916\u200b\u8fd8\u6709\u200b :obj:\\`type\\` \u200b\u8fd9\u79cd\u200b\u66f4\u200b\u89c4\u8303\u200b\u7684\u200b\u8868\u793a\u200b\u7c7b\u200b\u7684\u200b\u5199\u6cd5\u200b\uff0c\u200b\u4f46\u200b\u9274\u4e8e\u200b\u957f\u5ea6\u200b\uff0c\u200b\u4e0d\u200b\u505a\u200b\u7279\u522b\u200b\u8981\u6c42\u200b\uff0c\u200b\u4e00\u822c\u200b\u4ec5\u200b\u7528\u4e8e\u200b\u8868\u793a\u200b\u975e\u5e38\u200b\u7528\u200b\u7c7b\u578b\u200b\u3002\n</code></pre> <ol> <li>\u200b\u65b9\u6cd5\u200b\uff08\u200b\u51fd\u6570\u200b\uff09\u200b\u6587\u6863\u200b</li> </ol> <p>\u200b\u51fd\u6570\u200b\u6587\u6863\u200b\u4e0e\u200b\u7c7b\u200b\u6587\u6863\u200b\u7684\u200b\u7ed3\u6784\u200b\u57fa\u672c\u4e00\u81f4\u200b\uff0c\u200b\u4f46\u200b\u9700\u8981\u200b\u52a0\u5165\u200b\u8fd4\u56de\u503c\u200b\u6587\u6863\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u8f83\u4e3a\u200b\u590d\u6742\u200b\u7684\u200b\u51fd\u6570\u200b\u548c\u200b\u7c7b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Examples \u200b\u5b57\u200b\u6bb5\u200b\u52a0\u5165\u200b\u793a\u4f8b\u200b\uff1b\u200b\u5982\u679c\u200b\u9700\u8981\u200b\u5bf9\u200b\u53c2\u6570\u200b\u52a0\u5165\u200b\u4e00\u4e9b\u200b\u8f83\u957f\u200b\u7684\u200b\u5907\u6ce8\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u52a0\u5165\u200b Note \u200b\u5b57\u200b\u6bb5\u200b\u8fdb\u884c\u200b\u8bf4\u660e\u200b\u3002</p> <p>\u200b\u5bf9\u4e8e\u200b\u4f7f\u7528\u200b\u8f83\u4e3a\u200b\u590d\u6742\u200b\u7684\u200b\u7c7b\u200b\u6216\u200b\u51fd\u6570\u200b\uff0c\u200b\u6bd4\u8d77\u200b\u770b\u200b\u5927\u6bb5\u200b\u5927\u6bb5\u200b\u7684\u200b\u8bf4\u660e\u200b\u6587\u5b57\u200b\u548c\u200b\u53c2\u6570\u200b\u6587\u6863\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u5408\u9002\u200b\u7684\u200b\u793a\u4f8b\u200b\u66f4\u80fd\u200b\u5e2e\u52a9\u200b\u7528\u6237\u200b\u8fc5\u901f\u200b\u4e86\u89e3\u200b\u5176\u200b\u7528\u6cd5\u200b\u3002\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u793a\u4f8b\u200b\u6700\u597d\u200b\u662f\u200b\u80fd\u591f\u200b\u76f4\u63a5\u200b\u5728\u200b Python \u200b\u4ea4\u4e92\u5f0f\u200b\u73af\u5883\u4e2d\u8fd0\u884c\u200b\u7684\u200b\uff0c\u200b\u5e76\u200b\u7ed9\u51fa\u200b\u4e00\u4e9b\u200b\u76f8\u5bf9\u200b\u5e94\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002\u200b\u5982\u679c\u200b\u5b58\u5728\u200b\u591a\u4e2a\u200b\u793a\u4f8b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u6ce8\u91ca\u200b\u7b80\u5355\u200b\u8bf4\u660e\u200b\u6bcf\u200b\u6bb5\u200b\u793a\u4f8b\u200b\uff0c\u200b\u4e5f\u200b\u80fd\u200b\u8d77\u5230\u200b\u5206\u9694\u200b\u4f5c\u7528\u200b\u3002</p> <pre><code>def import_modules_from_strings(imports, allow_failed_imports=False):\n    \"\"\"Import modules from the given list of strings.\n\n    Args:\n        imports (list | str | None): The given module names to be imported.\n        allow_failed_imports (bool): If True, the failed imports will return\n            None. Otherwise, an ImportError is raise. Defaults to False.\n\n    Returns:\n        List[module] | module | None: The imported modules.\n        All these three lines in docstring will be compiled into the same\n        line in readthedocs.\n\n    Examples:\n        &gt;&gt;&gt; osp, sys = import_modules_from_strings(\n        ...     ['os.path', 'sys'])\n        &gt;&gt;&gt; import os.path as osp_\n        &gt;&gt;&gt; import sys as sys_\n        &gt;&gt;&gt; assert osp == osp_\n        &gt;&gt;&gt; assert sys == sys_\n    \"\"\"\n    ...\n</code></pre> <p>\u200b\u5982\u679c\u200b\u51fd\u6570\u200b\u63a5\u53e3\u200b\u5728\u200b\u67d0\u4e2a\u200b\u7248\u672c\u200b\u53d1\u751f\u200b\u4e86\u200b\u53d8\u5316\u200b\uff0c\u200b\u9700\u8981\u200b\u5728\u200b docstring \u200b\u4e2d\u200b\u52a0\u5165\u200b\u76f8\u5173\u200b\u7684\u200b\u8bf4\u660e\u200b\uff0c\u200b\u5fc5\u8981\u200b\u65f6\u200b\u6dfb\u52a0\u200b Note \u200b\u6216\u8005\u200b Warning \u200b\u8fdb\u884c\u200b\u8bf4\u660e\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>class CheckpointHook(Hook):\n    \"\"\"Save checkpoints periodically.\n\n    Args:\n        out_dir (str, optional): The root directory to save checkpoints. If\n            not specified, ``runner.work_dir`` will be used by default. If\n            specified, the ``out_dir`` will be the concatenation of\n            ``out_dir`` and the last level directory of ``runner.work_dir``.\n            Defaults to None. `Changed in version 1.3.15.`\n        file_client_args (dict, optional): Arguments to instantiate a\n            FileClient. See :class:`mmagic.fileio.FileClient` for details.\n            Defaults to None. `New in version 1.3.15.`\n\n    Warning:\n        Before v1.3.15, the ``out_dir`` argument indicates the path where the\n        checkpoint is stored. However, in v1.3.15 and later, ``out_dir``\n        indicates the root directory and the final path to save checkpoint is\n        the concatenation of out_dir and the last level directory of\n        ``runner.work_dir``. Suppose the value of ``out_dir`` is\n        \"/path/of/A\" and the value of ``runner.work_dir`` is \"/path/of/B\",\n        then the final path will be \"/path/of/A/B\".\n</code></pre> <p>\u200b\u5982\u679c\u200b\u53c2\u6570\u200b\u6216\u200b\u8fd4\u56de\u503c\u200b\u91cc\u200b\u5e26\u6709\u200b\u9700\u8981\u200b\u5c55\u5f00\u200b\u63cf\u8ff0\u200b\u5b57\u6bb5\u200b\u7684\u200b dict\uff0c\u200b\u5219\u200b\u5e94\u8be5\u200b\u91c7\u7528\u200b\u5982\u4e0b\u200b\u683c\u5f0f\u200b\uff1a</p> <pre><code>def func(x):\n    r\"\"\"\n    Args:\n        x (None): A dict with 2 keys, ``padded_targets``, and ``targets``.\n\n            - ``targets`` (list[Tensor]): A list of tensors.\n              Each tensor has the shape of :math:`(T_i)`. Each\n              element is the index of a character.\n            - ``padded_targets`` (Tensor): A tensor of shape :math:`(N)`.\n              Each item is the length of a word.\n\n    Returns:\n        dict: A dict with 2 keys, ``padded_targets``, and ``targets``.\n\n        - ``targets`` (list[Tensor]): A list of tensors.\n          Each tensor has the shape of :math:`(T_i)`. Each\n          element is the index of a character.\n        - ``padded_targets`` (Tensor): A tensor of shape :math:`(N)`.\n          Each item is the length of a word.\n    \"\"\"\n    return x\n</code></pre> <pre><code>\u200b\u4e3a\u4e86\u200b\u751f\u6210\u200b readthedocs \u200b\u6587\u6863\u200b\uff0c\u200b\u6587\u6863\u200b\u7684\u200b\u7f16\u5199\u200b\u9700\u8981\u200b\u6309\u7167\u200b ReStructrued \u200b\u6587\u6863\u200b\u683c\u5f0f\u200b\uff0c\u200b\u5426\u5219\u200b\u4f1a\u200b\u4ea7\u751f\u200b\u6587\u6863\u200b\u6e32\u67d3\u200b\u9519\u8bef\u200b\uff0c\u200b\u5728\u200b\u63d0\u4ea4\u200b PR \u200b\u524d\u200b\uff0c\u200b\u6700\u597d\u200b\u751f\u6210\u200b\u5e76\u200b\u9884\u89c8\u200b\u4e00\u4e0b\u200b\u6587\u6863\u200b\u6548\u679c\u200b\u3002\n\u200b\u8bed\u6cd5\u200b\u89c4\u8303\u200b\u53c2\u8003\u200b\uff1a\n\n- [reStructuredText Primer - Sphinx documentation](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#)\n- [Example Google Style Python Docstrings \u2012 napoleon 0.7 documentation](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html#example-google)\n</code></pre>"},{"location":"community/contributing/#_14","title":"\u6ce8\u91ca\u200b\u89c4\u8303","text":""},{"location":"community/contributing/#_15","title":"\u4e3a\u4ec0\u4e48\u200b\u8981\u200b\u5199\u200b\u6ce8\u91ca","text":"<p>\u200b\u5bf9\u4e8e\u200b\u4e00\u4e2a\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\uff0c\u200b\u56e2\u961f\u200b\u5408\u4f5c\u200b\u4ee5\u53ca\u200b\u793e\u533a\u200b\u4e4b\u95f4\u200b\u7684\u200b\u5408\u4f5c\u200b\u662f\u200b\u5fc5\u4e0d\u53ef\u5c11\u200b\u7684\u200b\uff0c\u200b\u56e0\u800c\u200b\u5c24\u5176\u200b\u8981\u200b\u91cd\u89c6\u200b\u5408\u7406\u200b\u7684\u200b\u6ce8\u91ca\u200b\u3002\u200b\u4e0d\u5199\u200b\u6ce8\u91ca\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5f88\u200b\u6709\u200b\u53ef\u80fd\u200b\u8fc7\u200b\u51e0\u4e2a\u200b\u6708\u200b\u81ea\u5df1\u200b\u4e5f\u200b\u96be\u4ee5\u200b\u7406\u89e3\u200b\uff0c\u200b\u9020\u6210\u200b\u989d\u5916\u200b\u7684\u200b\u9605\u8bfb\u200b\u548c\u200b\u4fee\u6539\u200b\u6210\u672c\u200b\u3002</p>"},{"location":"community/contributing/#_16","title":"\u5982\u4f55\u200b\u5199\u200b\u6ce8\u91ca","text":"<p>\u200b\u6700\u200b\u9700\u8981\u200b\u5199\u200b\u6ce8\u91ca\u200b\u7684\u200b\u662f\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u90a3\u4e9b\u200b\u6280\u5de7\u6027\u200b\u7684\u200b\u90e8\u5206\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u5728\u200b\u4e0b\u6b21\u200b\u4ee3\u7801\u200b\u5ba1\u67e5\u200b\u7684\u200b\u65f6\u5019\u200b\u5fc5\u987b\u200b\u89e3\u91ca\u4e00\u4e0b\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4f60\u200b\u5e94\u8be5\u200b\u73b0\u5728\u200b\u5c31\u200b\u7ed9\u200b\u5b83\u200b\u5199\u200b\u6ce8\u91ca\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u590d\u6742\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5e94\u8be5\u200b\u5728\u200b\u5176\u200b\u64cd\u4f5c\u200b\u5f00\u59cb\u200b\u524d\u5199\u200b\u4e0a\u200b\u82e5\u5e72\u200b\u884c\u200b\u6ce8\u91ca\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u4e0d\u662f\u200b\u4e00\u76ee\u4e86\u7136\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5e94\u200b\u5728\u200b\u5176\u200b\u884c\u5c3e\u200b\u6dfb\u52a0\u200b\u6ce8\u91ca\u200b\u3002 \u2014\u2014 Google \u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\u98ce\u683c\u200b\u6307\u5357\u200b</p> <pre><code># We use a weighted dictionary search to find out where i is in\n# the array. We extrapolate position based on the largest num\n# in the array and the array size and then do binary search to\n# get the exact number.\nif i &amp; (i-1) == 0:  # True if i is 0 or a power of 2.\n</code></pre> <p>\u200b\u4e3a\u4e86\u200b\u63d0\u9ad8\u200b\u53ef\u8bfb\u6027\u200b, \u200b\u6ce8\u91ca\u200b\u5e94\u8be5\u200b\u81f3\u5c11\u200b\u79bb\u5f00\u200b\u4ee3\u7801\u200b2\u200b\u4e2a\u200b\u7a7a\u683c\u200b. \u200b\u53e6\u4e00\u65b9\u9762\u200b, \u200b\u7edd\u4e0d\u200b\u8981\u200b\u63cf\u8ff0\u200b\u4ee3\u7801\u200b. \u200b\u5047\u8bbe\u200b\u9605\u8bfb\u200b\u4ee3\u7801\u200b\u7684\u200b\u4eba\u200b\u6bd4\u200b\u4f60\u200b\u66f4\u200b\u61c2\u200bPython, \u200b\u4ed6\u200b\u53ea\u662f\u200b\u4e0d\u200b\u77e5\u9053\u200b\u4f60\u200b\u7684\u200b\u4ee3\u7801\u200b\u8981\u200b\u505a\u200b\u4ec0\u4e48\u200b. \u2014\u2014 Google \u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\u98ce\u683c\u200b\u6307\u5357\u200b</p> <pre><code># Wrong:\n# Now go through the b array and make sure whenever i occurs\n# the next element is i+1\n\n# Wrong:\nif i &amp; (i-1) == 0:  # True if i bitwise and i-1 is 0.\n</code></pre> <p>\u200b\u5728\u200b\u6ce8\u91ca\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Markdown \u200b\u8bed\u6cd5\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5f00\u53d1\u4eba\u5458\u200b\u901a\u5e38\u200b\u719f\u6089\u200b Markdown \u200b\u8bed\u6cd5\u200b\uff0c\u200b\u8fd9\u6837\u200b\u53ef\u4ee5\u200b\u4fbf\u4e8e\u200b\u4ea4\u6d41\u200b\u7406\u89e3\u200b\uff0c\u200b\u5982\u53ef\u200b\u4f7f\u7528\u200b\u5355\u53cd\u200b\u5f15\u53f7\u200b\u8868\u793a\u200b\u4ee3\u7801\u200b\u548c\u200b\u53d8\u91cf\u200b\uff08\u200b\u6ce8\u610f\u200b\u4e0d\u8981\u200b\u548c\u200b docstring \u200b\u4e2d\u200b\u7684\u200b ReStructured \u200b\u8bed\u6cd5\u200b\u6df7\u6dc6\u200b\uff09</p> <pre><code># `_reversed_padding_repeated_twice` is the padding to be passed to\n# `F.pad` if needed (e.g., for non-zero padding types that are\n# implemented as two ops: padding + conv). `F.pad` accepts paddings in\n# reverse order than the dimension.\nself._reversed_padding_repeated_twice = _reverse_repeat_tuple(self.padding, 2)\n</code></pre>"},{"location":"community/contributing/#_17","title":"\u6ce8\u91ca\u200b\u793a\u4f8b","text":"<ol> <li>\u200b\u51fa\u81ea\u200b <code>mmcv/utils/registry.py</code>\uff0c\u200b\u5bf9\u4e8e\u200b\u8f83\u4e3a\u200b\u590d\u6742\u200b\u7684\u200b\u903b\u8f91\u200b\u7ed3\u6784\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6ce8\u91ca\u200b\uff0c\u200b\u660e\u786e\u200b\u4e86\u200b\u4f18\u5148\u7ea7\u200b\u5173\u7cfb\u200b\u3002</li> </ol> <pre><code># self.build_func will be set with the following priority:\n# 1. build_func\n# 2. parent.build_func\n# 3. build_from_cfg\nif build_func is None:\n    if parent is not None:\n        self.build_func = parent.build_func\n    else:\n        self.build_func = build_from_cfg\nelse:\n    self.build_func = build_func\n</code></pre> <ol> <li>\u200b\u51fa\u81ea\u200b <code>mmcv/runner/checkpoint.py</code>\uff0c\u200b\u5bf9\u4e8e\u200b bug \u200b\u4fee\u590d\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e9b\u200b\u7279\u6b8a\u200b\u5904\u7406\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u9644\u5e26\u200b\u76f8\u5173\u200b\u7684\u200b issue \u200b\u94fe\u63a5\u200b\uff0c\u200b\u5e2e\u52a9\u200b\u5176\u4ed6\u4eba\u200b\u4e86\u89e3\u200b bug \u200b\u80cc\u666f\u200b\u3002</li> </ol> <pre><code>def _save_ckpt(checkpoint, file):\n    # The 1.6 release of PyTorch switched torch.save to use a new\n    # zipfile-based file format. It will cause RuntimeError when a\n    # checkpoint was saved in high version (PyTorch version&gt;=1.6.0) but\n    # loaded in low version (PyTorch version&lt;1.6.0). More details at\n    # https://github.com/open-mmlab/mmpose/issues/904\n    if digit_version(TORCH_VERSION) &gt;= digit_version('1.6.0'):\n        torch.save(checkpoint, file, _use_new_zipfile_serialization=False)\n    else:\n        torch.save(checkpoint, file)\n</code></pre>"},{"location":"community/contributing/#_18","title":"\u7c7b\u578b\u200b\u6ce8\u89e3","text":""},{"location":"community/contributing/#_19","title":"\u4e3a\u4ec0\u4e48\u200b\u8981\u200b\u5199\u200b\u7c7b\u578b\u200b\u6ce8\u89e3","text":"<p>\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\u662f\u200b\u5bf9\u200b\u51fd\u6570\u200b\u4e2d\u200b\u53d8\u91cf\u200b\u7684\u200b\u7c7b\u578b\u200b\u505a\u200b\u9650\u5b9a\u200b\u6216\u200b\u63d0\u793a\u200b\uff0c\u200b\u4e3a\u200b\u4ee3\u7801\u200b\u7684\u200b\u5b89\u5168\u6027\u200b\u63d0\u4f9b\u200b\u4fdd\u969c\u200b\u3001\u200b\u589e\u5f3a\u200b\u4ee3\u7801\u200b\u7684\u200b\u53ef\u8bfb\u6027\u200b\u3001\u200b\u907f\u514d\u51fa\u73b0\u200b\u7c7b\u578b\u200b\u76f8\u5173\u200b\u7684\u200b\u9519\u8bef\u200b\u3002 Python \u200b\u6ca1\u6709\u200b\u5bf9\u200b\u7c7b\u578b\u200b\u505a\u200b\u5f3a\u5236\u200b\u9650\u5236\u200b\uff0c\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\u53ea\u200b\u8d77\u5230\u200b\u4e00\u4e2a\u200b\u63d0\u793a\u200b\u4f5c\u7528\u200b\uff0c\u200b\u901a\u5e38\u200b\u4f60\u200b\u7684\u200b IDE \u200b\u4f1a\u200b\u89e3\u6790\u200b\u8fd9\u4e9b\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u4f60\u200b\u8c03\u7528\u200b\u76f8\u5173\u200b\u4ee3\u7801\u200b\u65f6\u200b\u5bf9\u200b\u7c7b\u578b\u200b\u505a\u200b\u63d0\u793a\u200b\u3002\u200b\u53e6\u5916\u200b\u4e5f\u200b\u6709\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\u68c0\u67e5\u200b\u5de5\u5177\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u5de5\u5177\u200b\u4f1a\u200b\u6839\u636e\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\uff0c\u200b\u5bf9\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u53ef\u80fd\u200b\u51fa\u73b0\u200b\u7684\u200b\u95ee\u9898\u200b\u8fdb\u884c\u200b\u68c0\u67e5\u200b\uff0c\u200b\u51cf\u5c11\u200b bug \u200b\u7684\u200b\u51fa\u73b0\u200b\u3002 \u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u901a\u5e38\u200b\u6211\u4eec\u200b\u4e0d\u200b\u9700\u8981\u200b\u6ce8\u91ca\u200b\u6a21\u5757\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u51fd\u6570\u200b\uff1a</p> <ol> <li>\u200b\u516c\u5171\u200b\u7684\u200b API \u200b\u9700\u8981\u200b\u6ce8\u91ca\u200b</li> <li>\u200b\u5728\u200b\u4ee3\u7801\u200b\u7684\u200b\u5b89\u5168\u6027\u200b\uff0c\u200b\u6e05\u6670\u6027\u200b\u548c\u200b\u7075\u6d3b\u6027\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u6743\u8861\u200b\u662f\u5426\u200b\u6ce8\u91ca\u200b</li> <li>\u200b\u5bf9\u4e8e\u200b\u5bb9\u6613\u200b\u51fa\u73b0\u200b\u7c7b\u578b\u200b\u76f8\u5173\u200b\u7684\u200b\u9519\u8bef\u200b\u7684\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u6ce8\u91ca\u200b</li> <li>\u200b\u96be\u4ee5\u200b\u7406\u89e3\u200b\u7684\u200b\u4ee3\u7801\u200b\u8bf7\u200b\u8fdb\u884c\u200b\u6ce8\u91ca\u200b</li> <li>\u200b\u82e5\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u7c7b\u578b\u200b\u5df2\u7ecf\u200b\u7a33\u5b9a\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u6ce8\u91ca\u200b. \u200b\u5bf9\u4e8e\u200b\u4e00\u4efd\u200b\u6210\u719f\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u591a\u6570\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5373\u4f7f\u200b\u6ce8\u91ca\u200b\u4e86\u200b\u6240\u6709\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u4f1a\u200b\u4e27\u5931\u200b\u592a\u591a\u200b\u7684\u200b\u7075\u6d3b\u6027\u200b.</li> </ol>"},{"location":"community/contributing/#_20","title":"\u5982\u4f55\u200b\u5199\u200b\u7c7b\u578b\u200b\u6ce8\u89e3","text":"<ol> <li>\u200b\u51fd\u6570\u200b / \u200b\u65b9\u6cd5\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\uff0c\u200b\u901a\u5e38\u200b\u4e0d\u200b\u5bf9\u200b self \u200b\u548c\u200b cls \u200b\u6ce8\u91ca\u200b\u3002</li> </ol> <pre><code>from typing import Optional, List, Tuple\n\n# \u200b\u5168\u90e8\u200b\u4f4d\u4e8e\u200b\u4e00\u884c\u200b\ndef my_method(self, first_var: int) -&gt; int:\n    pass\n\n# \u200b\u53e6\u8d77\u200b\u4e00\u884c\u200b\ndef my_method(\n        self, first_var: int,\n        second_var: float) -&gt; Tuple[MyLongType1, MyLongType1, MyLongType1]:\n    pass\n\n# \u200b\u5355\u72ec\u200b\u6210\u884c\u200b\uff08\u200b\u5177\u4f53\u200b\u7684\u200b\u5e94\u7528\u200b\u573a\u5408\u200b\u4e0e\u884c\u200b\u5bbd\u200b\u6709\u5173\u200b\uff0c\u200b\u5efa\u8bae\u200b\u7ed3\u5408\u200b yapf \u200b\u81ea\u52a8\u5316\u200b\u683c\u5f0f\u200b\u4f7f\u7528\u200b\uff09\ndef my_method(\n    self, first_var: int, second_var: float\n) -&gt; Tuple[MyLongType1, MyLongType1, MyLongType1]:\n    pass\n\n# \u200b\u5f15\u7528\u200b\u5c1a\u672a\u200b\u88ab\u200b\u5b9a\u4e49\u200b\u7684\u200b\u7c7b\u578b\u200b\nclass MyClass:\n    def __init__(self,\n                 stack: List[\"MyClass\"]) -&gt; None:\n        pass\n</code></pre> <p>\u200b\u6ce8\u200b\uff1a\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\u4e2d\u200b\u7684\u200b\u7c7b\u578b\u200b\u53ef\u4ee5\u200b\u662f\u200b Python \u200b\u5185\u7f6e\u200b\u7c7b\u578b\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u81ea\u5b9a\u4e49\u200b\u7c7b\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Python \u200b\u63d0\u4f9b\u200b\u7684\u200b wrapper \u200b\u7c7b\u200b\u5bf9\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\u8fdb\u884c\u200b\u88c5\u9970\u200b\uff0c\u200b\u4e00\u4e9b\u200b\u5e38\u89c1\u200b\u7684\u200b\u6ce8\u89e3\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code># \u200b\u6570\u503c\u200b\u7c7b\u578b\u200b\nfrom numbers import Number\n\n# \u200b\u53ef\u200b\u9009\u200b\u7c7b\u578b\u200b\uff0c\u200b\u6307\u200b\u53c2\u6570\u200b\u53ef\u4ee5\u200b\u4e3a\u200b None\nfrom typing import Optional\ndef foo(var: Optional[int] = None):\n    pass\n\n# \u200b\u8054\u5408\u200b\u7c7b\u578b\u200b\uff0c\u200b\u6307\u200b\u540c\u65f6\u200b\u63a5\u53d7\u200b\u591a\u79cd\u7c7b\u578b\u200b\nfrom typing import Union\ndef foo(var: Union[float, str]):\n    pass\n\nfrom typing import Sequence  # \u200b\u5e8f\u5217\u200b\u7c7b\u578b\u200b\nfrom typing import Iterable  # \u200b\u53ef\u200b\u8fed\u4ee3\u200b\u7c7b\u578b\u200b\nfrom typing import Any  # \u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\nfrom typing import Callable  # \u200b\u53ef\u200b\u8c03\u7528\u200b\u7c7b\u578b\u200b\n\nfrom typing import List, Dict  # \u200b\u5217\u8868\u200b\u548c\u200b\u5b57\u5178\u200b\u7684\u200b\u6cdb\u578b\u200b\u7c7b\u578b\u200b\nfrom typing import Tuple  # \u200b\u5143\u7ec4\u200b\u7684\u200b\u7279\u6b8a\u200b\u683c\u5f0f\u200b\n# \u200b\u867d\u7136\u200b\u5728\u200b Python 3.9 \u200b\u4e2d\u200b\uff0clist, tuple \u200b\u548c\u200b dict \u200b\u672c\u8eab\u200b\u5df2\u200b\u652f\u6301\u200b\u6cdb\u578b\u200b\uff0c\u200b\u4f46\u200b\u4e3a\u4e86\u200b\u652f\u6301\u200b\u4e4b\u524d\u200b\u7684\u200b\u7248\u672c\u200b\n# \u200b\u6211\u4eec\u200b\u5728\u200b\u8fdb\u884c\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\u65f6\u200b\u8fd8\u662f\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b List, Tuple, Dict \u200b\u7c7b\u578b\u200b\n# \u200b\u53e6\u5916\u200b\uff0c\u200b\u5728\u200b\u5bf9\u200b\u53c2\u6570\u200b\u7c7b\u578b\u200b\u8fdb\u884c\u200b\u6ce8\u89e3\u200b\u65f6\u200b\uff0c\u200b\u5c3d\u91cf\u200b\u4f7f\u7528\u200b Sequence &amp; Iterable &amp; Mapping\n# List, Tuple, Dict \u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u8fd4\u56de\u503c\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\n# \u200b\u53c2\u89c1\u200b https://docs.python.org/3/library/typing.html#typing.List\n</code></pre> <ol> <li>\u200b\u53d8\u91cf\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\uff0c\u200b\u4e00\u822c\u200b\u7528\u4e8e\u200b\u96be\u4ee5\u200b\u76f4\u63a5\u200b\u63a8\u65ad\u200b\u5176\u200b\u7c7b\u578b\u200b\u65f6\u200b</li> </ol> <pre><code># Recommend: \u200b\u5e26\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\u7684\u200b\u8d4b\u503c\u200b\na: Foo = SomeUndecoratedFunction()\na: List[int]: [1, 2, 3]         # List \u200b\u53ea\u200b\u652f\u6301\u200b\u5355\u4e00\u200b\u7c7b\u578b\u200b\u6cdb\u578b\u200b\uff0c\u200b\u53ef\u200b\u4f7f\u7528\u200b Union\nb: Tuple[int, int] = (1, 2)     # \u200b\u957f\u5ea6\u200b\u56fa\u5b9a\u200b\u4e3a\u200b 2\nc: Tuple[int, ...] = (1, 2, 3)  # \u200b\u53d8\u200b\u957f\u200b\nd: Dict[str, int] = {'a': 1, 'b': 2}\n\n# Not Recommend\uff1a\u200b\u884c\u5c3e\u200b\u7c7b\u578b\u200b\u6ce8\u91ca\u200b\n# \u200b\u867d\u7136\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u88ab\u200b\u5199\u200b\u5728\u200b\u4e86\u200b Google \u200b\u5f00\u6e90\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u4f46\u200b\u8fd9\u200b\u662f\u200b\u4e00\u79cd\u200b\u4e3a\u4e86\u200b\u652f\u6301\u200b Python 2.7 \u200b\u7248\u672c\u200b\n# \u200b\u800c\u200b\u8865\u5145\u200b\u7684\u200b\u6ce8\u91ca\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u9274\u4e8e\u200b\u6211\u4eec\u200b\u53ea\u200b\u652f\u6301\u200b Python 3, \u200b\u4e3a\u4e86\u200b\u98ce\u683c\u200b\u7edf\u4e00\u200b\uff0c\u200b\u4e0d\u200b\u63a8\u8350\u200b\u4f7f\u7528\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u3002\na = SomeUndecoratedFunction()  # type: Foo\na = [1, 2, 3]  # type: List[int]\nb = (1, 2, 3)  # type: Tuple[int, ...]\nc = (1, \"2\", 3.5)  # type: Tuple[int, Text, float]\n</code></pre> <ol> <li>\u200b\u6cdb\u578b\u200b</li> </ol> <p>\u200b\u4e0a\u200b\u6587\u4e2d\u200b\u6211\u4eec\u200b\u77e5\u9053\u200b\uff0ctyping \u200b\u4e2d\u200b\u63d0\u4f9b\u200b\u4e86\u200b list \u200b\u548c\u200b dict \u200b\u7684\u200b\u6cdb\u578b\u200b\u7c7b\u578b\u200b\uff0c\u200b\u90a3\u4e48\u200b\u6211\u4eec\u200b\u81ea\u5df1\u200b\u662f\u5426\u200b\u53ef\u4ee5\u200b\u5b9a\u4e49\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u6cdb\u578b\u200b\u5462\u200b\uff1f</p> <pre><code>from typing import TypeVar, Generic\n\nKT = TypeVar('KT')\nVT = TypeVar('VT')\n\nclass Mapping(Generic[KT, VT]):\n    def __init__(self, data: Dict[KT, VT]):\n        self._data = data\n\n    def __getitem__(self, key: KT) -&gt; VT:\n        return self._data[key]\n</code></pre> <p>\u200b\u4f7f\u7528\u200b\u4e0a\u8ff0\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u6211\u4eec\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u62e5\u6709\u200b\u6cdb\u578b\u200b\u80fd\u529b\u200b\u7684\u200b\u6620\u5c04\u200b\u7c7b\u200b\uff0c\u200b\u5b9e\u9645\u200b\u7528\u6cd5\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>mapping = Mapping[str, float]({'a': 0.5})\nvalue: float = example['a']\n</code></pre> <p>\u200b\u53e6\u5916\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200b TypeVar \u200b\u5728\u200b\u51fd\u6570\u200b\u7b7e\u540d\u200b\u4e2d\u200b\u6307\u5b9a\u200b\u8054\u52a8\u200b\u7684\u200b\u591a\u4e2a\u200b\u7c7b\u578b\u200b\uff1a</p> <pre><code>from typing import TypeVar, List\n\nT = TypeVar('T')  # Can be anything\nA = TypeVar('A', str, bytes)  # Must be str or bytes\n\n\ndef repeat(x: T, n: int) -&gt; List[T]:\n    \"\"\"Return a list containing n references to x.\"\"\"\n    return [x]*n\n\n\ndef longest(x: A, y: A) -&gt; A:\n    \"\"\"Return the longest of two strings.\"\"\"\n    return x if len(x) &gt;= len(y) else y\n</code></pre> <p>\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\u7684\u200b\u5199\u6cd5\u200b\u8bf7\u200b\u53c2\u8003\u200b typing\u3002</p>"},{"location":"community/contributing/#_21","title":"\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\u68c0\u67e5\u200b\u5de5\u5177","text":"<p>mypy \u200b\u662f\u200b\u4e00\u4e2a\u200b Python \u200b\u9759\u6001\u200b\u7c7b\u578b\u200b\u68c0\u67e5\u200b\u5de5\u5177\u200b\u3002\u200b\u6839\u636e\u200b\u4f60\u200b\u7684\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\uff0cmypy \u200b\u4f1a\u200b\u68c0\u67e5\u200b\u4f20\u53c2\u200b\u3001\u200b\u8d4b\u503c\u200b\u7b49\u200b\u64cd\u4f5c\u200b\u662f\u5426\u200b\u7b26\u5408\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\uff0c\u200b\u4ece\u800c\u200b\u907f\u514d\u200b\u53ef\u80fd\u200b\u51fa\u73b0\u200b\u7684\u200b bug\u3002</p> <p>\u200b\u4f8b\u5982\u200b\u5982\u4e0b\u200b\u7684\u200b\u4e00\u4e2a\u200b  Python \u200b\u811a\u672c\u200b\u6587\u4ef6\u200b test.py:</p> <pre><code>def foo(var: int) -&gt; float:\n    return float(var)\n\na: str = foo('2.0')\nb: int = foo('3.0')  # type: ignore\n</code></pre> <p>\u200b\u8fd0\u884c\u200b mypy test.py \u200b\u53ef\u4ee5\u200b\u5f97\u5230\u200b\u5982\u4e0b\u200b\u68c0\u67e5\u200b\u7ed3\u679c\u200b\uff0c\u200b\u5206\u522b\u200b\u6307\u51fa\u200b\u4e86\u200b\u7b2c\u200b 4 \u200b\u884c\u5728\u200b\u51fd\u6570\u8c03\u7528\u200b\u548c\u200b\u8fd4\u56de\u503c\u200b\u8d4b\u503c\u200b\u4e24\u5904\u200b\u7c7b\u578b\u200b\u9519\u8bef\u200b\u3002\u200b\u800c\u200b\u7b2c\u200b 5 \u200b\u884c\u200b\u540c\u6837\u200b\u5b58\u5728\u200b\u4e24\u4e2a\u200b\u7c7b\u578b\u200b\u9519\u8bef\u200b\uff0c\u200b\u7531\u4e8e\u200b\u4f7f\u7528\u200b\u4e86\u200b type: ignore \u200b\u800c\u200b\u88ab\u5ffd\u7565\u4e86\u200b\uff0c\u200b\u53ea\u6709\u200b\u90e8\u5206\u200b\u7279\u6b8a\u200b\u60c5\u51b5\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u6b64\u7c7b\u200b\u5ffd\u7565\u200b\u3002</p> <pre><code>test.py:4: error: Incompatible types in assignment (expression has type \"float\", variable has type \"int\")\ntest.py:4: error: Argument 1 to \"foo\" has incompatible type \"str\"; expected \"int\"\nFound 2 errors in 1 file (checked 1 source file)\n</code></pre>"},{"location":"community/projects/","title":"\u751f\u6001\u200b\u9879\u76ee","text":"<p>\u200b\u6b22\u8fce\u200b\u6765\u5230\u200b MMagic \u200b\u793e\u533a\u200b\uff01</p> <p>MMagic \u200b\u793e\u533a\u200b\u7531\u200b\u6765\u81ea\u200b\u5b66\u672f\u754c\u200b\u548c\u200b\u5de5\u4e1a\u754c\u200b\u7684\u200b\u5e7f\u5927\u200b\u7814\u7a76\u200b\u4eba\u5458\u200b\u3001\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u548c\u200b\u5e94\u7528\u200b\u5de5\u7a0b\u5e08\u200b\u7f16\u5199\u200b\u7684\u200b\u6559\u7a0b\u200b\u3001\u200b\u5e93\u200b\u548c\u200b\u9879\u76ee\u200b\u7ec4\u6210\u200b\u3002</p> <p>\u200b\u8be5\u200b\u793e\u533a\u200b\u7684\u200b\u76ee\u6807\u200b\u662f\u200b\u652f\u6301\u200b\u3001\u200b\u52a0\u901f\u200b\u548c\u200b\u5e2e\u52a9\u200b\u60a8\u200b\u4f7f\u7528\u200b MMagic \u200b\u63a2\u7d22\u200b AIGC\uff0c\u200b\u4f8b\u5982\u200b\u56fe\u50cf\u200b\u3001\u200b\u89c6\u9891\u200b\u30013D \u200b\u5185\u5bb9\u200b\u751f\u6210\u200b\u3001\u200b\u7f16\u8f91\u200b\u548c\u200b\u5904\u7406\u200b\u3002</p> <p>\u200b\u8fd9\u91cc\u200b\u6709\u200b\u4e00\u4e9b\u200b\u57fa\u4e8e\u200b MMagic \u200b\u7684\u200b\u9879\u76ee\u200b\u3002 \u200b\u5b83\u4eec\u200b\u662f\u200b\u5982\u4f55\u200b\u5c06\u200b MMagic \u200b\u7528\u4f5c\u200b\u5e93\u200b\u7684\u200b\u793a\u4f8b\u200b\uff0c\u200b\u4ee5\u4f7f\u200b\u60a8\u200b\u7684\u200b\u9879\u76ee\u200b\u66f4\u200b\u6613\u4e8e\u200b\u7ef4\u62a4\u200b\u3002\u200b\u8bf7\u200b\u5728\u200bMMagic Ecosystem\u200b\u4e2d\u200b\u627e\u5230\u200b\u66f4\u200b\u591a\u200b\u9879\u76ee\u200b\u3002</p>"},{"location":"community/projects/#openmmlab","title":"\u5728\u200b OpenMMLab \u200b\u793e\u533a\u200b\u4e0a\u200b\u5c55\u793a\u200b\u60a8\u200b\u7684\u200b\u9879\u76ee","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u63d0\u4ea4\u200b\u60a8\u200b\u7684\u200b\u9879\u76ee\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u663e\u793a\u200b\u5728\u200bOpenMMLab\u200b\u7684\u200b\u4e3b\u9875\u200b\u4e0a\u200b\u3002</p>"},{"location":"community/projects/#mmagic","title":"\u6dfb\u52a0\u200b\u793a\u4f8b\u200b\u9879\u76ee\u200b\u5230\u200b MMagic","text":"<p>\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u5173\u4e8e\u200b\u5982\u4f55\u200b\u5c06\u200b\u9879\u76ee\u200b\u6dfb\u52a0\u200b\u5230\u200b MMagic \u200b\u7684\u200b\u793a\u4f8b\u200b\u9879\u76ee\u200b\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ece\u200b example project \u200b\u590d\u5236\u200b\u5e76\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u9879\u76ee\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e0b\u9762\u200b\u5217\u51fa\u200b\u7684\u200b\u4e00\u4e9b\u200b\u6587\u6863\u200b\u4f9b\u200b\u60a8\u200b\u53c2\u8003\u200b\uff1a</p> <ul> <li>\u200b\u8d21\u732e\u200b\u6307\u5357\u200b</li> </ul> <p>\u200b\u65b0\u200b\u8d21\u732e\u8005\u200b\u6307\u5357\u200b\uff0c\u200b\u4e86\u89e3\u200b\u5982\u4f55\u200b\u5c06\u200b\u60a8\u200b\u7684\u200b\u9879\u76ee\u200b\u6dfb\u52a0\u200b\u5230\u200b MMagic\u3002</p> <ul> <li>\u200b\u65b0\u200b\u6a21\u578b\u200b\u6307\u5357\u200b</li> </ul> <p>\u200b\u6dfb\u52a0\u200b\u65b0\u200b\u6a21\u578b\u200b\u7684\u200b\u6587\u6863\u200b\u3002</p> <ul> <li>\u200b\u8ba8\u8bba\u200b</li> </ul> <p>\u200b\u6b22\u8fce\u200b\u5f00\u59cb\u200b\u8ba8\u8bba\u200b\uff01</p>"},{"location":"community/projects/#_2","title":"\u5e93\u200b\u548c\u200b\u5de5\u5177\u7bb1\u200b\u7684\u200b\u9879\u76ee","text":"<ul> <li>PowerVQE\uff1a\u200b\u57fa\u4e8e\u200b PyTorch \u200b\u548c\u200b MMagic \u200b\u7684\u200b\u538b\u7f29\u200b\u89c6\u9891\u200b\u8d28\u91cf\u200b\u589e\u5f3a\u200b\u5f00\u653e\u200b\u6846\u67b6\u200b</li> <li>VR-Baseline\uff1a\u200b\u89c6\u9891\u200b\u4fee\u590d\u200b\u5de5\u5177\u7bb1\u200b</li> <li>Derain-Toolbox\uff1a\u200b\u5355\u200b\u56fe\u50cf\u200b\u53bb\u200b\u96e8\u200b\u5de5\u5177\u7bb1\u200b\u548c\u200b\u57fa\u51c6\u200b</li> </ul>"},{"location":"community/projects/#_3","title":"\u7814\u7a76\u200b\u8bba\u6587\u200b\u9879\u76ee","text":"<ul> <li> <p>Towards Interpretable Video Super-Resolution via Alternating Optimization, ECCV 2022[github]</p> </li> <li> <p>SepLUT:Separable Image-adaptive Lookup Tables for Real-time Image Enhancement, ECCV 2022[github]</p> </li> <li> <p>TTVSR: Learning Trajectory-Aware Transformer for Video Super-Resolution, CVPR 2022[github]</p> </li> <li> <p>Arbitrary-Scale Image Synthesis, CVPR 2022[github]</p> </li> <li> <p>Investigating Tradeoffs in Real-World Video Super-Resolution(RealBasicVSR), CVPR 2022[github]</p> </li> <li> <p>BasicVSR++: Improving Video Super-Resolution with Enhanced Propagation and Alignment, CVPR 2022[github]</p> </li> <li> <p>Multi-Scale Memory-Based Video Deblurring, CVPR 2022[github]</p> </li> <li> <p>AdaInt:Learning Adaptive Intervals for 3D Lookup Tables on Real-time Image Enhancement, CVPR 2022[github]</p> </li> <li> <p>A New Dataset and Transformer for Stereoscopic Video Super-Resolution, CVPRW 2022[github]</p> </li> <li> <p>Liquid warping GAN with attention: A unified framework for human image synthesis, TPAMI 2021[github]</p> </li> <li> <p>BasicVSR:The Search for Essential Components in Video Super-Resolution and Beyond, CVPR 2021[github]</p> </li> <li> <p>GLEAN:Generative Latent Bank for Large-Factor Image Super-Resolution, CVPR 2021[github]</p> </li> <li> <p>DAN:Unfolding the Alternating Optimization for Blind Super Resolution, NeurIPS 2020[github]</p> </li> </ul>"},{"location":"device/npu_zh/","title":"NPU (\u200b\u534e\u4e3a\u200b\u6607\u200b\u817e\u200b)","text":""},{"location":"device/npu_zh/#_1","title":"\u4f7f\u7528\u200b\u65b9\u6cd5","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u8003\u200bMMCV \u200b\u5b89\u88c5\u200b\u5e26\u6709\u200b NPU \u200b\u652f\u6301\u200b\u7684\u200b MMCV\u200b\u4e0e\u200b mmengine \u3002</p> <p>\u200b\u4f7f\u7528\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200b 8 \u200b\u4e2a\u200b NPU \u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff08\u200b\u4ee5\u200b edsr \u200b\u4e3a\u4f8b\u200b\uff09\uff1a</p> <pre><code>bash tools/dist_train.sh configs/edsr/edsr_x2c64b16_1xb16-300k_div2k.py 8\n</code></pre> <p>\u200b\u6216\u8005\u200b\uff0c\u200b\u4f7f\u7528\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\uff0c\u200b\u5728\u200b\u4e00\u4e2a\u200b NPU \u200b\u4e0a\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff08\u200b\u4ee5\u200b edsr \u200b\u4e3a\u4f8b\u200b\uff09\uff1a</p> <pre><code>python tools/train.py configs/edsr/edsr_x2c64b16_1xb16-300k_div2k.py\n</code></pre>"},{"location":"device/npu_zh/#_2","title":"\u7ecf\u8fc7\u200b\u9a8c\u8bc1\u200b\u7684\u200b\u6a21\u578b","text":"Model Dataset PSNR SSIM Download edsr_x2c64b16_1x16_300k_div2k DIV2K 35.83 0.94 log <p>\u200b\u6ce8\u610f\u200b:</p> <ul> <li>\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u7279\u522b\u200b\u6807\u8bb0\u200b\uff0cNPU \u200b\u4e0a\u200b\u7684\u200b\u7ed3\u679c\u200b\u4e0e\u200b\u4f7f\u7528\u200b FP32 \u200b\u7684\u200b GPU \u200b\u4e0a\u200b\u7684\u200b\u7ed3\u679c\u200b\u76f8\u540c\u200b\u3002</li> </ul> <p>\u200b\u4ee5\u4e0a\u200b\u6240\u6709\u200b\u6a21\u578b\u200b\u6743\u91cd\u200b\u53ca\u200b\u8bad\u7ec3\u200b\u65e5\u5fd7\u200b\u5747\u200b\u7531\u200b\u534e\u4e3a\u200b\u6607\u200b\u817e\u200b\u56e2\u961f\u200b\u63d0\u4f9b\u200b</p>"},{"location":"get_started/install/","title":"\u5b89\u88c5\u200b\u6559\u7a0b","text":"<p>\u200b\u5728\u200b\u672c\u8282\u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u5c06\u200b\u4e86\u89e3\u200b\u5230\u200b\uff1a</p> <ul> <li>\u200b\u5b89\u88c5\u200b\u6559\u7a0b\u200b</li> <li>\u200b\u5b89\u88c5\u200b<ul> <li>\u200b\u524d\u63d0\u6761\u4ef6\u200b</li> <li>\u200b\u6700\u4f73\u200b\u5b9e\u8df5\u200b</li> <li>\u200b\u81ea\u5b9a\u4e49\u200b\u5b89\u88c5\u200b</li> <li>CUDA\u200b\u7248\u672c\u200b</li> <li>\u200b\u4e0d\u200b\u4f7f\u7528\u200bMIM\u200b\u5b89\u88c5\u200bMMCV</li> <li>\u200b\u5728\u200bDocker\u200b\u4e2d\u200b\u4f7f\u7528\u200bMMagic</li> <li>\u200b\u95ee\u9898\u200b\u89e3\u51b3\u200b</li> <li>\u200b\u4f7f\u7528\u200b\u591a\u4e2a\u200bMMagic\u200b\u7248\u672c\u200b\u5f00\u53d1\u200b</li> </ul> </li> </ul>"},{"location":"get_started/install/#_2","title":"\u5b89\u88c5","text":"<p>\u200b\u6211\u4eec\u200b\u5efa\u8bae\u200b\u7528\u6237\u200b\u6309\u7167\u200b\u6211\u4eec\u200b\u7684\u200b\u6700\u4f73\u200b\u5b9e\u8df5\u200b\u6765\u200b\u5b89\u88c5\u200bMMagic\u3002 \u200b\u7136\u800c\u200b\uff0c\u200b\u6574\u4e2a\u200b\u8fc7\u7a0b\u200b\u662f\u200b\u9ad8\u5ea6\u200b\u53ef\u200b\u5b9a\u5236\u200b\u7684\u200b\u3002\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u8bf7\u53c2\u9605\u200b\u81ea\u5b9a\u4e49\u200b\u5b89\u88c5\u200b\u90e8\u5206\u200b\u3002</p>"},{"location":"get_started/install/#_3","title":"\u524d\u63d0\u6761\u4ef6","text":"<p>\u200b\u5728\u200b\u672c\u8282\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6f14\u793a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200bPyTorch\u200b\u51c6\u5907\u200b\u73af\u5883\u200b\u3002</p> <p>MMagic\u200b\u53ef\u4ee5\u200b\u5728\u200bLinux, Windows, \u200b\u548c\u200bmacOS\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u3002\u200b\u5b83\u200b\u8981\u6c42\u200b\uff1a</p> <ul> <li>Python &gt;= 3.7</li> <li>PyTorch &gt;= 1.8</li> <li>MMCV &gt;= 2.0.0</li> </ul> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5bf9\u200bPyTorch\u200b\u6709\u200b\u7ecf\u9a8c\u200b\u5e76\u4e14\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u4e86\u200b\u5b83\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8df3\u8fc7\u200b\u8fd9\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u8df3\u5230\u200b\u4e0b\u200b\u4e00\u8282\u200b\u3002\u200b\u5426\u5219\u200b, \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u4ee5\u4e0b\u200b\u6b65\u9aa4\u200b\u6765\u200b\u51c6\u5907\u200b\u73af\u5883\u200b\u3002</p> <p>Step 0. \u200b\u4ece\u200b\u5b98\u65b9\u7f51\u7ad9\u200b\u4e0b\u8f7d\u200b\u548c\u200b\u5b89\u88c5\u200bMiniconda.</p> <p>Step 1. \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bconda\u200b\u865a\u62df\u73af\u5883\u200b\u5e76\u200b\u6fc0\u6d3b\u200b\u5b83\u200b</p> <pre><code>conda create --name mmagic python=3.8 -y\nconda activate mmagic\n</code></pre> <p>Step 2. \u200b\u6309\u7167\u200b\u5b98\u65b9\u200b\u8bf4\u660e\u200b\u5b89\u88c5\u200bPyTorch\uff0c\u200b\u4f8b\u5982\u200b</p> <ul> <li>\u200b\u5728\u200bGPU\u200b\u5e73\u53f0\u200b\u4e0a\u200b\uff1a</li> </ul> <pre><code>conda install pytorch torchvision cudatoolkit=11.3 -c pytorch\n</code></pre> <ul> <li>\u200b\u5728\u200bCPU\u200b\u5e73\u53f0\u200b\u4e0a\u200b\uff1a</li> </ul> <pre><code>conda install pytorch=1.10 torchvision cpuonly -c pytorch\n</code></pre>"},{"location":"get_started/install/#_4","title":"\u6700\u4f73\u200b\u5b9e\u8df5","text":"<p>Step 0. \u200b\u4f7f\u7528\u200bMIM\u200b\u5b89\u88c5\u200bMMCV\u3002</p> <pre><code>pip install -U openmim\nmim install 'mmcv&gt;=2.0.0'\n</code></pre> <p>Step 1. \u200b\u5b89\u88c5\u200bMMEngine\u3002</p> <pre><code>mim install 'mmengine'\n</code></pre> <p>\u200b\u6216\u8005\u200b</p> <pre><code>pip install mmengine\n</code></pre> <p>\u200b\u6216\u8005\u200b</p> <pre><code>pip install git+https://github.com/open-mmlab/mmengine.git\n</code></pre> <p>Step 2. \u200b\u5b89\u88c5\u200bMMagic\u3002</p> <pre><code>mim install 'mmagic'\n</code></pre> <p>\u200b\u6216\u8005\u200b</p> <pre><code>pip install mmagic\n</code></pre> <p>\u200b\u6216\u8005\u200b\u4ece\u200b\u6e90\u4ee3\u7801\u200b\u5b89\u88c5\u200bMMagic\u3002</p> <pre><code>git clone https://github.com/open-mmlab/mmagic.git\ncd mmagic\npip3 install -e . -v\n</code></pre> <p>Step 5. \u200b\u68c0\u67e5\u200bMMagic\u200b\u662f\u5426\u200b\u5b89\u88c5\u200b\u6210\u529f\u200b\u3002</p> <pre><code>cd ~\npython -c \"import mmagic; print(mmagic.__version__)\"\n# \u200b\u793a\u4f8b\u200b\u8f93\u51fa\u200b: 1.0.0\n</code></pre> <p>\u200b\u663e\u793a\u200b\u6b63\u786e\u200b\u7684\u200b\u7248\u672c\u53f7\u200b\uff0c\u200b\u5219\u200b\u8868\u793a\u200b\u5b89\u88c5\u200b\u6210\u529f\u200b\u3002</p> <pre><code>\u200b\u4f60\u200b\u53ef\u80fd\u200b\u60f3\u200b\u77e5\u9053\u200b\u9644\u52a0\u200b\u5728\u200b`pip install`\u200b\u540e\u9762\u200b\u7684\u200b`-e .`\u200b\u662f\u200b\u4ec0\u4e48\u200b\u610f\u601d\u200b\u3002\n\u200b\u4e0b\u9762\u200b\u662f\u200b\u8bf4\u660e\u200b:\n\n- `-e`\u200b\u8868\u793a\u200b[\u200b\u53ef\u200b\u7f16\u8f91\u200b\u6a21\u5f0f\u200b](https://pip.pypa.io/en/latest/cli/pip_install/#cmdoption-e).\n  \u200b\u5f53\u200b`import mmagic`\u200b\u65f6\u200b\uff0c\u200b\u5c06\u200b\u5bfc\u5165\u200b\u514b\u9686\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u7684\u200b\u6a21\u5757\u200b\u3002\n  \u200b\u5982\u679c\u200b`pip install`\u200b\u6ca1\u6709\u200b\u9644\u52a0\u200b`-e`, pip\u200b\u4f1a\u200b\u5c06\u200b\u514b\u9686\u200b\u7684\u200b\u4ee3\u7801\u200b\u590d\u5236\u5230\u200b\u7c7b\u4f3c\u200b`lib/python/site-package`\u200b\u7684\u200b\u5730\u65b9\u200b\u3002\n  \u200b\u56e0\u6b64\u200b\uff0c\u200b\u9664\u975e\u200b\u518d\u6b21\u200b\u6267\u884c\u200b`pip install`\u200b\u547d\u4ee4\u200b\uff0c\u200b\u5426\u5219\u200b\u5728\u200b\u514b\u9686\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e0d\u4f1a\u200b\u751f\u6548\u200b\u3002\n  \u200b\u56e0\u6b64\u200b\uff0c`pip install`\u200b\u547d\u4ee4\u200b\u9644\u5e26\u200b`-e`\u200b\u5bf9\u4e8e\u200b\u5f00\u53d1\u4eba\u5458\u200b\u6765\u8bf4\u200b\u7279\u522b\u200b\u65b9\u4fbf\u200b\u3002\u200b\u5982\u679c\u200b\u4fee\u6539\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4e0b\u6b21\u200b\u5bfc\u5165\u200b\u65b0\u200b\u7684\u200b\u4ee3\u7801\u200b\u65f6\u200b\u4e0d\u200b\u9700\u8981\u200b\u91cd\u65b0\u5b89\u88c5\u200b\u3002\n- `.`\u200b\u8868\u793a\u200b\u6b64\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u7684\u200b\u4ee3\u7801\u200b\u3002\n\n\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b`pip install -e .[all]`\u200b\u547d\u4ee4\u200b\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u5b89\u88c5\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u4f9d\u8d56\u200b\u9879\u200b\uff0c\u200b\u7279\u522b\u200b\u662f\u200b\u5bf9\u4e8e\u200b\u9884\u200b\u63d0\u4ea4\u200bhooks\u200b\u548c\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u3002\n</code></pre>"},{"location":"get_started/install/#_5","title":"\u81ea\u5b9a\u4e49\u200b\u5b89\u88c5","text":""},{"location":"get_started/install/#cuda","title":"CUDA\u200b\u7248\u672c","text":"<p>\u200b\u5b89\u88c5\u200bPyTorch\u200b\u65f6\u200b,\u200b\u60a8\u200b\u9700\u8981\u200b\u6307\u5b9a\u200bCUDA\u200b\u7684\u200b\u7248\u672c\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u4e0d\u200b\u6e05\u695a\u200b\u8be5\u200b\u9009\u62e9\u200b\u54ea\u200b\u4e00\u4e2a\u200b\uff0c\u200b\u8bf7\u200b\u9075\u5faa\u200b\u6211\u4eec\u200b\u7684\u200b\u5efa\u8bae\u200b:</p> <ul> <li>\u200b\u5bf9\u4e8e\u200b\u57fa\u4e8e\u200bAmpere\u200b\u7684\u200bNVIDIA GPUs\uff0c\u200b\u5982\u200bGeForce 30\u200b\u7cfb\u5217\u200b\u548c\u200bNVIDIA A100\uff0c\u200b\u5fc5\u987b\u200b\u4f7f\u7528\u200bCUDA 11\u3002</li> <li>\u200b\u5bf9\u4e8e\u200b\u8f83\u200b\u8001\u200b\u7684\u200bNVIDIA GPUs\uff0c\u200b\u662f\u200b\u5411\u200b\u540e\u200b\u517c\u5bb9\u200b\u7684\u200b\uff0c\u200b\u4f46\u200bCUDA 10.2\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u66f4\u597d\u200b\u7684\u200b\u517c\u5bb9\u6027\u200b\uff0c\u200b\u66f4\u200b\u8f7b\u91cf\u200b\u3002</li> </ul> <p>\u200b\u8bf7\u200b\u786e\u4fdd\u200bGPU\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6ee1\u8db3\u200b\u6700\u4f4e\u200b\u7248\u672c\u200b\u8981\u6c42\u200b\u3002 \u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u8bf7\u200b\u53c2\u89c1\u200b\u6b64\u8868\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b \u200b\u5982\u679c\u200b\u9075\u5faa\u200b\u6211\u4eec\u200b\u7684\u200b\u6700\u4f73\u200b\u5b9e\u8df5\u200b\uff0c\u200b\u5b89\u88c5\u200bCUDA runtime\u200b\u5e93\u200b\u5c31\u200b\u8db3\u591f\u200b\u4e86\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4e0d\u4f1a\u200b\u5728\u200b\u672c\u5730\u200b\u7f16\u8bd1\u200bCUDA\u200b\u4ee3\u7801\u200b\u3002 \u200b\u4f46\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u5e0c\u671b\u200b\u4ece\u200b\u6e90\u4ee3\u7801\u200b\u7f16\u8bd1\u200bMMCV\u200b\u6216\u200b\u5f00\u53d1\u200b\u5176\u4ed6\u200bCUDA\u200b\u7b97\u5b50\u200b\uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u4ece\u200bNVIDIA\u200b\u7684\u200b\u5f00\u53d1\u8005\u200b\u7f51\u7ad9\u200b\u5b89\u88c5\u200b\u5b8c\u6574\u200b\u7684\u200bCUDA\u200b\u5de5\u5177\u5305\u200b\uff0c\u200b\u5176\u200b\u7248\u672c\u200b\u5e94\u200b\u4e0e\u200bPyTorch\u200b\u7684\u200bCUDA\u200b\u7248\u672c\u200b\u5339\u914d\u200b\u3002\u200b\u5373\u200b\uff0c\u200b\u5728\u200b <code>conda install</code> \u200b\u547d\u4ee4\u200b\u4e2d\u200b\u6307\u5b9a\u200b\u7684\u200bcudatoolkit\u200b\u7248\u672c\u200b\u3002</p>"},{"location":"get_started/install/#mimmmcv","title":"\u4e0d\u200b\u4f7f\u7528\u200bMIM\u200b\u5b89\u88c5\u200bMMCV","text":"<p>MMCV\u200b\u5305\u542b\u200bc++\u200b\u548c\u200bCUDA\u200b\u6269\u5c55\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4ee5\u200b\u4e00\u79cd\u200b\u590d\u6742\u200b\u7684\u200b\u65b9\u5f0f\u200b\u4f9d\u8d56\u4e8e\u200bPyTorch\u3002MIM\u200b\u81ea\u52a8\u200b\u89e3\u51b3\u200b\u4e86\u200b\u8fd9\u79cd\u200b\u4f9d\u8d56\u200b\u5173\u7cfb\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u200b\u5b89\u88c5\u200b\u66f4\u200b\u5bb9\u6613\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u8fd9\u200b\u5e76\u200b\u4e0d\u662f\u200b\u5fc5\u987b\u200b\u7684\u200b\u3002</p> <p>\u200b\u8981\u200b\u4f7f\u7528\u200bpip\u200b\u800c\u200b\u4e0d\u662f\u200bMIM\u200b\u5b89\u88c5\u200bMMCV\uff0c\u200b\u8bf7\u200b\u9075\u5faa\u200bMMCV\u200b\u5b89\u88c5\u200b\u6307\u5357\u200b\u3002\u200b\u8fd9\u200b\u9700\u8981\u200b\u6839\u636e\u200bPyTorch\u200b\u7248\u672c\u200b\u53ca\u5176\u200bCUDA\u200b\u7248\u672c\u200b\u624b\u52a8\u200b\u6307\u5b9a\u200bfind-url\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200binstall mmcv-full\u200b\u662f\u200b\u9488\u5bf9\u200bPyTorch 1.10.x\u200b\u548c\u200bCUDA 11.3\u200b\u6784\u5efa\u200b\u7684\u200b\u3002</p> <pre><code>pip install 'mmcv&gt;=2.0.0' -f https://download.openmmlab.com/mmcv/dist/cu113/torch1.10/index.html\n</code></pre>"},{"location":"get_started/install/#dockermmagic","title":"\u5728\u200bDocker\u200b\u4e2d\u200b\u4f7f\u7528\u200bMMagic","text":"<p>\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200bDockerfile\u200b\u6765\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u955c\u50cf\u200b\u3002\u200b\u8bf7\u200b\u786e\u4fdd\u60a8\u200b\u7684\u200bdocker\u200b\u7248\u672c\u200b&gt;=19.03\u3002</p> <pre><code># \u200b\u4f7f\u7528\u200bPyTorch 1.8, CUDA 11.1\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u955c\u50cf\u200b\n# \u200b\u5982\u679c\u200b\u60a8\u200b\u559c\u6b22\u200b\u5176\u4ed6\u200b\u7248\u672c\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u4fee\u6539\u200bDockerfile\ndocker build -t mmagic docker/\n</code></pre> <p>\u200b\u4f7f\u7528\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\u8fd0\u884c\u200b</p> <pre><code>docker run --gpus all --shm-size=8g -it -v {DATA_DIR}:/mmagic/data mmagic\n</code></pre>"},{"location":"get_started/install/#_6","title":"\u95ee\u9898\u200b\u89e3\u51b3","text":"<p>\u200b\u5982\u679c\u200b\u5728\u200b\u5b89\u88c5\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u9047\u5230\u200b\u95ee\u9898\u200b\uff0c\u200b\u8bf7\u200b\u5148\u200b\u67e5\u770b\u200bFAQ\u200b\u9875\u9762\u200b\u3002\u200b\u5982\u679c\u200b\u627e\u200b\u4e0d\u5230\u200b\u89e3\u51b3\u65b9\u6848\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200bGitHub\u200b\u4e0a\u200bopen an issue\u3002</p>"},{"location":"get_started/install/#mmagic","title":"\u4f7f\u7528\u200b\u591a\u4e2a\u200bMMagic\u200b\u7248\u672c\u200b\u5f00\u53d1","text":"<p>\u200b\u8bad\u7ec3\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u811a\u672c\u200b\u5df2\u7ecf\u200b\u4fee\u6539\u200b\u4e86\u200b<code>PYTHONPATH</code>\uff0c\u200b\u4ee5\u200b\u786e\u4fdd\u200b\u811a\u672c\u200b\u4f7f\u7528\u200b\u5f53\u524d\u76ee\u5f55\u200b\u4e2d\u200b\u7684\u200b<code>MMagic</code>\u3002</p> <p>\u200b\u8981\u200b\u4f7f\u7528\u200b\u73af\u5883\u200b\u4e2d\u200b\u5b89\u88c5\u200b\u7684\u200b\u9ed8\u8ba4\u200bMMagic\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u60a8\u200b\u6b63\u5728\u200b\u4f7f\u7528\u200b\u7684\u200bMMagic\uff0c\u200b\u53ef\u4ee5\u200b\u5220\u9664\u200b\u8fd9\u4e9b\u200b\u811a\u672c\u200b\u4e2d\u200b\u7684\u200b\u4ee5\u4e0b\u200b\u884c\u200b</p> <pre><code>PYTHONPATH=\"$(dirname $0)/..\":$PYTHONPATH\n</code></pre>"},{"location":"get_started/overview/","title":"\u6982\u8ff0","text":"<p>\u200b\u6b22\u8fce\u200b\u6765\u5230\u200b MMagic\uff01 \u200b\u5728\u200b\u672c\u8282\u200b\u4e2d\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u4e86\u89e3\u200b</p> <ul> <li>MMagic\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f</li> <li>\u200b\u4e3a\u4ec0\u4e48\u200b\u8981\u200b\u4f7f\u7528\u200b MMagic\uff1f</li> <li>\u200b\u65b0\u624b\u5165\u95e8\u200b</li> <li>\u200b\u57fa\u7840\u6559\u7a0b\u200b</li> <li>\u200b\u8fdb\u9636\u200b\u6559\u7a0b\u200b</li> </ul>"},{"location":"get_started/overview/#mmagic","title":"MMagic \u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>MMagic (Multimodal Advanced, Generative, and Intelligent Creation) \u200b\u662f\u200b\u4e00\u4e2a\u200b\u4f9b\u200b\u4e13\u4e1a\u200b\u4eba\u5de5\u667a\u80fd\u200b\u7814\u7a76\u200b\u4eba\u5458\u200b\u548c\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u5de5\u7a0b\u5e08\u200b\u53bb\u200b\u5904\u7406\u200b\u3001\u200b\u7f16\u8f91\u200b\u548c\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\u4e0e\u200b\u89c6\u9891\u200b\u7684\u200b\u5f00\u6e90\u200b AIGC \u200b\u5de5\u5177\u7bb1\u200b\u3002</p> <p>MMagic \u200b\u5141\u8bb8\u200b\u7814\u7a76\u200b\u4eba\u5458\u200b\u548c\u200b\u5de5\u7a0b\u5e08\u200b\u4f7f\u7528\u200b\u6700\u200b\u5148\u8fdb\u200b\u7684\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff0c\u200b\u5e76\u4e14\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u8bad\u7ec3\u200b\u548c\u200b\u5f00\u53d1\u65b0\u200b\u7684\u200b\u5b9a\u5236\u200b\u6a21\u578b\u200b\u3002</p> <p>MMagic \u200b\u652f\u6301\u200b\u5404\u79cd\u200b\u57fa\u7840\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u65e0\u6761\u4ef6\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b (GANs)</li> <li>\u200b\u6761\u4ef6\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b (GANs)</li> <li>\u200b\u5185\u90e8\u200b\u5b66\u4e60\u200b</li> <li>\u200b\u6269\u6563\u200b\u6a21\u578b\u200b</li> <li>\u200b\u8fd8\u6709\u200b\u8bb8\u591a\u200b\u5176\u4ed6\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u5373\u5c06\u200b\u63a8\u51fa\u200b\uff01</li> </ul> <p>MMagic \u200b\u652f\u6301\u200b\u5404\u79cd\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u56fe\u6587\u200b\u751f\u6210\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u7ffb\u8bd1\u200b</li> <li>3D \u200b\u751f\u6210\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b</li> <li>\u200b\u89c6\u9891\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b</li> <li>\u200b\u89c6\u9891\u200b\u63d2\u200b\u5e27\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u8865\u5168\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u4fee\u590d\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u4e0a\u200b\u8272\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b</li> <li>\u200b\u8fd8\u6709\u200b\u8bb8\u591a\u200b\u5176\u4ed6\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5373\u5c06\u200b\u63a8\u51fa\u200b\uff01</li> </ul> <p></p>"},{"location":"get_started/overview/#mmagic_1","title":"\u4e3a\u4ec0\u4e48\u200b\u8981\u200b\u4f7f\u7528\u200b MMagic\uff1f","text":"<ul> <li>SOTA \u200b\u7b97\u6cd5\u200b</li> </ul> <p>MMagic \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5904\u7406\u200b\u3001\u200b\u7f16\u8f91\u200b\u3001\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\u548c\u200b\u89c6\u9891\u200b\u7684\u200b SOTA \u200b\u7b97\u6cd5\u200b\u3002</p> <ul> <li>\u200b\u5f3a\u6709\u529b\u200b\u4e14\u200b\u6d41\u884c\u200b\u7684\u200b\u5e94\u7528\u200b</li> </ul> <p>MMagic \u200b\u652f\u6301\u200b\u4e86\u200b\u6d41\u884c\u200b\u7684\u200b\u56fe\u50cf\u200b\u4fee\u590d\u200b\u3001\u200b\u56fe\u6587\u200b\u751f\u6210\u200b\u30013D\u200b\u751f\u6210\u200b\u3001\u200b\u56fe\u50cf\u200b\u4fee\u8865\u200b\u3001\u200b\u62a0\u200b\u56fe\u200b\u3001\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b\u548c\u200b\u751f\u6210\u200b\u7b49\u200b\u4efb\u52a1\u200b\u7684\u200b\u5e94\u7528\u200b\u3002\u200b\u7279\u522b\u200b\u662f\u200b MMagic \u200b\u652f\u6301\u200b\u4e86\u200b Stable Diffusion \u200b\u7684\u200b\u5fae\u8c03\u200b\u548c\u200b\u8bb8\u591a\u200b\u6fc0\u52a8\u4eba\u5fc3\u200b\u7684\u200b diffusion \u200b\u5e94\u7528\u200b\uff0c\u200b\u4f8b\u5982\u200b ControlNet \u200b\u52a8\u753b\u200b\u751f\u6210\u200b\u3002MMagic \u200b\u4e5f\u200b\u652f\u6301\u200b\u4e86\u200b GANs \u200b\u7684\u200b\u63d2\u503c\u200b\uff0c\u200b\u6295\u5f71\u200b\uff0c\u200b\u7f16\u8f91\u200b\u548c\u200b\u5176\u4ed6\u200b\u6d41\u884c\u200b\u7684\u200b\u5e94\u7528\u200b\u3002\u200b\u8bf7\u200b\u7acb\u5373\u200b\u5f00\u59cb\u200b\u4f60\u200b\u7684\u200b AIGC \u200b\u63a2\u7d22\u4e4b\u65c5\u200b\uff01</p> <ul> <li>\u200b\u9ad8\u6548\u200b\u7684\u200b\u6846\u67b6\u200b</li> </ul> <p>\u200b\u901a\u8fc7\u200b OpenMMLab 2.0 \u200b\u6846\u67b6\u200b\u7684\u200b MMEngine \u200b\u548c\u200b MMCV\uff0c MMagic \u200b\u5c06\u200b\u7f16\u8f91\u200b\u6846\u67b6\u200b\u5206\u89e3\u200b\u4e3a\u200b\u4e0d\u540c\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5e76\u4e14\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u7ec4\u5408\u200b\u4e0d\u540c\u200b\u7684\u200b\u6a21\u5757\u200b\u8f7b\u677e\u200b\u5730\u200b\u6784\u5efa\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u7f16\u8f91\u5668\u200b\u6a21\u578b\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u50cf\u200b\u642d\u5efa\u200b\u201c\u200b\u4e50\u9ad8\u200b\u201d\u200b\u4e00\u6837\u200b\u5b9a\u4e49\u200b\u8bad\u7ec3\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e30\u5bcc\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u548c\u200b\u7b56\u7565\u200b\u3002\u200b\u5728\u200b MMagic \u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b APIs \u200b\u5b8c\u5168\u200b\u63a7\u5236\u200b\u8bad\u7ec3\u200b\u6d41\u7a0b\u200b\u3002\u200b\u5f97\u76ca\u4e8e\u200b MMSeparateDistributedDataParallel, \u200b\u52a8\u6001\u200b\u6a21\u578b\u200b\u7ed3\u6784\u200b\u7684\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5b9e\u73b0\u200b\u3002</p>"},{"location":"get_started/overview/#_2","title":"\u65b0\u624b\u5165\u95e8","text":"<p>\u200b\u5b89\u88c5\u200b\u8bf4\u660e\u200b\u89c1\u200b\u5b89\u88c5\u200b\u3002</p>"},{"location":"get_started/overview/#_3","title":"\u57fa\u7840\u6559\u7a0b","text":"<p>\u200b\u5bf9\u4e8e\u200b\u521d\u5b66\u8005\u200b\uff0c\u200b\u6211\u4eec\u200b\u5efa\u8bae\u200b\u4ece\u200b \u200b\u57fa\u7840\u6559\u7a0b\u200b \u200b\u5b66\u4e60\u200b MMagic \u200b\u7684\u200b\u57fa\u672c\u200b\u7528\u6cd5\u200b\u3002</p>"},{"location":"get_started/overview/#_4","title":"\u8fdb\u9636\u200b\u6559\u7a0b","text":"<p>\u200b\u5bf9\u4e8e\u200b\u719f\u6089\u200b MMagic \u200b\u7684\u200b\u7528\u6237\u200b\uff0c\u200b\u53ef\u80fd\u200b\u60f3\u200b\u4e86\u89e3\u200b MMagic \u200b\u7684\u200b\u8fdb\u9636\u200b\u5b9e\u7528\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u6269\u5c55\u200b\u7b97\u6cd5\u200b\u5e93\u200b\uff0c\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u591a\u4e2a\u200b\u7b97\u6cd5\u200b\u5e93\u200b\u6846\u67b6\u200b\u7b49\u200b\u9ad8\u7ea7\u200b\u7528\u6cd5\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u8003\u200b\u8fdb\u9636\u200b\u6559\u7a0b\u200b\u3002</p>"},{"location":"get_started/overview/#_5","title":"\u5f00\u53d1\u200b\u6307\u5357","text":"<p>\u200b\u60f3\u8981\u200b\u4f7f\u7528\u200b MMagic \u200b\u8fdb\u884c\u200b\u6df1\u5ea6\u200b\u5f00\u53d1\u200b\u7684\u200b\u7528\u6237\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u5f00\u53d1\u200b\u6307\u5357\u200b\u3002</p>"},{"location":"get_started/quick_run/","title":"\u5feb\u901f\u200b\u8fd0\u884c","text":"<p>\u200b\u6210\u529f\u200b\u5b89\u88c5\u200bMMagic\u200b\u540e\u200b\uff0c\u200b\u73b0\u5728\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u73a9\u8f6c\u200bMMagic\u200b\u4e86\u200b\uff01\u200b\u5982\u679c\u200b\u60a8\u200b\u8981\u200b\u4ece\u200b\u6587\u672c\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200bMMagic\u200b\u7684\u200b\u51e0\u884c\u200b\u4ee3\u7801\u200b\uff01</p> <pre><code>from mmagic.apis import MMagicInferencer\nsd_inferencer = MMagicInferencer(model_name='stable_diffusion')\ntext_prompts = 'A panda is having dinner at KFC'\nresult_out_dir = 'output/sd_res.png'\nsd_inferencer.infer(text=text_prompts, result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u6216\u8005\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u3002</p> <pre><code>python demo/mmagic_inference_demo.py \\\n    --model-name stable_diffusion \\\n    --text \"A panda is having dinner at KFC\" \\\n    --result-out-dir ./output/sd_res.png\n</code></pre> <p>\u200b\u60a8\u200b\u5c06\u200b\u5728\u200b\u6587\u4ef6\u5939\u200b<code>output/</code>\u200b\u4e2d\u200b\u770b\u5230\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u56fe\u50cf\u200b<code>sd_res.png</code>\uff0c\u200b\u5176\u4e2d\u200b\u5305\u542b\u200b\u751f\u6210\u200b\u7684\u200b\u6837\u672c\u200b\u3002</p> <p>\u200b\u66f4\u200b\u91cd\u8981\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u8ba9\u200b\u8fd9\u4e9b\u200b\u7167\u7247\u200b\u66f4\u200b\u6e05\u6670\u200b\uff0cMMagic\u200b\u7684\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b\u53ea\u200b\u9700\u8981\u200b\u51e0\u884c\u200b\u4ee3\u7801\u200b\uff01</p> <pre><code>from mmagic.apis import MMagicInferencer\nconfig = 'configs/esrgan/esrgan_x4c64b23g32_1xb16-400k_div2k.py'\ncheckpoint = 'https://download.openmmlab.com/mmediting/restorers/esrgan/esrgan_x4c64b23g32_1x16_400k_div2k_20200508-f8ccaf3b.pth'\nimg_path = 'tests/data/image/lq/baboon_x4.png'\neditor = MMagicInferencer('esrgan', model_config=config, model_ckpt=checkpoint)\noutput = editor.infer(img=img_path,result_out_dir='output.png')\n</code></pre> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>output.png</code> \u200b\u4e2d\u200b\u67e5\u770b\u200b\u60a8\u200b\u60f3\u8981\u200b\u7684\u200b\u56fe\u7247\u200b\u3002</p>"},{"location":"howto/dataset/","title":"\u5982\u4f55\u200b\u81ea\u200b\u5b9a\u4e49\u6570\u636e\u200b\u96c6","text":"<p>\u200b\u672c\u200b\u6587\u6863\u200b\u5c06\u200b\u4ecb\u7ecd\u200b MMagic \u200b\u4e2d\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u7528\u6237\u200b\u5982\u4f55\u200b\u8bbe\u8ba1\u200b\u81ea\u200b\u5b9a\u4e49\u6570\u636e\u200b\u96c6\u200b\u3002</p> <ul> <li>\u200b\u5982\u4f55\u200b\u81ea\u200b\u5b9a\u4e49\u6570\u636e\u200b\u96c6\u200b</li> <li>\u200b\u652f\u6301\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u683c\u5f0f\u200b<ul> <li>BasicImageDataset</li> <li>BasicFramesDataset</li> <li>BasicConditonalDataset</li> <li>1. \u200b\u9010\u884c\u200b\u8bfb\u53d6\u200b\u7684\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u683c\u5f0f\u200b\uff08\u200b\u4f8b\u5982\u200b txt \u200b\u6587\u4ef6\u200b\uff09</li> <li>2. \u200b\u57fa\u4e8e\u200b\u5b57\u5178\u200b\u7684\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u683c\u5f0f\u200b\uff08\u200b\u4f8b\u5982\u200b json\uff09</li> <li>3. \u200b\u57fa\u4e8e\u200b\u6587\u4ef6\u5939\u200b\u7684\u200b\u6807\u6ce8\u200b\u683c\u5f0f\u200b\uff08\u200b\u65e0\u9700\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u200b\uff09</li> <li>ImageNet \u200b\u548c\u200b CIFAR10 \u200b\u6570\u636e\u200b\u96c6\u200b</li> <li>AdobeComp1kDataset</li> <li>GrowScaleImgDataset</li> <li>SinGANDataset</li> <li>PairedImageDataset</li> <li>UnpairedImageDataset</li> </ul> </li> <li>\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b<ul> <li>\u200b\u91cd\u590d\u200b\u6570\u636e\u200b\u96c6\u200b</li> </ul> </li> </ul>"},{"location":"howto/dataset/#_2","title":"\u652f\u6301\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u683c\u5f0f","text":"<p>\u200b\u5728\u200b MMagic \u200b\u4e2d\u200b\uff0c\u200b\u6240\u6709\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u90fd\u200b\u662f\u4ece\u200b <code>BaseDataset</code> \u200b\u7c7b\u200b\u7ee7\u627f\u200b\u800c\u6765\u200b\u7684\u200b\u3002 \u200b\u6bcf\u4e2a\u200b\u6570\u636e\u200b\u96c6\u90fd\u200b\u901a\u8fc7\u200b <code>load_data_list</code> \u200b\u65b9\u6cd5\u200b\u6765\u200b\u52a0\u8f7d\u200b\u6570\u636e\u200b\u4fe1\u606f\u200b\u5217\u8868\u200b\uff08\u200b\u4f8b\u5982\u200b\u6570\u636e\u200b\u6240\u5728\u200b\u7684\u200b\u8def\u5f84\u200b\uff09\u3002 \u200b\u5728\u200b <code>__getitem__</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u8c03\u7528\u200b <code>prepare_data</code> \u200b\u6765\u200b\u83b7\u53d6\u200b\u524d\u200b\u5904\u7406\u200b\u540e\u200b\u7684\u200b\u6570\u636e\u200b\u3002 \u200b\u5728\u200b <code>prepare_data</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u6d41\u7a0b\u200b\u5305\u62ec\u200b\u5982\u4e0b\u200b\u6b65\u9aa4\u200b\uff1a</p> <ol> <li>\u200b\u901a\u8fc7\u200b\u4f20\u5165\u200b\u7684\u200b\u7d22\u5f15\u200b\u6765\u200b\u83b7\u53d6\u6570\u636e\u200b\u4fe1\u606f\u200b\uff0c\u200b\u7531\u200b <code>get_data_info</code> \u200b\u65b9\u6cd5\u200b\u5b9e\u73b0\u200b\u3002</li> <li>\u200b\u5bf9\u200b\u6570\u636e\u200b\u5e94\u7528\u200b\u6570\u636e\u200b\u8f6c\u6362\u200b\uff0c\u200b\u7531\u200b <code>pipeline</code> \u200b\u65b9\u6cd5\u200b\u5b9e\u73b0\u200b\u3002</li> </ol>"},{"location":"howto/dataset/#basicimagedataset","title":"BasicImageDataset","text":"<p>BasicImageDataset <code>mmagic.datasets.BasicImageDataset</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u901a\u7528\u200b\u56fe\u7247\u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u662f\u200b\u4e3a\u4e86\u200b\u5e95\u5c42\u200b\u89c6\u89c9\u200b\u4efb\u52a1\u200b\u800c\u200b\u8bbe\u8ba1\u200b\u7684\u200b\uff0c\u200b\u6bd4\u5982\u200b\u56fe\u50cf\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b\uff0c\u200b\u56fe\u50cf\u200b\u4fee\u590d\u200b\u548c\u200b\u65e0\u6761\u4ef6\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b\u3002\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u662f\u5426\u200b\u4f7f\u7528\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u5982\u200b\u4f7f\u7528\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6807\u6ce8\u200b\u7684\u200b\u683c\u5f0f\u200b\u53ef\u4ee5\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>   Case 1 (CelebA-HQ):\n\n       000001.png\n       000002.png\n\n   Case 2 (DIV2K):\n\n       0001_s001.png (480,480,3)\n       0001_s002.png (480,480,3)\n       0001_s003.png (480,480,3)\n       0002_s001.png (480,480,3)\n       0002_s002.png (480,480,3)\n\n   Case 3 (Vimeo90k):\n\n       00001/0266 (256, 448, 3)\n       00001/0268 (256, 448, 3)\n</code></pre> <p>\u200b\u4e0b\u9762\u200b\u6211\u4eec\u200b\u7ed9\u51fa\u200b\u51e0\u4e2a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b <code>BasicImageDataset</code> \u200b\u7684\u200b\u793a\u4f8b\u200b\u3002\u200b\u5047\u5b9a\u200b\u6587\u4ef6\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>mmagic (root)\n\u251c\u2500\u2500 mmagic\n\u251c\u2500\u2500 tools\n\u251c\u2500\u2500 configs\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 DIV2K\n\u2502   \u2502   \u251c\u2500\u2500 DIV2K_train_HR\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 image.png\n\u2502   \u2502   \u251c\u2500\u2500 DIV2K_train_LR_bicubic\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 X2\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 X3\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 X4\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 image_x4.png\n\u2502   \u2502   \u251c\u2500\u2500 DIV2K_valid_HR\n\u2502   \u2502   \u251c\u2500\u2500 DIV2K_valid_LR_bicubic\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 X2\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 X3\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 X4\n\u2502   \u251c\u2500\u2500 places\n\u2502   \u2502   \u251c\u2500\u2500 test_set\n\u2502   \u2502   \u251c\u2500\u2500 train_set\n|   |   \u251c\u2500\u2500 meta\n|   |   |    \u251c\u2500\u2500 Places365_train.txt\n|   |   |    \u251c\u2500\u2500 Places365_val.txt\n|   \u251c\u2500\u2500 celebahq\n\u2502   \u2502   \u251c\u2500\u2500 imgs_1024\n</code></pre> <p>\u200b\u6309\u7167\u200b\u4ee5\u4e0a\u200b\u7684\u200b\u6587\u4ef6\u200b\u7ed3\u6784\u200b\u7ed9\u51fa\u200b 3 \u200b\u4e2a\u200b\u793a\u4f8b\u200b\u3002</p> <p>\u200b\u793a\u4f8b\u200b 1: \u200b\u52a0\u8f7d\u200b <code>DIV2K</code> \u200b\u6570\u636e\u200b\u96c6\u6765\u200b\u8bad\u7ec3\u200b\u4e00\u4e2a\u200b <code>SISR</code> \u200b\u6a21\u578b\u200b\u3002</p> <pre><code>   dataset = BasicImageDataset(\n       ann_file='',\n       metainfo=dict(\n           dataset_type='div2k',\n           task_name='sisr'),\n       data_root='data/DIV2K',\n       data_prefix=dict(\n           gt='DIV2K_train_HR', img='DIV2K_train_LR_bicubic/X4'),\n       filename_tmpl=dict(img='{}_x4', gt='{}'),\n       pipeline=[])\n</code></pre> <p>\u200b\u793a\u4f8b\u200b 2: \u200b\u52a0\u8f7d\u200b <code>places</code> \u200b\u6570\u636e\u200b\u96c6\u6765\u200b\u8bad\u7ec3\u200b\u4e00\u4e2a\u200b <code>inpainting</code> \u200b\u6a21\u578b\u200b.</p> <pre><code>   dataset = BasicImageDataset(\n       ann_file='meta/Places365_train.txt',\n       metainfo=dict(\n           dataset_type='places365',\n           task_name='inpainting'),\n       data_root='data/places',\n       data_prefix=dict(gt='train_set'),\n       pipeline=[])\n</code></pre> <p>\u200b\u793a\u4f8b\u200b 3: \u200b\u52a0\u8f7d\u200b <code>CelebA-HQ</code> \u200b\u6570\u636e\u200b\u96c6\u6765\u200b\u8bad\u7ec3\u200b\u4e00\u4e2a\u200b <code>PGGAN</code> \u200b\u6a21\u578b\u200b.</p> <pre><code>dataset = BasicImageDataset(\n        pipeline=[],\n        data_root='./data/celebahq/imgs_1024')\n</code></pre>"},{"location":"howto/dataset/#basicframesdataset","title":"BasicFramesDataset","text":"<p>BasicFramesDataset <code>mmagic.datasets.BasicFramesDataset</code> \u200b\u4e5f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u901a\u7528\u200b\u56fe\u7247\u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u4e3a\u200b\u89c6\u9891\u200b\u5e27\u200b\u7684\u200b\u5e95\u5c42\u200b\u89c6\u89c9\u200b\u4efb\u52a1\u200b\u800c\u200b\u8bbe\u8ba1\u200b\u7684\u200b\uff0c\u200b\u6bd4\u5982\u200b\u89c6\u9891\u200b\u7684\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b\u548c\u200b\u89c6\u9891\u200b\u5e27\u200b\u63d2\u503c\u200b\u3002 \u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u662f\u5426\u200b\u4f7f\u7528\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u5982\u200b\u4f7f\u7528\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u200b, \u200b\u6807\u6ce8\u200b\u7684\u200b\u683c\u5f0f\u200b\u793a\u4f8b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>Case 1 (Vid4):\n\n   calendar 41\n   city 34\n   foliage 49\n   walk 47\n\nCase 2 (REDS):\n\n   000/00000000.png (720, 1280, 3)\n   000/00000001.png (720, 1280, 3)\n\nCase 3 (Vimeo90k):\n\n   00001/0266 (256, 448, 3)\n   00001/0268 (256, 448, 3)\n</code></pre> <p>\u200b\u5047\u5b9a\u200b\u6587\u4ef6\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>mmagic (root)\n\u251c\u2500\u2500 mmagic\n\u251c\u2500\u2500 tools\n\u251c\u2500\u2500 configs\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 Vid4\n\u2502   \u2502   \u251c\u2500\u2500 BIx4\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 city\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 img1.png\n\u2502   \u2502   \u251c\u2500\u2500 GT\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 city\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 img1.png\n\u2502   \u2502   \u251c\u2500\u2500 meta_info_Vid4_GT.txt\n\u2502   \u251c\u2500\u2500 vimeo-triplet\n\u2502   \u2502   \u251c\u2500\u2500 sequences\n|   |   |   \u251c\u2500\u2500 00001\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 0389\n\u2502   \u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 img1.png\n\u2502   \u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 img2.png\n\u2502   \u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 img3.png\n\u2502   \u2502   \u251c\u2500\u2500 tri_trainlist.txt\n</code></pre> <p>\u200b\u6309\u7167\u200b\u4ee5\u4e0a\u200b\u7684\u200b\u6587\u4ef6\u200b\u7ed3\u6784\u200b\u7ed9\u51fa\u200b\u4e24\u4e2a\u200b\u793a\u4f8b\u200b\u3002</p> <p>\u200b\u793a\u4f8b\u200b 1: \u200b\u52a0\u8f7d\u200b <code>Vid4</code> \u200b\u6570\u636e\u200b\u96c6\u6765\u200b\u8bad\u7ec3\u200b\u4e00\u4e2a\u200b <code>VSR</code> \u200b\u6a21\u578b\u200b.</p> <pre><code>dataset = BasicFramesDataset(\n    ann_file='meta_info_Vid4_GT.txt',\n    metainfo=dict(dataset_type='vid4', task_name='vsr'),\n    data_root='data/Vid4',\n    data_prefix=dict(img='BIx4', gt='GT'),\n    pipeline=[],\n    depth=2,\n    num_input_frames=5)\n</code></pre> <p>\u200b\u793a\u4f8b\u200b 2: \u200b\u52a0\u8f7d\u200b <code>Vimeo90k</code> \u200b\u6570\u636e\u200b\u96c6\u6765\u200b\u8bad\u7ec3\u200b\u4e00\u4e2a\u200b <code>VFI</code> \u200b\u6a21\u578b\u200b.</p> <pre><code>dataset = BasicFramesDataset(\n    ann_file='tri_trainlist.txt',\n    metainfo=dict(dataset_type='vimeo90k', task_name='vfi'),\n    data_root='data/vimeo-triplet',\n    data_prefix=dict(img='sequences', gt='sequences'),\n    pipeline=[],\n    depth=2,\n    load_frames_list=dict(\n        img=['img1.png', 'img3.png'], gt=['img2.png']))\n</code></pre>"},{"location":"howto/dataset/#basicconditonaldataset","title":"BasicConditonalDataset","text":"<p>BasicConditonalDataset <code>mmagic.datasets.BasicConditonalDataset</code> \u200b\u662f\u200b\u4e3a\u200b\u6761\u4ef6\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b\u800c\u200b\u8bbe\u8ba1\u200b\u7684\u200b\uff08\u200b\u4f8b\u5982\u200b <code>SAGAN</code>\u3001<code>BigGAN</code>\uff09\u3002\u200b\u8be5\u200b\u6570\u636e\u200b\u96c6\u200b\u652f\u6301\u200b\u4e3a\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u6807\u7b7e\u200b\u3002 <code>BasicConditonalDataset</code> \u200b\u652f\u6301\u200b\u5982\u4e0b\u200b 3 \u200b\u79cd\u200b\u6807\u6ce8\u200b\u683c\u5f0f\u200b\u3002</p>"},{"location":"howto/dataset/#1-txt","title":"1. \u200b\u9010\u884c\u200b\u8bfb\u53d6\u200b\u7684\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u683c\u5f0f\u200b\uff08\u200b\u4f8b\u5982\u200b txt \u200b\u6587\u4ef6\u200b\uff09","text":"<p>\u200b\u6837\u672c\u200b\u6587\u4ef6\u200b\u7ed3\u6784\u200b\uff1a</p> <pre><code>    data_prefix/\n    \u251c\u2500\u2500 folder_1\n    \u2502   \u251c\u2500\u2500 xxx.png\n    \u2502   \u251c\u2500\u2500 xxy.png\n    \u2502   \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 folder_2\n        \u251c\u2500\u2500 123.png\n        \u251c\u2500\u2500 nsdf3.png\n        \u2514\u2500\u2500 ...\n</code></pre> <p>\u200b\u6837\u672c\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u683c\u5f0f\u200b\uff08\u200b\u7b2c\u4e00\u5217\u200b\u662f\u200b\u56fe\u50cf\u200b\u7684\u200b\u8def\u5f84\u200b\uff0c\u200b\u7b2c\u4e8c\u5217\u200b\u662f\u200b\u7c7b\u522b\u200b\u7684\u200b\u7d22\u5f15\u200b\uff09</p> <pre><code>    folder_1/xxx.png 0\n    folder_1/xxy.png 1\n    folder_2/123.png 5\n    folder_2/nsdf3.png 3\n    ...\n</code></pre> <p><code>ImageNet</code> \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u914d\u7f6e\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>dataset=dict(\n    type='BasicConditionalDataset,\n    data_root='./data/imagenet/',\n    ann_file='meta/train.txt',\n    data_prefix='train',\n    pipeline=train_pipeline),\n</code></pre>"},{"location":"howto/dataset/#2-json","title":"2. \u200b\u57fa\u4e8e\u200b\u5b57\u5178\u200b\u7684\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u683c\u5f0f\u200b\uff08\u200b\u4f8b\u5982\u200b json\uff09","text":"<p>\u200b\u6837\u672c\u200b\u6587\u4ef6\u200b\u7ed3\u6784\u200b\uff1a</p> <pre><code>    data_prefix/\n    \u251c\u2500\u2500 folder_1\n    \u2502   \u251c\u2500\u2500 xxx.png\n    \u2502   \u251c\u2500\u2500 xxy.png\n    \u2502   \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 folder_2\n        \u251c\u2500\u2500 123.png\n        \u251c\u2500\u2500 nsdf3.png\n        \u2514\u2500\u2500 ...\n</code></pre> <p>\u200b\u6837\u672c\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u683c\u5f0f\u200b\uff08\u200b\u952e\u4e3a\u200b\u56fe\u50cf\u200b\u7684\u200b\u8def\u5f84\u200b\uff0c\u200b\u503c\u4e3a\u200b\u6807\u7b7e\u200b\uff09\u3002</p> <pre><code>    {\n        \"folder_1/xxx.png\": [1, 2, 3, 4],\n        \"folder_1/xxy.png\": [2, 4, 1, 0],\n        \"folder_2/123.png\": [0, 9, 8, 1],\n        \"folder_2/nsdf3.png\", [1, 0, 0, 2],\n        ...\n    }\n</code></pre> <p><code>EG3D (shapenet-car)</code> \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u914d\u7f6e\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>dataset = dict(\n    type='BasicConditionalDataset',\n    data_root='./data/eg3d/shapenet-car',\n    ann_file='annotation.json',\n    pipeline=train_pipeline)\n</code></pre> <p>\u200b\u5728\u200b\u8fd9\u79cd\u200b\u7c7b\u578b\u200b\u7684\u200b\u6ce8\u91ca\u200b\u4e2d\u200b\uff0c\u200b\u6807\u7b7e\u200b\u53ef\u4ee5\u200b\u662f\u200b\u4efb\u4f55\u200b\u7c7b\u578b\u200b\uff0c\u200b\u4e0d\u4ec5\u200b\u9650\u4e8e\u200b\u7d22\u5f15\u200b\u3002</p>"},{"location":"howto/dataset/#3","title":"3. \u200b\u57fa\u4e8e\u200b\u6587\u4ef6\u5939\u200b\u7684\u200b\u6807\u6ce8\u200b\u683c\u5f0f\u200b\uff08\u200b\u65e0\u9700\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u200b\uff09","text":"<p>\u200b\u6837\u672c\u200b\u6587\u4ef6\u200b\u7ed3\u6784\u200b\uff1a</p> <pre><code>    data_prefix/\n    \u251c\u2500\u2500 class_x\n    \u2502   \u251c\u2500\u2500 xxx.png\n    \u2502   \u251c\u2500\u2500 xxy.png\n    \u2502   \u2514\u2500\u2500 ...\n    \u2502       \u2514\u2500\u2500 xxz.png\n    \u2514\u2500\u2500 class_y\n        \u251c\u2500\u2500 123.png\n        \u251c\u2500\u2500 nsdf3.png\n        \u251c\u2500\u2500 ...\n        \u2514\u2500\u2500 asd932_.png\n</code></pre> <p>\u200b\u5982\u679c\u200b\u5728\u200b\u914d\u7f6e\u200b\u7684\u200b <code>ann_file</code> \u200b\u4e2d\u200b\u6307\u5b9a\u200b\u4e86\u200b\u6807\u6ce8\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5219\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e0a\u9762\u200b\u7684\u200b\u524d\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u751f\u6210\u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u5426\u5219\u200b\u5c06\u200b\u5c1d\u8bd5\u200b\u4f7f\u7528\u200b\u7b2c\u4e09\u79cd\u200b\u65b9\u5f0f\u200b\u3002</p>"},{"location":"howto/dataset/#imagenet-cifar10","title":"ImageNet \u200b\u548c\u200b CIFAR10 \u200b\u6570\u636e\u200b\u96c6","text":"<p>ImageNet \u200b\u6570\u636e\u200b\u96c6\u200b <code>mmagic.datasets.ImageNet</code> \u200b\u548c\u200b CIFAR10 \u200b\u6570\u636e\u200b\u96c6\u200b<code>mmagic.datasets.CIFAR10</code> \u200b\u662f\u200b\u4e3a\u200b <code>ImageNet</code> \u200b\u548c\u200b <code>CIFAR10</code> \u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u6570\u636e\u200b\u96c6\u800c\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u3002 \u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u6570\u636e\u200b\u96c6\u90fd\u200b\u662f\u200b\u57fa\u4e8e\u200b <code>BasicConditionalDataset</code> \u200b\u5c01\u88c5\u200b\u7684\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5b83\u4eec\u200b\u6765\u200b\u8f7b\u677e\u200b\u52a0\u8f7d\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u6570\u636e\u200b\u3002</p> <p><code>ImageNet</code> \u200b\u7684\u200b\u914d\u7f6e\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>pipeline = [\n    dict(type='LoadImageFromFile', key='img'),\n    dict(type='RandomCropLongEdge', keys=['img']),\n    dict(type='Resize', scale=(128, 128), keys=['img'], backend='pillow'),\n    dict(type='Flip', keys=['img'], flip_ratio=0.5, direction='horizontal'),\n    dict(type='PackInputs')\n]\n\ndataset=dict(\n    type='ImageNet',\n    data_root='./data/imagenet/',\n    ann_file='meta/train.txt',\n    data_prefix='train',\n    pipeline=pipeline),\n</code></pre> <p><code>CIFAR10</code> \u200b\u7684\u200b\u914d\u7f6e\u200b\u793a\u4f8b\u200b:</p> <pre><code>pipeline = [dict(type='PackInputs')]\n\ndataset = dict(\n    type='CIFAR10',\n    data_root='./data',\n    data_prefix='cifar10',\n    test_mode=False,\n    pipeline=pipeline)\n</code></pre>"},{"location":"howto/dataset/#adobecomp1kdataset","title":"AdobeComp1kDataset","text":"<p>AdobeComp1kDataset <code>mmagic.datasets.AdobeComp1kDataset</code> \u200b\u662f\u200b\u4e3a\u200b <code>Adobe composition-1k</code> \u200b\u6570\u636e\u200b\u96c6\u800c\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u3002</p> <p>\u200b\u8be5\u200b\u6570\u636e\u200b\u96c6\u200b\u52a0\u8f7d\u200b\uff08alpha, fg, bg\uff09\u200b\u6570\u636e\u200b\uff0c\u200b\u5e76\u200b\u5bf9\u200b\u6570\u636e\u200b\u6267\u884c\u200b\u6307\u5b9a\u200b\u7684\u200b\u53d8\u6362\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>pipeline</code> \u200b\u4e2d\u200b\u6307\u5b9a\u200b\u5728\u7ebf\u200b\u5408\u6210\u200b\u56fe\u50cf\u200b\u6216\u200b\u52a0\u8f7d\u200b\u79bb\u7ebf\u200b\u5df2\u200b\u5408\u6210\u200b\u7684\u200b\u56fe\u50cf\u200b\u3002</p> <p>\u200b\u5728\u7ebf\u200b\u5408\u6210\u200b <code>comp-1k</code> \u200b\u6570\u636e\u200b\u96c6\u200b\u793a\u4f8b\u200b:</p> <pre><code>[\n   {\n       \"alpha\": 'alpha/000.png',\n       \"fg\": 'fg/000.png',\n       \"bg\": 'bg/000.png'\n   },\n   {\n       \"alpha\": 'alpha/001.png',\n       \"fg\": 'fg/001.png',\n       \"bg\": 'bg/001.png'\n   },\n]\n</code></pre> <p>\u200b\u79bb\u7ebf\u200b\u5408\u6210\u200b <code>comp-1k</code> \u200b\u6570\u636e\u200b\u96c6\u200b\u793a\u4f8b\u200b:</p> <pre><code>[\n  {\n      \"alpha\": 'alpha/000.png',\n      \"merged\": 'merged/000.png',\n      \"fg\": 'fg/000.png',\n      \"bg\": 'bg/000.png'\n  },\n  {\n      \"alpha\": 'alpha/001.png',\n      \"merged\": 'merged/001.png',\n      \"fg\": 'fg/001.png',\n      \"bg\": 'bg/001.png'\n  },\n]\n</code></pre>"},{"location":"howto/dataset/#growscaleimgdataset","title":"GrowScaleImgDataset","text":"<p><code>GrowScaleImgDataset</code> \u200b\u662f\u200b\u4e3a\u4e86\u200b\u52a8\u6001\u200b GAN \u200b\u6a21\u578b\u200b\uff08\u200b\u4f8b\u5982\u200b <code>PGGAN</code> \u200b\u548c\u200b <code>StyleGANv1</code>\uff09\u200b\u800c\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u3002 \u200b\u5728\u200b\u8fd9\u4e2a\u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u652f\u6301\u200b\u5728\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u5207\u6362\u200b\u6570\u636e\u200b\u6839\u76ee\u5f55\u200b\uff0c\u200b\u6765\u200b\u52a0\u8f7d\u200b\u4e0d\u540c\u200b\u5206\u8fa8\u7387\u200b\u7684\u200b\u8bad\u7ec3\u200b\u56fe\u50cf\u200b\u3002 \u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u662f\u200b\u901a\u8fc7\u200b <code>GrowScaleImgDataset.update_annotations</code> \u200b\u65b9\u6cd5\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u7531\u200b <code>PGGANFetchDataHook.before_train_iter</code> \u200b\u8c03\u7528\u200b\u3002</p> <pre><code>def update_annotations(self, curr_scale):\n    # \u200b\u786e\u5b9a\u200b\u662f\u5426\u200b\u9700\u8981\u200b\u66f4\u65b0\u200b\u6570\u636e\u200b\u6839\u76ee\u5f55\u200b\n    if curr_scale == self._actual_curr_scale:\n        return False\n\n    # \u200b\u6309\u200b\u56fe\u50cf\u200b\u5206\u8fa8\u7387\u200b\uff08\u200b\u5c3a\u5ea6\u200b\uff09\u200b\u63d0\u53d6\u200b\u65b0\u200b\u7684\u200b\u6570\u636e\u200b\u6839\u76ee\u5f55\u200b\n    for scale in self._img_scales:\n        if curr_scale &lt;= scale:\n            self._curr_scale = scale\n            break\n        if scale == self._img_scales[-1]:\n            assert RuntimeError(\n                f'Cannot find a suitable scale for {curr_scale}')\n    self._actual_curr_scale = curr_scale\n    self.data_root = self.data_roots[str(self._curr_scale)]\n\n    # \u200b\u4f7f\u7528\u200b\u65b0\u200b\u7684\u200b\u6570\u636e\u200b\u6839\u76ee\u5f55\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u6570\u636e\u200b\u5217\u8868\u200b\n    self.load_data_list()\n\n    # print basic dataset information to check the validity\n    print_log('Update Dataset: ' + repr(self), 'current')\n    return True\n</code></pre>"},{"location":"howto/dataset/#singandataset","title":"SinGANDataset","text":"<p><code>SinGANDataset</code> \u200b\u662f\u200b\u4e3a\u200b <code>SinGAN</code> \u200b\u6a21\u578b\u200b\u8bad\u7ec3\u200b\u800c\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u3002\u200b\u5728\u200b <code>SinGAN</code> \u200b\u7684\u200b\u8bad\u7ec3\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e0d\u4f1a\u200b\u53bb\u200b\u8fed\u4ee3\u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u7684\u200b\u56fe\u50cf\u200b\uff0c\u200b\u800c\u662f\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u4e00\u81f4\u200b\u7684\u200b\u9884\u5904\u7406\u200b\u56fe\u50cf\u200b\u5b57\u5178\u200b\u3002 \u200b\u7531\u4e8e\u200b\u4e0d\u200b\u9700\u8981\u200b\u6839\u636e\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u7d22\u5f15\u200b\u52a0\u8f7d\u200b\u76f8\u5e94\u200b\u7684\u200b\u56fe\u50cf\u200b\u6570\u636e\u200b\uff0c\u200b\u6211\u4eec\u200b\u7ed5\u8fc7\u200b\u4e86\u200b <code>BaseDataset</code> \u200b\u7684\u200b\u9ed8\u8ba4\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u903b\u8f91\u200b\u3002</p> <pre><code>def load_data_list(self, min_size, max_size, scale_factor_init):\n    # \u200b\u52a0\u8f7d\u200b\u5355\u5f20\u200b\u56fe\u50cf\u200b\n    real = mmcv.imread(self.data_root)\n    self.reals, self.scale_factor, self.stop_scale = create_real_pyramid(\n        real, min_size, max_size, scale_factor_init)\n\n    self.data_dict = {}\n\n    # \u200b\u751f\u6210\u200b\u591a\u200b\u5c3a\u5ea6\u200b\u56fe\u50cf\u200b\n    for i, real in enumerate(self.reals):\n        self.data_dict[f'real_scale{i}'] = real\n\n    self.data_dict['input_sample'] = np.zeros_like(\n        self.data_dict['real_scale0']).astype(np.float32)\n\ndef __getitem__(self, index):\n    # \u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\u8f6c\u6362\u200b\u8fc7\u200b\u7684\u200b\u6570\u636e\u200b\u5b57\u5178\u200b\n    return self.pipeline(self.data_dict)\n</code></pre>"},{"location":"howto/dataset/#pairedimagedataset","title":"PairedImageDataset","text":"<p><code>PairedImageDataset</code> \u200b\u4e13\u200b\u4e3a\u200b\u9700\u8981\u200b\u6210\u200b\u5bf9\u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u7684\u200b\u56fe\u50cf\u200b\u8f6c\u6362\u200b\u6a21\u578b\u200b\uff08\u200b\u4f8b\u5982\u200b <code>Pix2Pix</code>\uff09\u200b\u8bbe\u8ba1\u200b\u3002</p> <p>\u200b\u76ee\u5f55\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6bcf\u4e2a\u200b\u56fe\u50cf\u6587\u4ef6\u200b\u90fd\u200b\u662f\u200b\u56fe\u50cf\u200b\u5bf9\u200b\u7684\u200b\u62fc\u63a5\u200b\u3002</p> <pre><code>./data/dataset_name/\n\u251c\u2500\u2500 test\n\u2502   \u2514\u2500\u2500 XXX.jpg\n\u2514\u2500\u2500 train\n    \u2514\u2500\u2500 XXX.jpg\n</code></pre> <p>\u200b\u5728\u200b <code>PairedImageDataset</code> \u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5728\u200b <code>load_data_list</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u626b\u63cf\u200b\u6587\u4ef6\u200b\u5217\u8868\u200b\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u8def\u5f84\u200b\u4fdd\u5b58\u200b\u5728\u200b <code>pair_path</code> \u200b\u5b57\u6bb5\u200b\u4e2d\u200b\uff0c\u200b\u4ee5\u200b\u9002\u914d\u200b <code>LoadPairedImageFromFile</code> \u200b\u4e2d\u200b\u7684\u200b\u8f6c\u6362\u200b\u3002</p> <pre><code>def load_data_list(self):\n    data_infos = []\n    pair_paths = sorted(self.scan_folder(self.data_root))\n    for pair_path in pair_paths:\n        # save path in the specific field\n        data_infos.append(dict(pair_path=pair_path))\n\n    return data_infos\n</code></pre>"},{"location":"howto/dataset/#unpairedimagedataset","title":"UnpairedImageDataset","text":"<p><code>UnpairedImageDataset</code> \u200b\u662f\u200b\u4e13\u4e3a\u200b\u4e0d\u200b\u9700\u8981\u200b\u6210\u200b\u5bf9\u200b\u6570\u636e\u200b\u7684\u200b\u56fe\u50cf\u200b\u8f6c\u6362\u200b\u6a21\u578b\u200b\uff08\u200b\u4f8b\u5982\u200b <code>CycleGAN</code>\uff09\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u3002</p> <p>\u200b\u76ee\u5f55\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>./data/dataset_name/\n\u251c\u2500\u2500 testA\n\u2502   \u2514\u2500\u2500 XXX.jpg\n\u251c\u2500\u2500 testB\n\u2502   \u2514\u2500\u2500 XXX.jpg\n\u251c\u2500\u2500 trainA\n\u2502   \u2514\u2500\u2500 XXX.jpg\n\u2514\u2500\u2500 trainB\n    \u2514\u2500\u2500 XXX.jpg\n</code></pre> <p>\u200b\u5728\u200b\u8be5\u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u91cd\u8f7d\u200b\u4e86\u200b <code>__getitem__</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u5728\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u968f\u673a\u200b\u7684\u200b\u56fe\u50cf\u200b\u5bf9\u200b\u3002</p> <pre><code>def __getitem__(self, idx):\n    if not self.test_mode:\n        return self.prepare_train_data(idx)\n\n    return self.prepare_test_data(idx)\n\ndef prepare_train_data(self, idx):\n    img_a_path = self.data_infos_a[idx % self.len_a]['path']\n    idx_b = np.random.randint(0, self.len_b)\n    img_b_path = self.data_infos_b[idx_b]['path']\n    results = dict()\n    results[f'img_{self.domain_a}_path'] = img_a_path\n    results[f'img_{self.domain_b}_path'] = img_b_path\n    return self.pipeline(results)\n\ndef prepare_test_data(self, idx):\n    img_a_path = self.data_infos_a[idx % self.len_a]['path']\n    img_b_path = self.data_infos_b[idx % self.len_b]['path']\n    results = dict()\n    results[f'img_{self.domain_a}_path'] = img_a_path\n    results[f'img_{self.domain_b}_path'] = img_b_path\n    return self.pipeline(results)\n</code></pre>"},{"location":"howto/dataset/#_3","title":"\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6570\u636e\u200b\u96c6","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u9700\u8981\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u5e95\u5c42\u200b CV \u200b\u4efb\u52a1\u200b\uff08\u200b\u4f8b\u5982\u200b\u53bb\u200b\u566a\u200b\u3001\u200b\u53bb\u200b\u96e8\u200b\u3001\u200b\u53bb\u200b\u96fe\u200b\u548c\u200b\u53bb\u200b\u53cd\u5c04\u200b\uff09\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u6216\u8005\u200b\u73b0\u6709\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u683c\u5f0f\u200b\u4e0d\u200b\u7b26\u5408\u200b\u60a8\u200b\u7684\u200b\u9700\u6c42\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u65b0\u200b\u7684\u200b\u6570\u636e\u683c\u5f0f\u200b\u91cd\u65b0\u200b\u7ec4\u7ec7\u200b\u6210\u200b\u73b0\u6709\u200b\u7684\u200b\u683c\u5f0f\u200b\uff0c\u200b\u6216\u8005\u200b\u5728\u200b <code>mmagic/datasets</code> \u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u6765\u200b\u52a0\u8f7d\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u4ece\u200b\u73b0\u6709\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u57fa\u7c7b\u200b\u4e2d\u200b\u7ee7\u627f\u200b\uff08\u200b\u4f8b\u5982\u200b <code>BasicImageDataset</code> \u200b\u548c\u200b <code>BasicFramesDataset</code>\uff09\u200b\u4f1a\u200b\u6bd4\u8f83\u200b\u5bb9\u6613\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u3002</p> <p>\u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7ee7\u627f\u200b\u81ea\u200b BaseDataset \u200b\u7684\u200b\u65b0\u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b\u5b9a\u4e49\u200b\u5728\u200b MMEngine \u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u57fa\u7c7b\u200b\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u89c6\u9891\u200b\u5e27\u200b\u63d2\u503c\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>from .basic_frames_dataset import BasicFramesDataset\nfrom mmagic.registry import DATASETS\n\n\n@DATASETS.register_module()\nclass NewVFIDataset(BasicFramesDataset):\n    \"\"\"Introduce the dataset\n\n    Examples of file structure.\n\n    Args:\n        pipeline (list[dict | callable]): A sequence of data transformations.\n        folder (str | :obj:`Path`): Path to the folder.\n        ann_file (str | :obj:`Path`): Path to the annotation file.\n        test_mode (bool): Store `True` when building test dataset.\n            Default: `False`.\n    \"\"\"\n\n    def __init__(self, ann_file, metainfo, data_root, data_prefix,\n                    pipeline, test_mode=False):\n        super().__init__(ann_file, metainfo, data_root, data_prefix,\n                            pipeline, test_mode)\n        self.data_infos = self.load_annotations()\n\n    def load_annotations(self):\n        \"\"\"Load annoations for the dataset.\n\n        Returns:\n            list[dict]: A list of dicts for paired paths and other information.\n        \"\"\"\n        data_infos = []\n        ...\n        return data_infos\n</code></pre> <p>\u200b\u6b22\u8fce\u200b\u63d0\u4ea4\u200b\u65b0\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u7c7b\u200b\u5230\u200b MMagic</p>"},{"location":"howto/dataset/#_4","title":"\u91cd\u590d\u200b\u6570\u636e\u200b\u96c6","text":"<p>\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b RepeatDataset \u200b\u4f5c\u4e3a\u200b\u5305\u88c5\u200b\u5668\u6765\u200b\u91cd\u590d\u200b\u6570\u636e\u200b\u96c6\u200b\u3002 \u200b\u4f8b\u5982\u200b\uff0c\u200b\u5047\u8bbe\u200b\u539f\u59cb\u6570\u636e\u200b\u96c6\u662f\u200b <code>Dataset_A</code>\uff0c\u200b\u4e3a\u4e86\u200b\u91cd\u590d\u200b\u5b83\u200b\uff0c\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u5e94\u8be5\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>dataset_A_train = dict(\n        type='RepeatDataset',\n        times=N,\n        dataset=dict(  # This is the original config of Dataset_A\n            type='Dataset_A',\n            ...\n            pipeline=train_pipeline\n        )\n    )\n</code></pre> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b MMEngine \u200b\u4e2d\u200b\u7684\u200b\u6559\u7a0b\u200b\u3002</p>"},{"location":"howto/losses/","title":"\u5982\u4f55\u200b\u8bbe\u8ba1\u200b\u81ea\u5df1\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570","text":"<p><code>losses</code> \u200b\u5728\u200b <code>MMagic</code> \u200b\u4e2d\u200b\u6ce8\u518c\u200b\u4e3a\u200b <code>LOSSES</code>\u3002 \u200b\u5728\u200b MMagic \u200b\u4e2d\u200b\u8bbe\u8ba1\u200b\u81ea\u5df1\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\uff0c\u200b\u6b65\u9aa4\u200b\u548c\u200b\u5728\u200b MMagic \u200b\u4e2d\u200b\u81ea\u5b9a\u4e49\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u6a21\u578b\u200b\u7c7b\u4f3c\u200b\u3002 \u200b\u672c\u200b\u8282\u200b\u4e3b\u8981\u200b\u5177\u4f53\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u5982\u4f55\u200b\u5728\u200b MMagic \u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u3002 \u200b\u672c\u200b\u6559\u7a0b\u200b\u5efa\u8bae\u60a8\u200b\u5728\u200b\u5b9e\u73b0\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u65f6\u200b\uff0c\u200b\u5e94\u8be5\u200b\u9075\u5faa\u200b\u672c\u200b\u6559\u7a0b\u200b\u76f8\u540c\u200b\u7684\u200b\u8bbe\u8ba1\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u6846\u67b6\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u60a8\u200b\u65b0\u200b\u5b9a\u4e49\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\uff0c\u200b\u5c31\u200b\u4e0d\u200b\u9700\u8981\u200b\u989d\u5916\u200b\u7684\u200b\u5de5\u4f5c\u200b\u3002</p> <p>\u200b\u672c\u200b\u6307\u5357\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u8bbe\u8ba1\u200b\u4f60\u200b\u81ea\u5df1\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570\u200b</li> <li>\u200b\u652f\u6301\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u4ecb\u7ecd\u200b</li> <li>\u200b\u8bbe\u8ba1\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570\u200b<ul> <li>MSELoss \u200b\u7684\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b</li> <li>DiscShiftLoss \u200b\u7684\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b</li> <li>GANWithCustomizedLoss \u200b\u7684\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b</li> </ul> </li> <li>\u200b\u53ef\u7528\u200b\u635f\u5931\u200b\u51fd\u6570\u200b<ul> <li>\u200b\u5e38\u89c4\u200b\u635f\u5931\u200b\u51fd\u6570\u200b</li> <li>\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u7ec4\u4ef6\u200b</li> </ul> </li> </ul>"},{"location":"howto/losses/#_2","title":"\u652f\u6301\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u4ecb\u7ecd","text":"<p>\u200b\u4e3a\u4e86\u200b\u65b9\u4fbf\u4f7f\u7528\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u4e3a\u200b\u5177\u4f53\u200b\u7b97\u6cd5\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u9ed8\u8ba4\u200b\u635f\u5931\u200b\u8ba1\u7b97\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u5982\u200blsgan\u3001biggan\u3001styleganv2\u200b\u7b49\u200b\u3002 \u200b\u4ee5\u200b<code>stylegan2</code>\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200bR1\u200b\u68af\u5ea6\u200b\u60e9\u7f5a\u200b\u548c\u200b\u751f\u6210\u5668\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\u6b63\u5219\u200b\u5316\u200b\u4f5c\u4e3a\u200b\u53ef\u200b\u914d\u7f6e\u200b\u635f\u5931\u200b\uff0c\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u8c03\u6574\u200b\u76f8\u5173\u200b\u53c2\u6570\u200b\uff0c\u200b\u5982\u200b <code>r1_loss_weight</code> \u200b\u548c\u200b <code>g_reg_weight</code>\u3002</p> <pre><code># stylegan2_base.py\nloss_config =dict(\n     r1_loss_weight=10\u3002 / 2. * d_reg_interval,\n     r1_interval=d_reg_interval,\n     norm_mode='HWC',\n     g_reg_interval=g_reg_interval,\n     g_reg_weight=2\u3002 * g_reg_interval,\n     pl_batch_shrink=2)\n\nmodel=dict(\n     type='StyleGAN2',\n     xxx,\n     loss_config=loss_config)\n</code></pre>"},{"location":"howto/losses/#_3","title":"\u8bbe\u8ba1\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570","text":""},{"location":"howto/losses/#mseloss","title":"MSELoss \u200b\u7684\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50","text":"<p>\u200b\u4e00\u822c\u6765\u8bf4\u200b\uff0c\u200b\u8981\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u635f\u5931\u200b\u6a21\u5757\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f1a\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u7136\u540e\u200b\u7528\u7c7b\u200b\u5b9e\u73b0\u200b\u5305\u88c5\u200b\u5b83\u200b\u3002 \u200b\u4ee5\u200bMSELoss\u200b\u4e3a\u4f8b\u200b\uff1a</p> <pre><code>@masked_loss\ndef mse_loss(pred\uff0ctarget)\uff1a\n     return F.mse_loss\uff08pred\uff0ctarget\uff0creduction='none'\uff09\n\n@LOSSES.register_module()\nClass MSELoss(nn.Module)\uff1a\n\n     def __init__(self, loss_weight=1.0, reduction='mean', sample_wise=False):\n         # \u200b\u4ee3\u7801\u200b\u53ef\u4ee5\u200b\u5728\u200b``mmagic/models/losses/pixelwise_loss.py``\u200b\u4e2d\u200b\u627e\u5230\u200b\n\n     def forward(self, pred, target, weight=None, **kwargs):\n         # \u200b\u4ee3\u7801\u200b\u53ef\u4ee5\u200b\u5728\u200b``mmagic/models/losses/pixelwise_loss.py``\u200b\u4e2d\u200b\u627e\u5230\u200b\n</code></pre> <p>\u200b\u6839\u636e\u200b\u8fd9\u4e2a\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u7684\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u6211\u4eec\u200b\u73b0\u5728\u200b\u53ef\u4ee5\u200b\u7b80\u5355\u200b\u5730\u200b\u901a\u8fc7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u5b83\u200b\u6765\u200b\u4f7f\u7528\u200b\uff1a</p> <pre><code>pixel_loss=dict(type='MSELoss', loss_weight=1.0, reduction='mean')\n</code></pre> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u4e0a\u9762\u200b\u7684\u200b<code>pixel_loss</code>\u200b\u5fc5\u987b\u200b\u5728\u200b\u6a21\u578b\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u3002 \u200b\u8be6\u60c5\u8bf7\u200b\u53c2\u8003\u200b\u81ea\u5b9a\u4e49\u200b\u6a21\u578b\u200b\u3002 \u200b\u4e0e\u200b\u81ea\u5b9a\u4e49\u200b\u6a21\u578b\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u4f7f\u7528\u200b\u60a8\u200b\u81ea\u5df1\u200b\u5b9e\u73b0\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u5728\u200b\u7f16\u5199\u200b\u540e\u200b\u5728\u200b<code>mmagic/models/losses/__init__.py</code>\u200b\u4e2d\u200b\u5bfc\u5165\u200b\u8be5\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u3002</p>"},{"location":"howto/losses/#discshiftloss","title":"DiscShiftLoss \u200b\u7684\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50","text":"<p>\u200b\u4e00\u822c\u6765\u8bf4\u200b\uff0c\u200b\u8981\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u635f\u5931\u200b\u6a21\u5757\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f1a\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u7136\u540e\u200b\u7528\u7c7b\u200b\u5b9e\u73b0\u200b\u5305\u88c5\u200b\u5b83\u200b\u3002 \u200b\u4f46\u662f\u200b\uff0c\u200b\u5728\u200b MMagic \u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7edf\u4e00\u200b\u7684\u200b\u63a5\u53e3\u200b data_info \u200b\u4f9b\u200b\u7528\u6237\u200b\u5b9a\u4e49\u200b\u8f93\u5165\u200b\u53c2\u6570\u200b\u548c\u200b\u6570\u636e\u9879\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6620\u5c04\u200b\u3002</p> <pre><code>@weighted_loss\ndef disc_shift_loss(pred)\uff1a\n     return pred**2\n\n@MODULES.register_module()\nClass DiscShiftLoss(nn.Module)\uff1a\n\n     def __init__(self, loss_weight=1.0, data_info=None):\n         super(DiscShiftLoss\uff0cself).__init__()\n         # \u200b\u4ee3\u7801\u200b\u53ef\u4ee5\u200b\u5728\u200b``mmagic/models/losses/disc_auxiliary_loss.py``\u200b\u4e2d\u200b\u627e\u5230\u200b\n\n     def forward(self, *args, **kwargs):\n         # \u200b\u4ee3\u7801\u200b\u53ef\u4ee5\u200b\u5728\u200b``mmagic/models/losses/disc_auxiliary_loss.py``\u200b\u4e2d\u200b\u627e\u5230\u200b\n</code></pre> <p>\u200b\u8fd9\u79cd\u200b\u635f\u5931\u200b\u6a21\u5757\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u76ee\u6807\u200b\u662f\u200b\u5141\u8bb8\u200b\u5728\u200b\u751f\u6210\u200b\u6a21\u578b\u200b(<code>MODELS</code>)\u200b\u4e2d\u200b\u81ea\u52a8\u200b\u4f7f\u7528\u200b\u5b83\u200b\uff0c\u200b\u800c\u200b\u65e0\u9700\u200b\u5176\u4ed6\u200b\u590d\u6742\u200b\u4ee3\u7801\u200b\u6765\u200b\u5b9a\u4e49\u6570\u636e\u200b\u548c\u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6620\u5c04\u200b\u3002 \u200b\u56e0\u6b64\u200b\uff0c\u200b\u4e0e\u200b OpenMMLab \u200b\u4e2d\u200b\u7684\u200b\u5176\u4ed6\u200b\u6846\u67b6\u200b\u4e0d\u540c\u200b\uff0c\u200b\u6211\u4eec\u200b\u7684\u200b\u635f\u5931\u200b\u6a21\u5757\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u7279\u6b8a\u200b\u7684\u200b\u5173\u952e\u5b57\u200b data_info\uff0c\u200b\u5b83\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b9a\u4e49\u200b\u8f93\u5165\u200b\u53c2\u6570\u200b\u4e0e\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u6570\u636e\u200b\u4e4b\u95f4\u200b\u6620\u5c04\u200b\u7684\u200b\u5b57\u5178\u200b\u3002 \u200b\u4ee5\u200b<code>DiscShiftLoss</code>\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u7528\u6237\u200b\u5728\u200b\u7f16\u5199\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u7528\u5230\u200b\u8fd9\u4e2a\u200bloss\uff0c\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>dict(type='DiscShiftLoss',\n    loss_weight=0.001 * 0.5,\n    data_info=dict(pred='disc_pred_real'))\n</code></pre> <p><code>data_info</code> \u200b\u4e2d\u200b\u7684\u200b\u4fe1\u606f\u200b\u544a\u8bc9\u200b\u6a21\u5757\u200b\u4f7f\u7528\u200b <code>disc_pred_real</code> \u200b\u6570\u636e\u200b\u4f5c\u4e3a\u200b <code>pred</code> \u200b\u53c2\u6570\u200b\u7684\u200b\u8f93\u5165\u200b\u5f20\u91cf\u200b\u3002 \u200b\u4e00\u65e6\u200b <code>data_info</code> \u200b\u4e0d\u200b\u4e3a\u200b <code>None</code>\uff0c\u200b\u6211\u4eec\u200b\u7684\u200b\u635f\u5931\u200b\u6a21\u5757\u200b\u5c06\u200b\u81ea\u52a8\u200b\u6784\u5efa\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u3002</p> <pre><code>@MODULES.register_module()\nclass DiscShiftLoss(nn.Module):\n\n    def __init__(self, loss_weight=1.0, data_info=None):\n        super(DiscShiftLoss, self).__init__()\n        self.loss_weight = loss_weight\n        self.data_info = data_info\n\n    def forward(self, *args, **kwargs):\n        # use data_info to build computational path\n        if self.data_info is not None:\n            # parse the args and kwargs\n            if len(args) == 1:\n                assert isinstance(args[0], dict), (\n                    'You should offer a dictionary containing network outputs '\n                    'for building up computational graph of this loss module.')\n                outputs_dict = args[0]\n            elif 'outputs_dict' in kwargs:\n                assert len(args) == 0, (\n                    'If the outputs dict is given in keyworded arguments, no'\n                    ' further non-keyworded arguments should be offered.')\n                outputs_dict = kwargs.pop('outputs_dict')\n            else:\n                raise NotImplementedError(\n                    'Cannot parsing your arguments passed to this loss module.'\n                    ' Please check the usage of this module')\n            # link the outputs with loss input args according to self.data_info\n            loss_input_dict = {\n                k: outputs_dict[v]\n                for k, v in self.data_info.items()\n            }\n            kwargs.update(loss_input_dict)\n            kwargs.update(dict(weight=self.loss_weight))\n            return disc_shift_loss(**kwargs)\n        else:\n            # if you have not define how to build computational graph, this\n            # module will just directly return the loss as usual.\n            return disc_shift_loss(*args, weight=self.loss_weight, **kwargs)\n\n    @staticmethod\n    def loss_name():\n        return 'loss_disc_shift'\n</code></pre> <p>\u200b\u5982\u200b\u8fd9\u90e8\u5206\u200b\u4ee3\u7801\u200b\u6240\u793a\u200b\uff0c\u200b\u4e00\u65e6\u200b\u7528\u6237\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\u201cdata_info\u201d\uff0c\u200b\u635f\u5931\u200b\u6a21\u5757\u200b\u5c06\u200b\u6536\u5230\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u6240\u6709\u200b\u5fc5\u8981\u200b\u6570\u636e\u200b\u548c\u200b\u6a21\u5757\u200b\u7684\u200b\u5b57\u5178\u200b\uff0c\u200b\u8be5\u200b\u5b57\u5178\u200b\u7531\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u201cMODELS\u201d\u200b\u63d0\u4f9b\u200b\u3002 \u200b\u5982\u679c\u200b\u6b64\u200b\u5b57\u5178\u200b\u4f5c\u4e3a\u200b\u975e\u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b\u7ed9\u51fa\u200b\uff0c\u200b\u5219\u200b\u5e94\u200b\u5c06\u200b\u5176\u200b\u4f5c\u4e3a\u200b\u7b2c\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u63d0\u4f9b\u200b\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b\uff0c\u200b\u8bf7\u200b\u5c06\u200b\u5176\u200b\u547d\u540d\u200b\u4e3a\u200b <code>outputs_dict</code>\u3002</p>"},{"location":"howto/losses/#ganwithcustomizedloss","title":"GANWithCustomizedLoss \u200b\u7684\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50","text":"<p>\u200b\u4e3a\u4e86\u200b\u6784\u5efa\u200b\u8ba1\u7b97\u200b\u56fe\u200b\uff0c\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u5fc5\u987b\u200b\u63d0\u4f9b\u200b\u5305\u542b\u200b\u5404\u79cd\u200b\u6570\u636e\u200b\u7684\u200b\u5b57\u5178\u200b\u3002 \u200b\u4ed4\u7ec6\u89c2\u5bdf\u200b\u4efb\u4f55\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\uff0c\u200b\u4f60\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u6211\u4eec\u200b\u5c06\u200b\u5404\u79cd\u200b\u7279\u5f81\u200b\u548c\u200b\u6a21\u5757\u200b\u6536\u96c6\u200b\u5230\u200b\u5b57\u5178\u200b\u4e2d\u200b\u3002 \u200b\u6211\u4eec\u200b\u5728\u200b\u8fd9\u91cc\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b<code>GANWithCustomizedLoss</code>\u200b\u6765\u200b\u5c55\u793a\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u3002</p> <pre><code>class GANWithCustomizedLoss(BaseModel):\n\n    def __init__(self, gan_loss, disc_auxiliary_loss, gen_auxiliary_loss,\n                 *args, **kwargs):\n        # ...\n        if gan_loss is not None:\n            self.gan_loss = MODULES.build(gan_loss)\n        else:\n            self.gan_loss = None\n\n        if disc_auxiliary_loss:\n            self.disc_auxiliary_losses = MODULES.build(disc_auxiliary_loss)\n            if not isinstance(self.disc_auxiliary_losses, nn.ModuleList):\n                self.disc_auxiliary_losses = nn.ModuleList(\n                    [self.disc_auxiliary_losses])\n        else:\n            self.disc_auxiliary_loss = None\n\n        if gen_auxiliary_loss:\n            self.gen_auxiliary_losses = MODULES.build(gen_auxiliary_loss)\n            if not isinstance(self.gen_auxiliary_losses, nn.ModuleList):\n                self.gen_auxiliary_losses = nn.ModuleList(\n                    [self.gen_auxiliary_losses])\n        else:\n            self.gen_auxiliary_losses = None\n\n    def train_step(self, data: dict,\n                   optim_wrapper: OptimWrapperDict) -&gt; Dict[str, Tensor]:\n        # ...\n\n        # get data dict to compute losses for disc\n        data_dict_ = dict(\n            iteration=curr_iter,\n            gen=self.generator,\n            disc=self.discriminator,\n            disc_pred_fake=disc_pred_fake,\n            disc_pred_real=disc_pred_real,\n            fake_imgs=fake_imgs,\n            real_imgs=real_imgs)\n\n        loss_disc, log_vars_disc = self._get_disc_loss(data_dict_)\n\n        # ...\n\n    def _get_disc_loss(self, outputs_dict):\n        # Construct losses dict. If you hope some items to be included in the\n        # computational graph, you have to add 'loss' in its name. Otherwise,\n        # items without 'loss' in their name will just be used to print\n        # information.\n        losses_dict = {}\n        # gan loss\n        losses_dict['loss_disc_fake'] = self.gan_loss(\n            outputs_dict['disc_pred_fake'], target_is_real=False, is_disc=True)\n        losses_dict['loss_disc_real'] = self.gan_loss(\n            outputs_dict['disc_pred_real'], target_is_real=True, is_disc=True)\n\n        # disc auxiliary loss\n        if self.with_disc_auxiliary_loss:\n            for loss_module in self.disc_auxiliary_losses:\n                loss_ = loss_module(outputs_dict)\n                if loss_ is None:\n                    continue\n\n                # the `loss_name()` function return name as 'loss_xxx'\n                if loss_module.loss_name() in losses_dict:\n                    losses_dict[loss_module.loss_name(\n                    )] = losses_dict[loss_module.loss_name()] + loss_\n                else:\n                    losses_dict[loss_module.loss_name()] = loss_\n        loss, log_var = self.parse_losses(losses_dict)\n\n        return loss, log_var\n</code></pre> <p>\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff0c<code>_get_disc_loss</code> \u200b\u5c06\u200b\u5e2e\u52a9\u200b\u81ea\u52a8\u200b\u7ec4\u5408\u200b\u5404\u79cd\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u3002</p> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u53ea\u8981\u200b\u7528\u6237\u200b\u8bbe\u8ba1\u200b\u76f8\u540c\u200b\u89c4\u5219\u200b\u7684\u200b\u635f\u5931\u200b\u6a21\u5757\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5728\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u7684\u200b\u8bad\u7ec3\u200b\u4e2d\u200b\u63d2\u5165\u200b\u4efb\u4f55\u200b\u4e00\u79cd\u200b\u635f\u5931\u200b\uff0c\u200b\u65e0\u9700\u200b\u5bf9\u6a21\u578b\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u5176\u4ed6\u200b\u4fee\u6539\u200b\u3002 \u200b\u60a8\u200b\u53ea\u200b\u9700\u8981\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u5b9a\u4e49\u200b <code>data_info</code> \u200b\u5373\u53ef\u200b\u3002</p>"},{"location":"howto/losses/#_4","title":"\u53ef\u7528\u200b\u635f\u5931\u200b\u51fd\u6570","text":"<p>\u200b\u6211\u4eec\u200b\u5728\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u5217\u51fa\u200b\u4e86\u200b\u53ef\u7528\u200b\u7684\u200b\u635f\u5931\u200b\u793a\u4f8b\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u3002</p>"},{"location":"howto/losses/#_5","title":"\u5e38\u89c4\u200b\u635f\u5931\u200b\u51fd\u6570","text":"Method class Example vanilla gan loss mmagic.models.GANLoss <pre><code># dic gan\nloss_gan=dict(\n    type='GANLoss',\n    gan_type='vanilla',\n    loss_weight=0.001,\n)\n</code></pre> lsgan loss mmagic.models.GANLoss wgan loss mmagic.models.GANLoss <pre><code># deepfillv1\nloss_gan=dict(\n    type='GANLoss',\n    gan_type='wgan',\n    loss_weight=0.0001,\n)\n</code></pre> hinge loss mmagic.models.GANLoss <pre><code># deepfillv2\nloss_gan=dict(\n    type='GANLoss',\n    gan_type='hinge',\n    loss_weight=0.1,\n)\n</code></pre> smgan loss mmagic.models.GANLoss <pre><code># aot-gan\nloss_gan=dict(\n    type='GANLoss',\n    gan_type='smgan',\n    loss_weight=0.01,\n)\n</code></pre> gradient penalty mmagic.models.GradientPenaltyLoss <pre><code># deepfillv1\nloss_gp=dict(type='GradientPenaltyLoss', loss_weight=10.)\n</code></pre> discriminator shift loss mmagic.models.DiscShiftLoss <pre><code># deepfillv1\nloss_disc_shift=dict(type='DiscShiftLoss', loss_weight=0.001)\n</code></pre> clip loss mmagic.models.CLIPLoss L1 composition loss mmagic.models.L1CompositionLoss MSE composition loss mmagic.models.MSECompositionLoss charbonnier composition loss mmagic.models.CharbonnierCompLoss <pre><code># dim\nloss_comp=dict(type='CharbonnierCompLoss', loss_weight=0.5)\n</code></pre> face id Loss mmagic.models.FaceIdLoss light cnn feature loss mmagic.models.LightCNNFeatureLoss <pre><code># dic gan\nfeature_loss=dict(\n    type='LightCNNFeatureLoss',\n    pretrained=pretrained_light_cnn,\n    loss_weight=0.1,\n    criterion='l1')\n</code></pre> gradient loss mmagic.models.GradientLoss l1 Loss mmagic.models.L1Loss <pre><code># dic gan\npixel_loss=dict(type='L1Loss', loss_weight=1.0, reduction='mean')\n</code></pre> mse loss mmagic.models.MSELoss <pre><code># dic gan\nalign_loss=dict(type='MSELoss', loss_weight=0.1, reduction='mean')\n</code></pre> charbonnier loss mmagic.models.CharbonnierLoss <pre><code># dim\nloss_alpha=dict(type='CharbonnierLoss', loss_weight=0.5)\n</code></pre> masked total variation loss mmagic.models.MaskedTVLoss <pre><code># partial conv\nloss_tv=dict(\n    type='MaskedTVLoss',\n    loss_weight=0.1\n)\n</code></pre> perceptual loss mmagic.models.PerceptualLoss <pre><code># real_basicvsr\nperceptual_loss=dict(\n    type='PerceptualLoss',\n    layer_weights={\n        '2': 0.1,\n        '7': 0.1,\n        '16': 1.0,\n        '25': 1.0,\n        '34': 1.0,\n    },\n    vgg_type='vgg19',\n    perceptual_weight=1.0,\n    style_weight=0,\n    norm_img=False)\n</code></pre> transferal perceptual loss mmagic.models.TransferalPerceptualLoss <pre><code># ttsr\ntransferal_perceptual_loss=dict(\n    type='TransferalPerceptualLoss',\n    loss_weight=1e-2,\n    use_attention=False,\n    criterion='mse')\n</code></pre>"},{"location":"howto/losses/#_6","title":"\u635f\u5931\u200b\u51fd\u6570\u200b\u7ec4\u4ef6","text":"<p>\u200b\u5bf9\u4e8e\u200b\u201cGANWithCustomizedLoss\u201d\uff0c\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u51e0\u4e2a\u200b\u7ec4\u4ef6\u200b\u6765\u200b\u6784\u5efa\u200b\u81ea\u5b9a\u4e49\u200b\u635f\u5931\u200b\u3002</p> Method class clip loss component mmagic.models.CLIPLossComps discriminator shift loss component mmagic.models. DiscShiftLossComps gradient penalty loss component mmagic.models. GradientPenaltyLossComps r1 gradient penalty component mmagic.models. R1GradientPenaltyComps face Id loss component mmagic.models. FaceIdLossComps gan loss component mmagic.models. GANLossComps generator path regularizer component mmagic.models.GeneratorPathRegularizerComps"},{"location":"howto/models/","title":"\u5982\u4f55\u200b\u8bbe\u8ba1\u200b\u81ea\u5df1\u200b\u7684\u200b\u6a21\u578b","text":"<p>MMagic\u200b\u5efa\u7acb\u200b\u5728\u200bMMEngine\u200b\u548c\u200bMMCV\u200b\u7684\u200b\u57fa\u7840\u200b\u4e0a\u200b\uff0c\u200b\u4f7f\u200b\u7528\u6237\u200b\u80fd\u591f\u200b\u5feb\u901f\u200b\u5730\u200b\u8bbe\u8ba1\u200b\u65b0\u200b\u6a21\u578b\u200b\uff0c\u200b\u8f7b\u677e\u200b\u5730\u5730\u200b\u8bad\u7ec3\u200b\u548c\u200b\u8bc4\u4f30\u200b\u5b83\u4eec\u200b\u3002 \u200b\u5728\u200b\u672c\u8282\u200b\u4e2d\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u5b66\u4e60\u200b\u5982\u4f55\u200b\u8bbe\u8ba1\u200b\u81ea\u5df1\u200b\u7684\u200b\u6a21\u578b\u200b\u3002</p> <p>\u200b\u672c\u200b\u6307\u5357\u200b\u7684\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b:</p> <ul> <li>\u200b\u5982\u4f55\u200b\u8bbe\u8ba1\u200b\u81ea\u5df1\u200b\u7684\u200b\u6a21\u578b\u200b</li> <li>MMagic\u200b\u4e2d\u200b\u7684\u200b\u6a21\u578b\u200b\u6982\u8ff0\u200b</li> <li>\u200b\u4e00\u4e2a\u200bSRCNN\u200b\u7684\u200b\u4f8b\u5b50\u200b<ul> <li>Step 1: \u200b\u5b9a\u4e49\u200bSRCNN\u200b\u7f51\u7edc\u200b</li> <li>Step 2: \u200b\u5b9a\u4e49\u200bSRCNN\u200b\u7684\u200b\u6a21\u578b\u200b</li> <li>Step 3: \u200b\u5f00\u59cb\u200b\u8bad\u7ec3\u200bSRCNN</li> </ul> </li> <li>\u200b\u4e00\u4e2a\u200bDCGAN\u200b\u7684\u200b\u4f8b\u5b50\u200b<ul> <li>Step 1: \u200b\u5b9a\u4e49\u200bDCGAN\u200b\u7684\u200b\u7f51\u7edc\u200b</li> <li>Step 2: \u200b\u8bbe\u8ba1\u200bDCGAN\u200b\u7684\u200b\u6a21\u578b\u200b</li> <li>Step 3: \u200b\u5f00\u59cb\u200b\u8bad\u7ec3\u200bDCGAN</li> </ul> </li> <li>\u200b\u53c2\u8003\u6587\u732e\u200b</li> </ul>"},{"location":"howto/models/#mmagic","title":"MMagic\u200b\u4e2d\u200b\u7684\u200b\u6a21\u578b\u200b\u6982\u8ff0","text":"<p>\u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u7b97\u6cd5\u200b\u53ef\u4ee5\u200b\u5206\u4e3a\u200b\u4e24\u200b\u90e8\u5206\u200b: Model \u200b\u548c\u200b Module.</p> <ul> <li>Model \u200b\u662f\u200b\u6700\u200b\u9876\u5c42\u200b\u7684\u200b\u5305\u88c5\u200b\uff0c\u200b\u5e76\u4e14\u200b\u603b\u662f\u200b\u7ee7\u627f\u200b\u81ea\u200bMMEngine\u200b\u4e2d\u200b\u63d0\u4f9b\u200b\u7684\u200b <code>BaseModel</code> \u3002 Model \u200b\u8d1f\u8d23\u200b\u7f51\u7edc\u200b\u524d\u5411\u200b\u3001\u200b\u635f\u8017\u200b\u8ba1\u7b97\u200b\u3001\u200b\u53cd\u5411\u200b\u3001\u200b\u53c2\u6570\u200b\u66f4\u65b0\u200b\u7b49\u200b. \u200b\u5728\u200bMMagic\u200b\u4e2d\u200b, Model \u200b\u5e94\u8be5\u200b\u6ce8\u518c\u200b\u4e3a\u200b <code>MODELS</code>.</li> <li>Module \u200b\u6a21\u5757\u200b\u5305\u62ec\u200b\u7528\u4e8e\u200b\u8bad\u7ec3\u200b\u6216\u200b\u63a8\u7406\u200b\u7684\u200b architectures , \u200b\u9884\u5b9a\u200b\u4e49\u200b\u7684\u200b loss classes, \u200b\u4ee5\u53ca\u200b\u5bf9\u200b\u6279\u91cf\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u9884\u5904\u7406\u200b\u7684\u200b data preprocessors \u3002 Module \u200b\u603b\u662f\u200b\u4f5c\u4e3a\u200bModel\u200b\u7684\u200b\u5143\u7d20\u200b\u5448\u73b0\u200b\u3002 \u200b\u5728\u200bMMagic\u200b\u4e2d\u200b, Module \u200b\u5e94\u8be5\u200b\u6ce8\u518c\u200b\u4e3a\u200b MODULES\u3002</li> </ul> <p>\u200b\u4ee5\u200bDCGAN model \u200b\u6a21\u578b\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u751f\u6210\u5668\u200b \u200b\u548c\u200b \u200b\u5224\u522b\u200b\u5668\u200b \u200b\u662f\u200b Module, \u200b\u5206\u522b\u200b\u7528\u4e8e\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\u548c\u200b\u9274\u522b\u200b\u56fe\u50cf\u200b\u771f\u4f2a\u200b\u3002 <code>DCGAN</code> \u200b\u662f\u200b Model, \u200b\u5b83\u200b\u4ece\u200bdataloader\u200b\u4e2d\u200b\u83b7\u53d6\u6570\u636e\u200b\uff0c\u200b\u4ea4\u66ff\u200b\u8bad\u7ec3\u200b\u751f\u6210\u5668\u200b\u548c\u200b\u9274\u522b\u5668\u200b\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u94fe\u63a5\u200b\u627e\u5230\u200b Model \u200b\u548c\u200b Module \u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002</p> <ul> <li>Model:</li> <li>Editors</li> <li>Module:</li> <li>Layers</li> <li>Losses</li> <li>Data Preprocessor</li> </ul>"},{"location":"howto/models/#srcnn","title":"\u4e00\u4e2a\u200bSRCNN\u200b\u7684\u200b\u4f8b\u5b50","text":"<p>\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u6211\u4eec\u200b\u4ee5\u200b\u7ecf\u5178\u200b\u56fe\u50cf\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b\u6a21\u578b\u200bSRCNN[1]\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e3a\u4f8b\u200b\u3002</p>"},{"location":"howto/models/#step-1-srcnn","title":"Step 1: \u200b\u5b9a\u4e49\u200bSRCNN\u200b\u7f51\u7edc","text":"<p>SRCNN \u200b\u662f\u200b\u7b2c\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u5355\u5e45\u200b\u56fe\u50cf\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b[1]\u200b\u7684\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u65b9\u6cd5\u200b\u3002\u200b\u4e3a\u4e86\u200b\u5b9e\u73b0\u200bSRCNN\u200b\u7684\u200b\u7f51\u7edc\u200b\u67b6\u6784\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u6587\u4ef6\u200b <code>mmagic/models/editors/srgan/sr_resnet.py</code> \u200b\u5e76\u200b\u6267\u884c\u200b <code>class MSRResNet</code>\u3002</p> <p>\u200b\u5728\u200b\u8fd9\u200b\u4e00\u6b65\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u7ee7\u627f\u200b<code>mmengine.models.BaseModule</code>\u200b\u6765\u200b\u5b9e\u73b0\u200b <code>class MSRResNet</code>\uff0c\u200b\u5e76\u200b\u5728\u200b<code>__init__</code>\u200b\u51fd\u6570\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u7f51\u7edc\u200b\u67b6\u6784\u200b\u3002 \u200b\u7279\u522b\u200b\u5730\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b<code>@MODELS.register_module()</code>\u200b\u5c06\u200b<code>class MSRResNet</code>\u200b\u7684\u200b\u5b9e\u73b0\u200b\u6dfb\u52a0\u200b\u5230\u200bMMagic\u200b\u7684\u200b\u6ce8\u518c\u200b\u4e2d\u200b\u3002</p> <pre><code>import torch.nn as nn\nfrom mmengine.model import BaseModule\nfrom mmagic.registry import MODELS\n\nfrom mmagic.models.utils import (PixelShufflePack, ResidualBlockNoBN,\n                                 default_init_weights, make_layer)\n\n\n@MODELS.register_module()\nclass MSRResNet(BaseModule):\n    \"\"\"\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200bSRResNet\u3002\n\n    \u200b\u7531\u200b \"\u200b\u4f7f\u7528\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b\u7684\u200b\u7167\u7247\u200b-\u200b\u73b0\u5b9e\u200b\u7684\u200b\u5355\u5e45\u200b\u56fe\u50cf\u200b\u8d85\u7ea7\u200b\u5206\u8fa8\u7387\u200b \"\u200b\u4e2d\u200b\u7684\u200bSRResNet\u200b\u4fee\u6539\u200b\u800c\u6765\u200b\u7684\u200b\u538b\u7f29\u200b\u7248\u672c\u200b\u3002\n\n    \u200b\u5b83\u200b\u4f7f\u7528\u200b\u65e0\u200bBN\u200b\u7684\u200b\u6b8b\u5dee\u200b\u5757\u200b\uff0c\u200b\u7c7b\u4f3c\u200b\u4e8e\u200bEDSR\u3002\n    \u200b\u76ee\u524d\u200b\u652f\u6301\u200bx2\u3001x3\u200b\u548c\u200bx4\u200b\u4e0a\u200b\u91c7\u6837\u200b\u6bd4\u4f8b\u200b\u56e0\u5b50\u200b\u3002\n\n    Args:\n        in_channels (int): Channel number of inputs.\n        out_channels (int): Channel number of outputs.\n        mid_channels (int): Channel number of intermediate features.\n            Default: 64.\n        num_blocks (int): Block number in the trunk network. Default: 16.\n        upscale_factor (int): Upsampling factor. Support x2, x3 and x4.\n            Default: 4.\n    \"\"\"\n    _supported_upscale_factors = [2, 3, 4]\n\n    def __init__(self,\n                 in_channels,\n                 out_channels,\n                 mid_channels=64,\n                 num_blocks=16,\n                 upscale_factor=4):\n\n        super().__init__()\n        self.in_channels = in_channels\n        self.out_channels = out_channels\n        self.mid_channels = mid_channels\n        self.num_blocks = num_blocks\n        self.upscale_factor = upscale_factor\n\n        self.conv_first = nn.Conv2d(\n            in_channels, mid_channels, 3, 1, 1, bias=True)\n        self.trunk_net = make_layer(\n            ResidualBlockNoBN, num_blocks, mid_channels=mid_channels)\n\n        # upsampling\n        if self.upscale_factor in [2, 3]:\n            self.upsample1 = PixelShufflePack(\n                mid_channels,\n                mid_channels,\n                self.upscale_factor,\n                upsample_kernel=3)\n        elif self.upscale_factor == 4:\n            self.upsample1 = PixelShufflePack(\n                mid_channels, mid_channels, 2, upsample_kernel=3)\n            self.upsample2 = PixelShufflePack(\n                mid_channels, mid_channels, 2, upsample_kernel=3)\n        else:\n            raise ValueError(\n                f'Unsupported scale factor {self.upscale_factor}. '\n                f'Currently supported ones are '\n                f'{self._supported_upscale_factors}.')\n\n        self.conv_hr = nn.Conv2d(\n            mid_channels, mid_channels, 3, 1, 1, bias=True)\n        self.conv_last = nn.Conv2d(\n            mid_channels, out_channels, 3, 1, 1, bias=True)\n\n        self.img_upsampler = nn.Upsample(\n            scale_factor=self.upscale_factor,\n            mode='bilinear',\n            align_corners=False)\n\n        # activation function\n        self.lrelu = nn.LeakyReLU(negative_slope=0.1, inplace=True)\n\n        self.init_weights()\n\n    def init_weights(self):\n        \"\"\"Init weights for models.\n\n        Args:\n            pretrained (str, optional): Path for pretrained weights. If given\n                None, pretrained weights will not be loaded. Defaults to None.\n            strict (boo, optional): Whether strictly load the pretrained model.\n                Defaults to True.\n        \"\"\"\n\n        for m in [self.conv_first, self.conv_hr, self.conv_last]:\n            default_init_weights(m, 0.1)\n</code></pre> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5b9e\u73b0\u200b\u4e86\u200b<code>class MSRResNet</code>\u200b\u7684\u200b<code>forward</code> \u200b\u51fd\u6570\u200b, \u200b\u8be5\u200b\u51fd\u6570\u200b\u5c06\u200b\u8f93\u5165\u200b\u5f20\u91cf\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u5f20\u91cf\u200b\uff0c\u200b\u7136\u540e\u200b\u8fd4\u56de\u200b<code>MSRResNet</code>\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002</p> <pre><code>    def forward(self, x):\n        \"\"\"Forward function.\n\n        Args:\n            x (Tensor): Input tensor with shape (n, c, h, w).\n\n        Returns:\n            Tensor: Forward results.\n        \"\"\"\n\n        feat = self.lrelu(self.conv_first(x))\n        out = self.trunk_net(feat)\n\n        if self.upscale_factor in [2, 3]:\n            out = self.upsample1(out)\n        elif self.upscale_factor == 4:\n            out = self.upsample1(out)\n            out = self.upsample2(out)\n\n        out = self.conv_last(self.lrelu(self.conv_hr(out)))\n        upsampled_img = self.img_upsampler(x)\n        out += upsampled_img\n        return out\n</code></pre> <p>\u200b\u5728\u200b<code>class MSRResNet</code>\u200b\u5b9e\u73b0\u200b\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u66f4\u65b0\u200b<code>mmagic/models/editors/__init__.py</code>\u200b\u4e2d\u200b\u7684\u200b\u6a21\u578b\u200b\u5217\u8868\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b<code>mmagic.models.editors</code>\u200b\u5bfc\u5165\u200b\u548c\u200b\u4f7f\u7528\u200b<code>class MSRResNet</code>\u3002</p> <pre><code>from .srgan.sr_resnet import MSRResNet\n</code></pre>"},{"location":"howto/models/#step-2-srcnn","title":"Step 2: \u200b\u5b9a\u4e49\u200bSRCNN\u200b\u7684\u200b\u6a21\u578b","text":"<p>\u200b\u7f51\u7edc\u200b\u67b6\u6784\u200b\u5b9e\u73b0\u200b\u540e\u200b, \u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5b9a\u4e49\u200b\u6211\u4eec\u200b\u7684\u200b\u6a21\u578b\u200b<code>class BaseEditModel</code> \u200b\u5e76\u200b\u5b9e\u73b0\u200b<code>class BaseEditModel</code>\u200b\u7684\u200b\u524d\u200b\u5411\u200b\u5faa\u73af\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u5b9e\u73b0\u200b<code>class BaseEditModel</code>, \u200b\u6211\u4eec\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u6587\u4ef6\u200b<code>mmagic/models/base_models/base_edit_model.py</code>\u3002 \u200b\u5177\u4f53\u6765\u8bf4\u200b\uff0c<code>class BaseEditModel</code>\u200b\u7ee7\u627f\u200b\u81ea\u200b<code>mmengine.model.BaseModel</code>. \u200b\u5728\u200b<code>__init__</code>\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5b9a\u4e49\u200b\u4e86\u200b<code>class BaseEditModel</code>\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\uff0c\u200b\u8bad\u7ec3\u200b, \u200b\u6d4b\u8bd5\u200b\u914d\u7f6e\u200b\u548c\u200b\u7f51\u7edc\u200b\u3002</p> <pre><code>from typing import List, Optional\n\nimport torch\nfrom mmengine.model import BaseModel\n\nfrom mmagic.registry import MODELS\nfrom mmagic.structures import DataSample\n\n\n@MODELS.register_module()\nclass BaseEditModel(BaseModel):\n    \"\"\"\u200b\u7528\u4e8e\u200b\u56fe\u50cf\u200b\u548c\u200b\u89c6\u9891\u200b\u7f16\u8f91\u200b\u7684\u200b\u57fa\u672c\u200b\u6a21\u578b\u200b\u3002\n\n    \u200b\u5b83\u200b\u5fc5\u987b\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u751f\u6210\u5668\u200b\uff0c\u200b\u5c06\u200b\u5e27\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u5e76\u200b\u8f93\u51fa\u200b\u63d2\u503c\u200b\u5e27\u200b\u3002\u200b\u5b83\u200b\u4e5f\u200b\u6709\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u8bad\u7ec3\u200b\u7684\u200bpixel-wise\u200b\u635f\u5931\u200b\u3002\n\n    Args:\n        generator (dict): Config for the generator structure.\n        pixel_loss (dict): Config for pixel-wise loss.\n        train_cfg (dict): Config for training. Default: None.\n        test_cfg (dict): Config for testing. Default: None.\n        init_cfg (dict, optional): The weight initialized config for\n            :class:`BaseModule`.\n        data_preprocessor (dict, optional): The pre-process config of\n            :class:`BaseDataPreprocessor`.\n\n    Attributes:\n        init_cfg (dict, optional): Initialization config dict.\n        data_preprocessor (:obj:`BaseDataPreprocessor`): Used for\n            pre-processing data sampled by dataloader to the format accepted by\n            :meth:`forward`. Default: None.\n    \"\"\"\n\n    def __init__(self,\n                 generator,\n                 pixel_loss,\n                 train_cfg=None,\n                 test_cfg=None,\n                 init_cfg=None,\n                 data_preprocessor=None):\n        super().__init__(\n            init_cfg=init_cfg, data_preprocessor=data_preprocessor)\n\n        self.train_cfg = train_cfg\n        self.test_cfg = test_cfg\n\n        # generator\n        self.generator = MODELS.build(generator)\n\n        # loss\n        self.pixel_loss = MODELS.build(pixel_loss)\n</code></pre> <p>\u200b\u56e0\u4e3a\u200b<code>mmengine.model.BaseModel</code>\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u7b97\u6cd5\u200b\u6a21\u578b\u200b\u7684\u200b\u57fa\u672c\u529f\u80fd\u200b\uff0c\u200b\u4f8b\u5982\u200b\u6743\u91cd\u200b\u521d\u59cb\u5316\u200b\u3001\u200b\u6279\u91cf\u200b\u8f93\u5165\u200b\u9884\u5904\u7406\u200b\u3001\u200b\u89e3\u6790\u200b\u635f\u5931\u200b\u548c\u200b\u66f4\u65b0\u200b\u6a21\u578b\u200b\u53c2\u6570\u200b\u3002 \u200b\u56e0\u6b64\u200b\uff0c\u200b\u5b50\u7c7b\u200b\u7ee7\u627f\u200b\u81ea\u200bBaseModel\uff0c\u200b\u5373\u200b\u672c\u4f8b\u200b\u4e2d\u200b\u7684\u200b<code>class BaseEditModel</code>, \u200b\u53ea\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200bforward\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8be5\u200b\u65b9\u6cd5\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u8ba1\u7b97\u200b\u635f\u5931\u200b\u548c\u200b\u9884\u6d4b\u200b\u7684\u200b\u903b\u8f91\u200b\u3002</p> <p>\u200b\u5177\u4f53\u6765\u8bf4\u200b\uff0c<code>class BaseEditModel</code>\u200b\u5b9e\u73b0\u200b\u7684\u200b<code>forward</code>\u200b\u51fd\u6570\u200b\u5c06\u200b<code>batch_inputs</code>\u200b\u548c\u200b<code>data_samples</code>\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u6839\u636e\u200b\u6a21\u5f0f\u200b\u53c2\u6570\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\u3002</p> <pre><code>    def forward(self,\n                batch_inputs: torch.Tensor,\n                data_samples: Optional[List[DataSample]] = None,\n                mode: str = 'tensor',\n                **kwargs):\n        \"\"\"\u200b\u8fd4\u56de\u200b\u8bad\u7ec3\u200b\u3001\u200b\u9a8c\u8bc1\u200b\u3001\u200b\u6d4b\u8bd5\u200b\u548c\u200b\u7b80\u5355\u200b\u63a8\u7406\u200b\u8fc7\u7a0b\u200b\u7684\u200b\u635f\u5931\u200b\u6216\u200b\u9884\u6d4b\u200b\u3002\n\n        BaseModel\u200b\u7684\u200b``forward``\u200b\u65b9\u6cd5\u200b\u662f\u200b\u4e00\u4e2a\u200b\u62bd\u8c61\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u5b50\u7c7b\u200b\u5fc5\u987b\u200b\u5b9e\u73b0\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u3002\n\n        \u200b\u63a5\u53d7\u200b\u7531\u200b:attr:`data_preprocessor`\u200b\u5904\u7406\u200b\u7684\u200b``batch_inputs`` \u200b\u548c\u200b ``data_samples``, \u200b\u5e76\u200b\u6839\u636e\u200b\u6a21\u5f0f\u200b\u53c2\u6570\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\u3002.\n\n        \u200b\u5728\u200b\u975e\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u3001\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\n        ``forward``\u200b\u5c06\u200b\u88ab\u200b``BaseModel.train_step``,\n        ``BaseModel.val_step``\u200b\u548c\u200b``BaseModel.val_step``\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200b\u3002\n\n        \u200b\u5728\u200b\u5206\u5e03\u5f0f\u200b\u6570\u636e\u200b\u5e76\u884c\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b,``MMSeparateDistributedDataParallel.train_step``\u200b\u5c06\u200b\u9996\u5148\u200b\u8c03\u7528\u200b``DistributedDataParallel.forward``\u200b\u4ee5\u200b\u542f\u7528\u200b\u81ea\u52a8\u200b\u68af\u5ea6\u200b\u540c\u6b65\u200b\uff0c\u200b\u7136\u540e\u200b\u8c03\u7528\u200b``forward``\u200b\u83b7\u5f97\u200b\u8bad\u7ec3\u200b\u635f\u5931\u200b\u3002\n\n        Args:\n            batch_inputs (torch.Tensor): batch input tensor collated by\n                :attr:`data_preprocessor`.\n            data_samples (List[BaseDataElement], optional):\n                data samples collated by :attr:`data_preprocessor`.\n            mode (str): mode should be one of ``loss``, ``predict`` and\n                ``tensor``\n\n                - ``loss``: Called by ``train_step`` and return loss ``dict``\n                  used for logging\n                - ``predict``: Called by ``val_step`` and ``test_step``\n                  and return list of ``BaseDataElement`` results used for\n                  computing metric.\n                - ``tensor``: Called by custom use to get ``Tensor`` type\n                  results.\n\n        Returns:\n            ForwardResults:\n\n                - If ``mode == loss``, return a ``dict`` of loss tensor used\n                  for backward and logging.\n                - If ``mode == predict``, return a ``list`` of\n                  :obj:`BaseDataElement` for computing metric\n                  and getting inference result.\n                - If ``mode == tensor``, return a tensor or ``tuple`` of tensor\n                  or ``dict or tensor for custom use.\n        \"\"\"\n\n        if mode == 'tensor':\n            return self.forward_tensor(batch_inputs, data_samples, **kwargs)\n\n        elif mode == 'predict':\n            return self.forward_inference(batch_inputs, data_samples, **kwargs)\n\n        elif mode == 'loss':\n            return self.forward_train(batch_inputs, data_samples, **kwargs)\n</code></pre> <p>\u200b\u5177\u4f53\u6765\u8bf4\u200b\uff0c\u200b\u5728\u200b<code>forward_tensor</code>\u200b\u4e2d\u200b, <code>class BaseEditModel</code>\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\u7f51\u7edc\u200b\u7684\u200b\u524d\u200b\u5411\u200b\u5f20\u91cf\u200b\u3002</p> <pre><code>    def forward_tensor(self, batch_inputs, data_samples=None, **kwargs):\n        \"\"\"Forward tensor.\n            Returns result of simple forward.\n\n        Args:\n            batch_inputs (torch.Tensor): batch input tensor collated by\n                :attr:`data_preprocessor`.\n            data_samples (List[BaseDataElement], optional):\n                data samples collated by :attr:`data_preprocessor`.\n\n        Returns:\n            Tensor: result of simple forward.\n        \"\"\"\n\n        feats = self.generator(batch_inputs, **kwargs)\n\n        return feats\n</code></pre> <p>\u200b\u5728\u200b<code>forward_inference</code>\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c<code>class BaseEditModel</code>\u200b\u9996\u5148\u200b\u5c06\u200b\u524d\u200b\u5411\u200b\u5f20\u91cf\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u56fe\u50cf\u200b\uff0c\u200b\u7136\u540e\u200b\u8fd4\u56de\u200b\u8be5\u200b\u56fe\u50cf\u200b\u4f5c\u4e3a\u200b\u8f93\u51fa\u200b\u3002</p> <pre><code>    def forward_inference(self, batch_inputs, data_samples=None, **kwargs):\n        \"\"\"Forward inference.\n            Returns predictions of validation, testing, and simple inference.\n\n        Args:\n            batch_inputs (torch.Tensor): batch input tensor collated by\n                :attr:`data_preprocessor`.\n            data_samples (List[BaseDataElement], optional):\n                data samples collated by :attr:`data_preprocessor`.\n\n        Returns:\n            List[DataSample]: predictions.\n        \"\"\"\n\n        feats = self.forward_tensor(batch_inputs, data_samples, **kwargs)\n        feats = self.data_preprocessor.destructor(feats)\n        predictions = []\n        for idx in range(feats.shape[0]):\n            predictions.append(\n                DataSample(\n                    pred_img=feats[idx].to('cpu'),\n                    metainfo=data_samples[idx].metainfo))\n\n        return predictions\n</code></pre> <p>\u200b\u5728\u200b<code>forward_train</code>\u200b\u4e2d\u200b, <code>class BaseEditModel</code>\u200b\u8ba1\u7b97\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u635f\u5931\u200b\u7684\u200b\u5b57\u5178\u200b\u4f5c\u4e3a\u200b\u8f93\u51fa\u200b\u3002</p> <pre><code>    def forward_train(self, batch_inputs, data_samples=None, **kwargs):\n        \"\"\"Forward training.\n            Returns dict of losses of training.\n\n        Args:\n            batch_inputs (torch.Tensor): batch input tensor collated by\n                :attr:`data_preprocessor`.\n            data_samples (List[BaseDataElement], optional):\n                data samples collated by :attr:`data_preprocessor`.\n\n        Returns:\n            dict: Dict of losses.\n        \"\"\"\n\n        feats = self.forward_tensor(batch_inputs, data_samples, **kwargs)\n        gt_imgs = [data_sample.gt_img.data for data_sample in data_samples]\n        batch_gt_data = torch.stack(gt_imgs)\n\n        loss = self.pixel_loss(feats, batch_gt_data)\n\n        return dict(loss=loss)\n</code></pre> <p>\u200b\u5728\u200b\u5b9e\u73b0\u200b\u4e86\u200b<code>class BaseEditModel</code>\u200b\u4e4b\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u66f4\u65b0\u200b <code>mmagic/models/__init__.py</code>\u200b\u4e2d\u200b\u7684\u200b\u6a21\u578b\u200b\u5217\u8868\u200b\uff0c\u200b\u8fd9\u6837\u200b\u6211\u4eec\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b<code>mmagic.models</code>\u200b\u5bfc\u5165\u200b\u548c\u200b\u4f7f\u7528\u200b<code>class BaseEditModel</code>\u3002</p> <pre><code>from .base_models.base_edit_model import BaseEditModel\n</code></pre>"},{"location":"howto/models/#step-3-srcnn","title":"Step 3: \u200b\u5f00\u59cb\u200b\u8bad\u7ec3\u200bSRCNN","text":"<p>\u200b\u5728\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u7f51\u7edc\u7ed3\u6784\u200b\u548c\u200bSRCNN\u200b\u7684\u200b\u524d\u200b\u5411\u200b\u5faa\u73af\u200b\u540e\u200b\u3001 \u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6587\u4ef6\u200b<code>configs/srcnn/srcnn_x4k915_g1_1000k_div2k.py</code> \u200b\u6765\u200b\u8bbe\u7f6e\u200b\u8bad\u7ec3\u200bSRCNN\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002</p> <p>\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u6307\u5b9a\u200b\u6211\u4eec\u200b\u7684\u200b\u6a21\u578b\u200b<code>class BaseEditModel</code>\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u5305\u62ec\u200b\u751f\u6210\u5668\u200b\u7f51\u7edc\u7ed3\u6784\u200b\u3001\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u3001\u200b\u989d\u5916\u200b\u7684\u200b\u8bad\u7ec3\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u914d\u7f6e\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u8f93\u5165\u200b\u5f20\u91cf\u200b\u7684\u200b\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\u3002\u200b\u8bf7\u200b\u53c2\u8003\u200bMMagic\u200b\u4e2d\u200b\u7684\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u4ecb\u7ecd\u200b\u4e86\u89e3\u200bMMagic\u200b\u4e2d\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u7ec6\u8282\u200b\u3002</p> <pre><code># model settings\nmodel = dict(\n    type='BaseEditModel',\n    generator=dict(\n        type='SRCNNNet',\n        channels=(3, 64, 32, 3),\n        kernel_sizes=(9, 1, 5),\n        upscale_factor=scale),\n    pixel_loss=dict(type='L1Loss', loss_weight=1.0, reduction='mean'),\n    data_preprocessor=dict(\n        type='DataPreprocessor',\n        mean=[0., 0., 0.],\n        std=[255., 255., 255.],\n    ))\n</code></pre> <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u9700\u8981\u200b\u6839\u636e\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u6765\u200b\u6307\u5b9a\u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u548c\u200b\u6d4b\u8bd5\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u3002 \u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5f00\u59cb\u200b\u8bad\u7ec3\u200b\u6211\u4eec\u200b\u81ea\u5df1\u200b\u7684\u200b\u6a21\u578b\u200b:</p> <pre><code>python tools/train.py configs/srcnn/srcnn_x4k915_g1_1000k_div2k.py\n</code></pre>"},{"location":"howto/models/#dcgan","title":"\u4e00\u4e2a\u200bDCGAN\u200b\u7684\u200b\u4f8b\u5b50","text":"<p>\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u6211\u4eec\u200b\u4ee5\u200b\u7ecf\u5178\u200bgan\u200b\u6a21\u578b\u200bDCGAN[2]\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e3a\u4f8b\u200b\u3002</p>"},{"location":"howto/models/#step-1-dcgan","title":"Step 1: \u200b\u5b9a\u4e49\u200bDCGAN\u200b\u7684\u200b\u7f51\u7edc","text":"<p>DCGAN\u200b\u662f\u200b\u4e00\u79cd\u200b\u7ecf\u5178\u200b\u7684\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b[2]\u3002\u200b\u4e3a\u4e86\u200b\u5b9e\u73b0\u200bDCGAN\u200b\u7684\u200b\u7f51\u7edc\u200b\u67b6\u6784\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u4e24\u4e2a\u200b\u65b0\u200b\u6587\u4ef6\u200b<code>mmagic/models/editors/dcgan/dcgan_generator.py</code>\u200b\u548c\u200b<code>mmagic/models/editors/dcgan/dcgan_discriminator.py</code>\uff0c\u200b\u5e76\u200b\u5b9e\u73b0\u200b\u751f\u6210\u5668\u200b(<code>class DCGANGenerator</code>) \u200b\u548c\u200b\u9274\u522b\u5668\u200b(<code>class DCGANDiscriminator</code>)\u3002</p> <p>\u200b\u5728\u200b\u8fd9\u200b\u4e00\u6b65\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5b9e\u73b0\u200b\u4e86\u200b<code>class DCGANGenerator</code>, <code>class DCGANDiscriminator</code> \u200b\u5e76\u200b\u5728\u200b<code>__init__</code>\u200b\u51fd\u6570\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u7f51\u7edc\u200b\u67b6\u6784\u200b\u3002 \u200b\u7279\u522b\u200b\u5730\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b<code>@MODULES.register_module()</code>\u200b\u6765\u200b\u5c06\u200b\u751f\u6210\u5668\u200b\u548c\u200b\u9274\u522b\u5668\u200b\u6dfb\u52a0\u200b\u5230\u200bMMagic\u200b\u7684\u200b\u6ce8\u518c\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u4ee5\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e3a\u4f8b\u200b:</p> <pre><code>import torch.nn as nn\nfrom mmcv.cnn import ConvModule\nfrom mmcv.runner import load_checkpoint\nfrom mmcv.utils.parrots_wrapper import _BatchNorm\nfrom mmengine.logging import MMLogger\nfrom mmengine.model.utils import normal_init\n\nfrom mmagic.models.builder import MODULES\nfrom ..common import get_module_device\n\n\n@MODULES.register_module()\nclass DCGANGenerator(nn.Module):\n    def __init__(self,\n                 output_scale,\n                 out_channels=3,\n                 base_channels=1024,\n                 input_scale=4,\n                 noise_size=100,\n                 default_norm_cfg=dict(type='BN'),\n                 default_act_cfg=dict(type='ReLU'),\n                 out_act_cfg=dict(type='Tanh'),\n                 pretrained=None):\n        super().__init__()\n        self.output_scale = output_scale\n        self.base_channels = base_channels\n        self.input_scale = input_scale\n        self.noise_size = noise_size\n\n        # \u200b\u4e0a\u200b\u91c7\u6837\u200b\u7684\u200b\u6b21\u6570\u200b\n        self.num_upsamples = int(np.log2(output_scale // input_scale))\n\n        # \u200b\u8f93\u51fa\u200b4x4\u200b\u7684\u200b\u7279\u5f81\u200b\u56fe\u200b\n        self.noise2feat = ConvModule(\n            noise_size,\n            base_channels,\n            kernel_size=4,\n            stride=1,\n            padding=0,\n            conv_cfg=dict(type='ConvTranspose2d'),\n            norm_cfg=default_norm_cfg,\n            act_cfg=default_act_cfg)\n\n        # \u200b\u5efa\u7acb\u200b\u4e0a\u200b\u91c7\u6837\u200b\u9aa8\u5e72\u200b\uff08\u200b\u4e0d\u200b\u5305\u62ec\u200b\u8f93\u51fa\u200b\u5c42\u200b\uff09\n        upsampling = []\n        curr_channel = base_channels\n        for _ in range(self.num_upsamples - 1):\n            upsampling.append(\n                ConvModule(\n                    curr_channel,\n                    curr_channel // 2,\n                    kernel_size=4,\n                    stride=2,\n                    padding=1,\n                    conv_cfg=dict(type='ConvTranspose2d'),\n                    norm_cfg=default_norm_cfg,\n                    act_cfg=default_act_cfg))\n\n            curr_channel //= 2\n\n        self.upsampling = nn.Sequential(*upsampling)\n\n        # \u200b\u8f93\u51fa\u200b\u5c42\u200b\n        self.output_layer = ConvModule(\n            curr_channel,\n            out_channels,\n            kernel_size=4,\n            stride=2,\n            padding=1,\n            conv_cfg=dict(type='ConvTranspose2d'),\n            norm_cfg=None,\n            act_cfg=out_act_cfg)\n</code></pre> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5b9e\u73b0\u200b\u4e86\u200b<code>DCGANGenerator</code>\u200b\u7684\u200b<code>forward</code>\u200b\u51fd\u6570\u200b\uff0c\u200b\u8be5\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b <code>noise</code>\u200b\u5f20\u91cf\u200b\u6216\u200b<code>num_batches</code>\uff0c\u200b\u7136\u540e\u200b\u8fd4\u56de\u200b<code>DCGANGenerator</code>\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002</p> <pre><code>    def forward(self, noise, num_batches=0, return_noise=False):\n        noise_batch = noise_batch.to(get_module_device(self))\n        x = self.noise2feat(noise_batch)\n        x = self.upsampling(x)\n        x = self.output_layer(x)\n        return x\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u4e3a\u200b\u4f60\u200b\u7684\u200b\u7f51\u7edc\u200b\u5b9e\u73b0\u200b\u7279\u5b9a\u200b\u7684\u200b\u6743\u91cd\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4f60\u200b\u9700\u8981\u200b\u81ea\u5df1\u200b\u6dfb\u52a0\u200b<code>init_weights</code>\u200b\u51fd\u6570\u200b\u3002</p> <pre><code>    def init_weights(self, pretrained=None):\n        if isinstance(pretrained, str):\n            logger = MMLogger.get_current_instance()\n            load_checkpoint(self, pretrained, strict=False, logger=logger)\n        elif pretrained is None:\n            for m in self.modules():\n                if isinstance(m, (nn.Conv2d, nn.ConvTranspose2d)):\n                    normal_init(m, 0, 0.02)\n                elif isinstance(m, _BatchNorm):\n                    nn.init.normal_(m.weight.data)\n                    nn.init.constant_(m.bias.data, 0)\n        else:\n            raise TypeError('pretrained must be a str or None but'\n                            f' got {type(pretrained)} instead.')\n</code></pre> <p>\u200b\u5728\u200b\u5b9e\u73b0\u200b<code>DCGANGenerator</code>\u200b\u7c7b\u200b\u4e4b\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u66f4\u65b0\u200b<code>mmagic/models/editors/__init__.py</code>\u200b\u4e2d\u200b\u7684\u200b\u6a21\u578b\u200b\u5217\u8868\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b<code>mmagic.models.editors</code>\u200b\u5bfc\u5165\u200b\u548c\u200b\u4f7f\u7528\u200b<code>DCGANGenerator</code>\u200b\u7c7b\u200b\u3002</p> <p>\u200b\u7c7b\u200b<code>DCGANDiscriminator</code>\u200b\u7684\u200b\u5b9e\u73b0\u200b\u9075\u5faa\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u903b\u8f91\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd9\u91cc\u200b\u627e\u5230\u200b\u5b9e\u73b0\u200b\u3002</p>"},{"location":"howto/models/#step-2-dcgan","title":"Step 2: \u200b\u8bbe\u8ba1\u200bDCGAN\u200b\u7684\u200b\u6a21\u578b","text":"<p>\u200b\u5728\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u7f51\u7edc\u200bModule\u200b\u4e4b\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5b9a\u4e49\u200b\u6211\u4eec\u200b\u7684\u200bModel\u200b\u7c7b\u200b <code>DCGAN</code>\u3002</p> <p>\u200b\u4f60\u200b\u7684\u200bModel\u200b\u5e94\u8be5\u200b\u7ee7\u627f\u200b\u81ea\u200bMMEngine\u200b\u63d0\u4f9b\u200b\u7684\u200b<code>BaseModel</code>\uff0c\u200b\u5e76\u200b\u5b9e\u73b0\u200b\u4e09\u4e2a\u200b\u51fd\u6570\u200b\uff0c<code>train_step</code>, <code>val_step</code>\u200b\u548c\u200b<code>test_step</code>\u3002</p> <ul> <li><code>train_step</code>:  \u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\u8d1f\u8d23\u200b\u66f4\u65b0\u200b\u7f51\u7edc\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u7531\u200bMMEngine\u200b\u7684\u200bLoop (<code>IterBasedTrainLoop</code>\u200b\u6216\u200b <code>EpochBasedTrainLoop</code>)\u200b\u8c03\u7528\u200b\u3002 <code>train_step</code>\u200b\u5c06\u200b\u6570\u636e\u200b\u6279\u5904\u7406\u200b\u548c\u200b<code>OptimWrapper</code>\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u5e76\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u65e5\u5fd7\u200b\u5b57\u5178\u200b\u3002</li> <li><code>val_step</code>: \u200b\u8be5\u200b\u51fd\u6570\u200b\u8d1f\u8d23\u200b\u5728\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u7528\u4e8e\u200b\u9a8c\u8bc1\u200b\u7684\u200b\u8f93\u51fa\u200b\uff0c\u200b\u7531\u200b <code>MultiValLoop</code>\u200b\u8c03\u7528\u200b\u3002</li> <li><code>test_step</code>: \u200b\u8be5\u200b\u51fd\u6570\u200b\u8d1f\u8d23\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u8f93\u51fa\u200b\uff0c\u200b\u7531\u200b<code>MultiTestLoop</code>\u200b\u8c03\u7528\u200b\u3002</li> </ul> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5728\u200b<code>train_step</code>, <code>val_step</code>\u200b\u548c\u200b<code>test_step</code>\u200b\u4e2d\u200b\uff0c\u200b\u8c03\u7528\u200b<code>DataPreprocessor</code>\u200b\u5bf9\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u8fdb\u884c\u200b\u9884\u5904\u7406\u200b\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u5c06\u200b\u5b83\u4eec\u200b\u63d0\u4f9b\u200b\u7ed9\u200b\u795e\u7ecf\u7f51\u7edc\u200b\u3002\u200b\u8981\u200b\u4e86\u89e3\u200b\u6709\u5173\u200b<code>DataPreprocessor</code>\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u6b64\u200b\u6587\u4ef6\u200b and \u200b\u548c\u200b\u672c\u200b\u6559\u7a0b\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u7b80\u5316\u200b\u4f7f\u7528\u200b\uff0c\u200b\u6211\u4eec\u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\u63d0\u4f9b\u200b\u4e86\u200b<code>BaseGAN</code>\u200b\u7c7b\u200b\uff0c\u200b\u5b83\u200b\u4e3a\u200bGAN\u200b\u6a21\u578b\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u901a\u7528\u200b\u7684\u200b<code>train_step</code>, <code>val_step</code>\u200b\u548c\u200b<code>test_step</code>\u200b\u51fd\u6570\u200b\u3002\u200b\u4f7f\u7528\u200b<code>BaseGAN</code>\u200b\u4f5c\u4e3a\u200b\u57fa\u7c7b\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u7279\u5b9a\u200b\u7684\u200bGAN\u200b\u7b97\u6cd5\u200b\u53ea\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200b<code>train_generator</code> and <code>train_discriminator</code>.</p> <p>\u200b\u5728\u200b<code>train_step</code>\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u652f\u6301\u200b\u6570\u636e\u200b\u9884\u5904\u7406\u200b\u3001\u200b\u68af\u5ea6\u200b\u7d2f\u79ef\u200b(\u200b\u7531\u200b<code>OptimWrapper</code>\u200b\u5b9e\u73b0\u200b)\u200b\u548c\u200b\u6307\u6570\u200b\u6ed1\u52a8\u200b\u5e73\u5747\u200b(EMA)\u200b\u901a\u8fc7\u200b(<code>ExponentialMovingAverage</code>)\u200b\u5b9e\u73b0\u200b\u3002\u200b\u4f7f\u7528\u200b<code>BaseGAN.train_step</code>\uff0c\u200b\u6bcf\u4e2a\u200b\u7279\u5b9a\u200b\u7684\u200bGAN\u200b\u7b97\u6cd5\u200b\u53ea\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200b<code>train_generator</code>\u200b\u548c\u200b<code>train_discriminator</code>\u3002</p> <pre><code>    def train_step(self, data: dict,\n                   optim_wrapper: OptimWrapperDict) -&gt; Dict[str, Tensor]:\n        message_hub = MessageHub.get_current_instance()\n        curr_iter = message_hub.get_info('iter')\n        data = self.data_preprocessor(data, True)\n        disc_optimizer_wrapper: OptimWrapper = optim_wrapper['discriminator']\n        disc_accu_iters = disc_optimizer_wrapper._accumulative_counts\n\n        # \u200b\u8bad\u7ec3\u200b\u5224\u522b\u200b\u5668\u200b\uff0c\u200b\u4f7f\u7528\u200bMMEngine\u200b\u63d0\u4f9b\u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\u7ba1\u7406\u5668\u200b\n        with disc_optimizer_wrapper.optim_context(self.discriminator):\n            # train_discriminator should be implemented!\n            log_vars = self.train_discriminator(\n                **data, optimizer_wrapper=disc_optimizer_wrapper)\n\n        # add 1 to `curr_iter` because iter is updated in train loop.\n        # Whether to update the generator. We update generator with\n        # discriminator is fully updated for `self.n_discriminator_steps`\n        # iterations. And one full updating for discriminator contains\n        # `disc_accu_counts` times of grad accumulations.\n        if (curr_iter + 1) % (self.discriminator_steps * disc_accu_iters) == 0:\n            set_requires_grad(self.discriminator, False)\n            gen_optimizer_wrapper = optim_wrapper['generator']\n            gen_accu_iters = gen_optimizer_wrapper._accumulative_counts\n\n            log_vars_gen_list = []\n            # init optimizer wrapper status for generator manually\n            gen_optimizer_wrapper.initialize_count_status(\n                self.generator, 0, self.generator_steps * gen_accu_iters)\n            # update generator, use context manager provided by MMEngine\n            for _ in range(self.generator_steps * gen_accu_iters):\n                with gen_optimizer_wrapper.optim_context(self.generator):\n                    # train_generator should be implemented!\n                    log_vars_gen = self.train_generator(\n                        **data, optimizer_wrapper=gen_optimizer_wrapper)\n\n                log_vars_gen_list.append(log_vars_gen)\n            log_vars_gen = gather_log_vars(log_vars_gen_list)\n            log_vars_gen.pop('loss', None)  # remove 'loss' from gen logs\n\n            set_requires_grad(self.discriminator, True)\n\n            # only do ema after generator update\n            if self.with_ema_gen and (curr_iter + 1) &gt;= (\n                    self.ema_start * self.discriminator_steps *\n                    disc_accu_iters):\n                self.generator_ema.update_parameters(\n                    self.generator.module\n                    if is_model_wrapper(self.generator) else self.generator)\n\n            log_vars.update(log_vars_gen)\n\n        # return the log dict\n        return log_vars\n</code></pre> <p>\u200b\u5728\u200b<code>val_step</code>\u200b\u548c\u200b<code>test_step</code>\uff0c\u200b\u6211\u4eec\u200b\u6e10\u8fdb\u200b\u5730\u200b\u8c03\u7528\u200b\u6570\u636e\u200b\u9884\u5904\u7406\u200b\u548c\u200b<code>BaseGAN.forward</code>\u3002</p> <pre><code>    def val_step(self, data: dict) -&gt; SampleList:\n        data = self.data_preprocessor(data)\n        # call `forward`\n        outputs = self(**data)\n        return outputs\n\n    def test_step(self, data: dict) -&gt; SampleList:\n        data = self.data_preprocessor(data)\n        # call `orward`\n        outputs = self(**data)\n        return outputs\n</code></pre> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5728\u200b<code>DCGAN</code>\u200b\u7c7b\u4e2d\u200b\u5b9e\u73b0\u200b<code>train_generator</code>\u200b\u548c\u200b<code>train_discriminator</code>\u3002</p> <pre><code>from typing import Dict, Tuple\n\nimport torch\nimport torch.nn.functional as F\nfrom mmengine.optim import OptimWrapper\nfrom torch import Tensor\n\nfrom mmagic.registry import MODELS\nfrom .base_gan import BaseGAN\n\n\n@MODELS.register_module()\nclass DCGAN(BaseGAN):\n    def disc_loss(self, disc_pred_fake: Tensor,\n                  disc_pred_real: Tensor) -&gt; Tuple:\n        losses_dict = dict()\n        losses_dict['loss_disc_fake'] = F.binary_cross_entropy_with_logits(\n            disc_pred_fake, 0. * torch.ones_like(disc_pred_fake))\n        losses_dict['loss_disc_real'] = F.binary_cross_entropy_with_logits(\n            disc_pred_real, 1. * torch.ones_like(disc_pred_real))\n\n        loss, log_var = self.parse_losses(losses_dict)\n        return loss, log_var\n\n    def gen_loss(self, disc_pred_fake: Tensor) -&gt; Tuple:\n        losses_dict = dict()\n        losses_dict['loss_gen'] = F.binary_cross_entropy_with_logits(\n            disc_pred_fake, 1. * torch.ones_like(disc_pred_fake))\n        loss, log_var = self.parse_losses(losses_dict)\n        return loss, log_var\n\n    def train_discriminator(\n            self, inputs, data_sample,\n            optimizer_wrapper: OptimWrapper) -&gt; Dict[str, Tensor]:\n        real_imgs = inputs['img']\n\n        num_batches = real_imgs.shape[0]\n\n        noise_batch = self.noise_fn(num_batches=num_batches)\n        with torch.no_grad():\n            fake_imgs = self.generator(noise=noise_batch, return_noise=False)\n\n        disc_pred_fake = self.discriminator(fake_imgs)\n        disc_pred_real = self.discriminator(real_imgs)\n\n        parsed_losses, log_vars = self.disc_loss(disc_pred_fake,\n                                                 disc_pred_real)\n        optimizer_wrapper.update_params(parsed_losses)\n        return log_vars\n\n    def train_generator(self, inputs, data_sample,\n                        optimizer_wrapper: OptimWrapper) -&gt; Dict[str, Tensor]:\n        num_batches = inputs['img'].shape[0]\n\n        noise = self.noise_fn(num_batches=num_batches)\n        fake_imgs = self.generator(noise=noise, return_noise=False)\n\n        disc_pred_fake = self.discriminator(fake_imgs)\n        parsed_loss, log_vars = self.gen_loss(disc_pred_fake)\n\n        optimizer_wrapper.update_params(parsed_loss)\n        return log_vars\n</code></pre> <p>\u200b\u5728\u200b\u5b9e\u73b0\u200b\u4e86\u200b<code>class DCGAN</code>\u200b\u4e4b\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u66f4\u65b0\u200b<code>mmagic/models/__init__.py</code>\u200b\u4e2d\u200b\u7684\u200b\u6a21\u578b\u200b\u5217\u8868\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b<code>mmagic.models</code>\u200b\u5bfc\u5165\u200b\u548c\u200b\u4f7f\u7528\u200b<code>class DCGAN</code>\u3002</p>"},{"location":"howto/models/#step-3-dcgan","title":"Step 3: \u200b\u5f00\u59cb\u200b\u8bad\u7ec3\u200bDCGAN","text":"<p>\u200b\u5728\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u7f51\u7edc\u200bModule\u200b\u548c\u200bDCGAN\u200b\u7684\u200bModel\u200b\u4e4b\u540e\u200b\uff0c\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u6587\u4ef6\u200b<code>configs/dcgan/dcgan_1xb128-5epoches_lsun-bedroom-64x64.py</code> \u200b\u6765\u200b\u8bbe\u7f6e\u200b\u8bad\u7ec3\u200bDCGAN\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002</p> <p>\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u6307\u5b9a\u200b\u6a21\u578b\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c<code>class DCGAN</code>\uff0c\u200b\u5305\u62ec\u200b\u751f\u6210\u5668\u200b\u7f51\u7edc\u200b\u67b6\u6784\u200b\u548c\u200b\u8f93\u5165\u200b\u5f20\u91cf\u200b\u7684\u200b\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\u3002</p> <pre><code># model settings\nmodel = dict(\n    type='DCGAN',\n    noise_size=100,\n    data_preprocessor=dict(type='GANDataPreprocessor'),\n    generator=dict(type='DCGANGenerator', output_scale=64, base_channels=1024),\n    discriminator=dict(\n        type='DCGANDiscriminator',\n        input_scale=64,\n        output_scale=4,\n        out_channels=1))\n</code></pre> <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u9700\u8981\u200b\u6839\u636e\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u6307\u5b9a\u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u548c\u200b\u6d4b\u8bd5\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u3002 \u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5f00\u59cb\u200b\u8bad\u7ec3\u200b\u6211\u4eec\u200b\u81ea\u5df1\u200b\u7684\u200b\u6a21\u578b\u200b:</p> <pre><code>python tools/train.py configs/dcgan/dcgan_1xb128-5epoches_lsun-bedroom-64x64.py\n</code></pre>"},{"location":"howto/models/#_2","title":"\u53c2\u8003\u6587\u732e","text":"<ol> <li> <p>Dong, Chao and Loy, Chen Change and He, Kaiming and Tang, Xiaoou. Image Super-Resolution Using Deep Convolutional Networks[J]. IEEE transactions on pattern analysis and machine intelligence, 2015.</p> </li> <li> <p>Radford, Alec, Luke Metz, and Soumith Chintala. \"Unsupervised representation learning with deep convolutional generative adversarial networks.\" arXiv preprint arXiv:1511.06434 (2015).</p> </li> </ol>"},{"location":"howto/transforms/","title":"\u5982\u4f55\u200b\u8bbe\u8ba1\u200b\u81ea\u5df1\u200b\u7684\u200b\u6570\u636e\u200b\u53d8\u6362","text":"<p>\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ecb\u7ecd\u200bMMagic\u200b\u4e2d\u200b\u53d8\u6362\u200b\u6d41\u6c34\u7ebf\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u3002</p> <p>The structure of this guide are as follows:</p> <ul> <li>\u200b\u5982\u4f55\u200b\u8bbe\u8ba1\u200b\u81ea\u5df1\u200b\u7684\u200b\u6570\u636e\u200b\u53d8\u6362\u200b</li> <li>MMagic\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u6d41\u6c34\u7ebf\u200b<ul> <li>\u200b\u6570\u636e\u200b\u53d8\u6362\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u793a\u4f8b\u200b</li> <li>BasicVSR\u200b\u7684\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b</li> <li>Pix2Pix\u200b\u7684\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b</li> </ul> </li> <li>MMagic\u200b\u4e2d\u200b\u652f\u6301\u200b\u7684\u200b\u6570\u636e\u200b\u53d8\u6362\u200b<ul> <li>\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b</li> <li>\u200b\u9884\u5904\u7406\u200b</li> <li>\u200b\u683c\u5f0f\u5316\u200b</li> </ul> </li> <li>\u200b\u6269\u5c55\u200b\u548c\u200b\u4f7f\u7528\u200b\u81ea\u5b9a\u4e49\u200b\u6d41\u6c34\u7ebf\u200b<ul> <li>\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200bMyTransform\u200b\u793a\u4f8b\u200b</li> <li>\u200b\u4e00\u4e2a\u200b\u7ffb\u8f6c\u200b\u53d8\u6362\u200b\u7684\u200b\u793a\u4f8b\u200b</li> </ul> </li> </ul>"},{"location":"howto/transforms/#mmagic","title":"MMagic\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u6d41\u6c34\u7ebf","text":"<p>\u200b\u6309\u7167\u200b\u5178\u578b\u200b\u7684\u200b\u60ef\u4f8b\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b <code>Dataset</code> \u200b\u548c\u200b <code>DataLoader</code> \u200b\u6765\u200b\u52a0\u8f7d\u200b\u591a\u4e2a\u200b\u7ebf\u7a0b\u200b\u7684\u200b\u6570\u636e\u200b\u3002 <code>Dataset</code> \u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u4e0e\u200b\u6a21\u578b\u200b\u7684\u200bforward\u200b\u65b9\u6cd5\u200b\u7684\u200b\u53c2\u6570\u200b\u76f8\u5bf9\u200b\u5e94\u200b\u7684\u200b\u6570\u636e\u9879\u200b\u7684\u200b\u5b57\u5178\u200b\u3002</p> <p>\u200b\u6570\u636e\u200b\u51c6\u5907\u200b\u6d41\u6c34\u7ebf\u200b\u548c\u200b\u6570\u636e\u200b\u96c6\u662f\u200b\u5206\u5f00\u200b\u7684\u200b\u3002\u200b\u901a\u5e38\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u6807\u6ce8\u200b\uff0c\u200b\u800c\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u7ba1\u9053\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u51c6\u5907\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u5b57\u5178\u200b\u7684\u200b\u6240\u6709\u200b\u6b65\u9aa4\u200b\u3002</p> <p>\u200b\u4e00\u4e2a\u200b\u6d41\u6c34\u7ebf\u200b\u7531\u200b\u4e00\u8fde\u4e32\u200b\u7684\u200b\u64cd\u4f5c\u200b\u7ec4\u6210\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u5b57\u5178\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u4e3a\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u53d8\u6362\u200b\u8f93\u51fa\u200b\u4e00\u4e2a\u200b\u5b57\u5178\u200b\u3002</p> <p>\u200b\u8fd9\u4e9b\u200b\u64cd\u4f5c\u200b\u88ab\u200b\u5206\u4e3a\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u3001\u200b\u9884\u5904\u7406\u200b\u548c\u200b\u683c\u5f0f\u5316\u200b\u3002</p> <p>\u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\uff0c\u200b\u6240\u6709\u200b\u6570\u636e\u200b\u53d8\u6362\u200b\u90fd\u200b\u7ee7\u627f\u200b\u81ea\u200b <code>BaseTransform</code>\u3002 \u200b\u53d8\u6362\u200b\u7684\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u7c7b\u578b\u200b\u90fd\u200b\u662f\u200b\u5b57\u5178\u200b\u3002</p>"},{"location":"howto/transforms/#_2","title":"\u6570\u636e\u200b\u53d8\u6362\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u793a\u4f8b","text":"<pre><code>&gt;&gt;&gt; from mmagic.transforms import LoadPairedImageFromFile\n&gt;&gt;&gt; transforms = LoadPairedImageFromFile(\n&gt;&gt;&gt;     key='pair',\n&gt;&gt;&gt;     domain_a='horse',\n&gt;&gt;&gt;     domain_b='zebra',\n&gt;&gt;&gt;     flag='color'),\n&gt;&gt;&gt; data_dict = {'pair_path': './data/pix2pix/facades/train/1.png'}\n&gt;&gt;&gt; data_dict = transforms(data_dict)\n&gt;&gt;&gt; print(data_dict.keys())\ndict_keys(['pair_path', 'pair', 'pair_ori_shape', 'img_mask', 'img_photo', 'img_mask_path', 'img_photo_path', 'img_mask_ori_shape', 'img_photo_ori_shape'])\n</code></pre> <p>\u200b\u4e00\u822c\u6765\u8bf4\u200b\uff0c\u200b\u53d8\u6362\u200b\u6d41\u6c34\u7ebf\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u6b65\u200b\u5fc5\u987b\u200b\u662f\u200b <code>PackInputs</code>. <code>PackInputs</code> \u200b\u5c06\u200b\u628a\u200b\u5904\u7406\u200b\u8fc7\u200b\u7684\u200b\u6570\u636e\u200b\u6253\u5305\u200b\u6210\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u4e24\u4e2a\u200b\u5b57\u6bb5\u200b\u7684\u200b\u5b57\u5178\u200b\uff1a<code>inputs</code> \u200b\u548c\u200b <code>data_samples</code>. <code>inputs</code> \u200b\u662f\u200b\u4f60\u200b\u60f3\u200b\u7528\u4f5c\u200b\u6a21\u578b\u200b\u8f93\u5165\u200b\u7684\u200b\u53d8\u91cf\u200b\uff0c\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u662f\u200b <code>torch.Tensor</code> \u200b\u7684\u200b\u7c7b\u578b\u200b\uff0c <code>torch.Tensor</code> \u200b\u7684\u200b\u5b57\u5178\u200b\uff0c\u200b\u6216\u8005\u200b\u4f60\u200b\u60f3\u8981\u200b\u7684\u200b\u4efb\u4f55\u200b\u7c7b\u578b\u200b\u3002 <code>data_samples</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b <code>DataSample</code> \u200b\u7684\u200b\u5217\u8868\u200b. \u200b\u6bcf\u4e2a\u200b <code>DataSample</code> \u200b\u90fd\u200b\u5305\u542b\u200b\u771f\u5b9e\u200b\u503c\u200b\u548c\u200b\u5bf9\u5e94\u200b\u8f93\u5165\u200b\u7684\u200b\u5fc5\u8981\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"howto/transforms/#basicvsr","title":"BasicVSR\u200b\u7684\u200b\u4e00\u4e2a\u200b\u793a\u4f8b","text":"<p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200bBasicVSR\u200b\u7684\u200b\u6d41\u6c34\u7ebf\u200b\u793a\u4f8b\u200b\u3002</p> <pre><code>train_pipeline = [\n    dict(type='LoadImageFromFile', key='img', channel_order='rgb'),\n    dict(type='LoadImageFromFile', key='gt', channel_order='rgb'),\n    dict(type='SetValues', dictionary=dict(scale=scale)),\n    dict(type='PairedRandomCrop', gt_patch_size=256),\n    dict(\n        type='Flip',\n        keys=['img', 'gt'],\n        flip_ratio=0.5,\n        direction='horizontal'),\n    dict(\n        type='Flip', keys=['img', 'gt'], flip_ratio=0.5, direction='vertical'),\n    dict(type='RandomTransposeHW', keys=['img', 'gt'], transpose_ratio=0.5),\n    dict(type='MirrorSequence', keys=['img', 'gt']),\n    dict(type='PackInputs')\n]\n\nval_pipeline = [\n    dict(type='GenerateSegmentIndices', interval_list=[1]),\n    dict(type='LoadImageFromFile', key='img', channel_order='rgb'),\n    dict(type='LoadImageFromFile', key='gt', channel_order='rgb'),\n    dict(type='PackInputs')\n]\n\ntest_pipeline = [\n    dict(type='LoadImageFromFile', key='img', channel_order='rgb'),\n    dict(type='LoadImageFromFile', key='gt', channel_order='rgb'),\n    dict(type='MirrorSequence', keys=['img']),\n    dict(type='PackInputs')\n]\n</code></pre> <p>\u200b\u5bf9\u4e8e\u200b\u6bcf\u4e2a\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6211\u4eec\u200b\u5217\u51fa\u200b\u4e86\u200b\u6dfb\u52a0\u200b/\u200b\u66f4\u65b0\u200b/\u200b\u5220\u9664\u200b\u7684\u200b\u76f8\u5173\u200b\u5b57\u5178\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u6807\u8bb0\u200b\u4e3a\u200b '*' \u200b\u7684\u200b\u5b57\u5178\u200b\u5b57\u6bb5\u200b\u662f\u200b\u53ef\u9009\u200b\u7684\u200b\u3002</p>"},{"location":"howto/transforms/#pix2pix","title":"Pix2Pix\u200b\u7684\u200b\u4e00\u4e2a\u200b\u793a\u4f8b","text":"<p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5728\u200baerial2maps\u200b\u6570\u636e\u200b\u96c6\u4e0a\u200bPix2Pix\u200b\u8bad\u7ec3\u200b\u7684\u200b\u6d41\u6c34\u7ebf\u200b\u793a\u4f8b\u200b\u3002</p> <pre><code>source_domain = 'aerial'\ntarget_domain = 'map'\n\npipeline = [\n    dict(\n        type='LoadPairedImageFromFile',\n        io_backend='disk',\n        key='pair',\n        domain_a=domain_a,\n        domain_b=domain_b,\n        flag='color'),\n    dict(\n        type='TransformBroadcaster',\n        mapping={'img': [f'img_{domain_a}', f'img_{domain_b}']},\n        auto_remap=True,\n        share_random_params=True,\n        transforms=[\n            dict(\n                type='mmagic.Resize', scale=(286, 286),\n                interpolation='bicubic'),\n            dict(type='mmagic.FixedCrop', crop_size=(256, 256))\n        ]),\n    dict(\n        type='Flip',\n        keys=[f'img_{domain_a}', f'img_{domain_b}'],\n        direction='horizontal'),\n    dict(\n        type='PackInputs',\n        keys=[f'img_{domain_a}', f'img_{domain_b}', 'pair'])\n</code></pre>"},{"location":"howto/transforms/#mmagic_1","title":"MMagic\u200b\u4e2d\u200b\u652f\u6301\u200b\u7684\u200b\u6570\u636e\u200b\u53d8\u6362","text":""},{"location":"howto/transforms/#_3","title":"\u6570\u636e\u200b\u52a0\u8f7d","text":"Transform Modification of Results' keys <code>LoadImageFromFile</code>              - add: img, img_path, img_ori_shape, \\*ori_img           <code>RandomLoadResizeBg</code>              - add: bg           <code>LoadMask</code>              - add: mask           <code>GetSpatialDiscountMask</code>              - add: discount_mask"},{"location":"howto/transforms/#_4","title":"\u9884\u5904\u7406","text":"Transform Modification of Results' keys <code>Resize</code>              - add: scale_factor, keep_ratio, interpolation, backend             - update: specified by <code>keys</code> <code>MATLABLikeResize</code>              - add: scale, output_shape             - update: specified by <code>keys</code> <code>RandomRotation</code>              - add: degrees             - update: specified by <code>keys</code> <code>Flip</code>              - add: flip, flip_direction             - update: specified by <code>keys</code> <code>RandomAffine</code>              - update: specified by <code>keys</code> <code>RandomJitter</code>              - update: fg (img)           <code>ColorJitter</code>              - update: specified by <code>keys</code> <code>BinarizeImage</code>              - update: specified by <code>keys</code> <code>RandomMaskDilation</code>              - add: img_dilate_kernel_size           <code>RandomTransposeHW</code>              - add: transpose        <code>RandomDownSampling</code>              - update: scale, gt (img), lq (img)           <code>RandomBlur</code>              - update: specified by <code>keys</code> <code>RandomResize</code>              - update: specified by <code>keys</code> <code>RandomNoise</code>              - update: specified by <code>keys</code> <code>RandomJPEGCompression</code>              - update: specified by <code>keys</code> <code>RandomVideoCompression</code>              - update: specified by <code>keys</code> <code>DegradationsWithShuffle</code>              - update: specified by <code>keys</code> <code>GenerateFrameIndices</code>              - update: img_path (gt_path, lq_path)           <code>GenerateFrameIndiceswithPadding</code>              - update: img_path (gt_path, lq_path)           <code>TemporalReverse</code>              - add: reverse             - update: specified by <code>keys</code> <code>GenerateSegmentIndices</code>              - add: interval             - update: img_path (gt_path, lq_path)           <code>MirrorSequence</code>              - update: specified by <code>keys</code> <code>CopyValues</code>              - add: specified by <code>dst_key</code> <code>UnsharpMasking</code>              - add: img_unsharp           <code>Crop</code>              - add: img_crop_bbox, crop_size             - update: specified by <code>keys</code> <code>RandomResizedCrop</code>              - add: img_crop_bbox             - update: specified by <code>keys</code> <code>FixedCrop</code>              - add: crop_size, crop_pos             - update: specified by <code>keys</code> <code>PairedRandomCrop</code>              - update: gt (img), lq (img)           <code>CropAroundCenter</code>              - add: crop_bbox             - update: fg (img), alpha (img), trimap (img), bg (img)           <code>CropAroundUnknown</code>              - add: crop_bbox             - update: specified by <code>keys</code> <code>CropAroundFg</code>              - add: crop_bbox             - update: specified by <code>keys</code> <code>ModCrop</code>              - update: gt (img)           <code>CropLike</code>              - update: specified by <code>target_key</code> <code>GetMaskedImage</code>              - add: masked_img           <code>GenerateFacialHeatmap</code>              - add: heatmap           <code>GenerateCoordinateAndCell</code>              - add: coord, cell             - update: gt (img)           <code>Normalize</code>              - add: img_norm_cfg             - update: specified by <code>keys</code> <code>RescaleToZeroOne</code>              - update: specified by <code>keys</code>"},{"location":"howto/transforms/#_5","title":"\u683c\u5f0f\u5316","text":"Transform Modification of Results' keys <code>ToTensor</code>              update: specified by <code>keys</code>.           <code>FormatTrimap</code>              - update: trimap           <code>PackInputs</code>              - add: inputs, data_sample             - remove: all other keys"},{"location":"howto/transforms/#albumentations","title":"Albumentations","text":"<p>MMagic \u200b\u652f\u6301\u200b\u6dfb\u52a0\u200b Albumentations \u200b\u5e93\u4e2d\u200b\u7684\u200b transformation\uff0c\u200b\u8bf7\u200b\u6d4f\u89c8\u200b https://albumentations.ai/docs/getting_started/transforms_and_targets \u200b\u83b7\u53d6\u200b\u66f4\u200b\u591a\u200b transformation \u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b Albumentations \u200b\u7684\u200b\u793a\u4f8b\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>albu_transforms = [\n   dict(\n         type='Resize',\n         height=100,\n         width=100,\n   ),\n   dict(\n         type='RandomFog',\n         p=0.5,\n   ),\n   dict(\n         type='RandomRain',\n         p=0.5\n   ),\n   dict(\n         type='RandomSnow',\n         p=0.5,\n   ),\n]\npipeline = [\n   dict(\n         type='LoadImageFromFile',\n         key='img',\n         color_type='color',\n         channel_order='rgb',\n         imdecode_backend='cv2'),\n   dict(\n         type='Albumentations',\n         keys=['img'],\n         transforms=albu_transforms),\n   dict(type='PackInputs')\n]\n</code></pre>"},{"location":"howto/transforms/#_6","title":"\u6269\u5c55\u200b\u548c\u200b\u4f7f\u7528\u200b\u81ea\u5b9a\u4e49\u200b\u6d41\u6c34\u7ebf","text":""},{"location":"howto/transforms/#mytransform","title":"\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200bMyTransform\u200b\u793a\u4f8b","text":"<ol> <li>\u200b\u5728\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u5199\u5165\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6d41\u6c34\u7ebf\u200b\uff0c\u200b\u4f8b\u5982\u200b\u5728\u200b <code>my_pipeline.py</code>\u200b\u4e2d\u200b\u3002\u200b\u5b83\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u5b57\u5178\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u5b57\u5178\u200b\u3002</li> </ol> <pre><code>import random\nfrom mmcv.transforms import BaseTransform\nfrom mmagic.registry import TRANSFORMS\n\n\n@TRANSFORMS.register_module()\nclass MyTransform(BaseTransform):\n    \"\"\"Add your transform\n\n    Args:\n        p (float): Probability of shifts. Default 0.5.\n    \"\"\"\n\n    def __init__(self, p=0.5):\n        self.p = p\n\n    def transform(self, results):\n        if random.random() &gt; self.p:\n            results['dummy'] = True\n        return results\n\n    def __repr__(self):\n\n        repr_str = self.__class__.__name__\n        repr_str += (f'(p={self.p})')\n\n        return repr_str\n</code></pre> <ol> <li>\u200b\u5728\u200b\u4f60\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u5bfc\u5165\u200b\u5e76\u200b\u4f7f\u7528\u200b\u8be5\u200b\u6d41\u6c34\u7ebf\u200b\u3002</li> </ol> <p>\u200b\u786e\u4fdd\u200b\u5bfc\u5165\u200b\u76f8\u5bf9\u200b\u4e8e\u200b\u4f60\u200b\u7684\u200b\u8bad\u7ec3\u200b\u811a\u672c\u200b\u6240\u5728\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u3002</p> <pre><code>train_pipeline = [\n    ...\n    dict(type='MyTransform', p=0.2),\n    ...\n]\n</code></pre>"},{"location":"howto/transforms/#_7","title":"\u4e00\u4e2a\u200b\u7ffb\u8f6c\u200b\u53d8\u6362\u200b\u7684\u200b\u793a\u4f8b","text":"<p>\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u4ee5\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u7ffb\u8f6c\u200b\u53d8\u6362\u200b\u4e3a\u4f8b\u200b\uff1a</p> <pre><code>import random\nimport mmcv\nfrom mmcv.transforms import BaseTransform, TRANSFORMS\n\n@TRANSFORMS.register_module()\nclass MyFlip(BaseTransform):\n    def __init__(self, direction: str):\n        super().__init__()\n        self.direction = direction\n\n    def transform(self, results: dict) -&gt; dict:\n        img = results['img']\n        results['img'] = mmcv.imflip(img, direction=self.direction)\n        return results\n</code></pre> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e00\u4e2a\u200b <code>MyFlip</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u7528\u200b\u5b83\u200b\u6765\u200b\u5904\u7406\u200b\u6570\u636e\u200b\u5b57\u5178\u200b\u3002</p> <pre><code>import numpy as np\n\ntransform = MyFlip(direction='horizontal')\ndata_dict = {'img': np.random.rand(224, 224, 3)}\ndata_dict = transform(data_dict)\nprocessed_img = data_dict['img']\n</code></pre> <p>\u200b\u6216\u8005\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7684\u200b\u6570\u636e\u200b\u6d41\u6c34\u7ebf\u200b\u4e2d\u200b\u4f7f\u7528\u200b <code>MyFlip</code> \u200b\u53d8\u6362\u200b\u3002</p> <pre><code>pipeline = [\n    ...\n    dict(type='MyFlip', direction='horizontal'),\n    ...\n]\n</code></pre> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u5728\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u4f7f\u7528\u200b <code>MyFlip</code> \uff0c\u200b\u4f60\u200b\u5fc5\u987b\u200b\u786e\u4fdd\u200b\u5728\u200b\u7a0b\u5e8f\u8fd0\u884c\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u5bfc\u5165\u200b\u5305\u542b\u200b <code>MyFlip</code> \u200b\u7684\u200b\u6587\u4ef6\u200b\u3002</p>"},{"location":"migration/amp/","title":"\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b\u7684\u200b\u8fc1\u79fb","text":"<p>\u200b\u5728\u200b 0.x \u200b\u7248\u4e2d\u200b\uff0cMMEditing \u200b\u5e76\u200b\u4e0d\u200b\u652f\u6301\u200b\u5bf9\u200b\u6574\u4f53\u200b\u524d\u5411\u200b\u8fc7\u7a0b\u200b\u7684\u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b\u3002\u200b\u76f8\u53cd\u200b\uff0c\u200b\u7528\u6237\u200b\u5fc5\u987b\u200b\u4f7f\u7528\u200b <code>auto_fp16</code> \u200b\u88c5\u9970\u200b\u5668\u6765\u200b\u9002\u914d\u200b\u7279\u5b9a\u200b\u5b50\u200b\u6a21\u5757\u200b\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u5c06\u5b50\u200b\u6a21\u5757\u200b\u7684\u200b\u53c2\u6570\u200b\u8f6c\u5316\u6210\u200b fp16\u3002\u200b\u8fd9\u6837\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u62e5\u6709\u200b\u5bf9\u6a21\u578b\u200b\u53c2\u6570\u200b\u7684\u200b\u66f4\u200b\u7ec6\u7c92\u5ea6\u200b\u7684\u200b\u63a7\u5236\u200b\uff0c\u200b\u4f46\u662f\u200b\u8be5\u200b\u65b9\u6cd5\u200b\u4f7f\u7528\u200b\u8d77\u6765\u200b\u5f88\u200b\u7e41\u7410\u200b\uff0c\u200b\u800c\u4e14\u200b\u7528\u6237\u200b\u9700\u8981\u200b\u81ea\u5df1\u200b\u5904\u7406\u200b\u4e00\u4e9b\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6bd4\u5982\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u7684\u200b\u7f29\u653e\u200b</p> <p>MMagic 1.x \u200b\u7248\u200b\u4f7f\u7528\u200b\u4e86\u200b MMEngine \u200b\u63d0\u4f9b\u200b\u7684\u200b  <code>AmpOptimWrapper</code>\uff0c\u200b\u5728\u200b <code>AmpOptimWrapper.update_params</code> \u200b\u4e2d\u200b\uff0c\u200b\u68af\u5ea6\u200b\u7f29\u653e\u200b\u548c\u200b <code>GradScaler</code> \u200b\u66f4\u65b0\u200b\u5c06\u200b\u88ab\u200b\u81ea\u52a8\u200b\u6267\u884c\u200b\uff0c\u200b\u4e14\u200b\u5728\u200b <code>optim_context</code> \u200b\u4e0a\u4e0b\u6587\u200b\u7ba1\u7406\u200b\u5176\u4e2d\u200b\uff0c<code>auto_cast</code>\u200b\u88ab\u200b\u5e94\u7528\u200b\u5230\u200b\u6574\u4e2a\u200b\u524d\u5411\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u5177\u4f53\u6765\u8bf4\u200b\uff0c0.x \u200b\u7248\u200b\u548c\u200b 1.x \u200b\u7248\u200b\u4e4b\u95f4\u200b\u7684\u200b\u5dee\u5f02\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p>  0.x \u200b\u7248\u200b   1.x \u200b\u7248\u200b  <pre><code># \u200b\u914d\u7f6e\u200b\nrunner = dict(fp16_loss_scaler=dict(init_scale=512))\n</code></pre> <pre><code># \u200b\u4ee3\u7801\u200b\nimport torch.nn as nn\nfrom mmedit.models.builder import build_model\nfrom mmedit.core.runners.fp16_utils import auto_fp16\n\n\nclass DemoModule(nn.Module):\n    def __init__(self, cfg):\n        self.net = build_model(cfg)\n\n    @auto_fp16\n    def forward(self, x):\n        return self.net(x)\n\nclass DemoModel(nn.Module):\n\n    def __init__(self, cfg):\n        super().__init__(self)\n        self.demo_network = DemoModule(cfg)\n\n    def train_step(self,\n                   data_batch,\n                   optimizer,\n                   ddp_reducer=None,\n                   loss_scaler=None,\n                   use_apex_amp=False,\n                   running_status=None):\n        # \u200b\u4ece\u200b data_batch \u200b\u4e2d\u200b\u83b7\u53d6\u6570\u636e\u200b\n        inputs = data_batch['img']\n        output = self.demo_network(inputs)\n\n        optimizer.zero_grad()\n        loss, log_vars = self.get_loss(data_dict_)\n\n        if ddp_reducer is not None:\n            ddp_reducer.prepare_for_backward(_find_tensors(loss_disc))\n\n        if loss_scaler:\n            # \u200b\u6dfb\u52a0\u200b fp16 \u200b\u652f\u6301\u200b\n            loss_scaler.scale(loss_disc).backward()\n        elif use_apex_amp:\n            from apex import amp\n            with amp.scale_loss(loss_disc, optimizer,\n                    loss_id=0) as scaled_loss_disc:\n                scaled_loss_disc.backward()\n        else:\n            loss_disc.backward()\n\n        if loss_scaler:\n            loss_scaler.unscale_(optimizer)\n            loss_scaler.step(optimizer)\n        else:\n            optimizer.step()\n</code></pre> <pre><code># \u200b\u914d\u7f6e\u200b\noptim_wrapper = dict(\n    constructor='OptimWrapperConstructor',\n    generator=dict(\n        accumulative_counts=8,\n        optimizer=dict(type='Adam', lr=0.0001, betas=(0.0, 0.999), eps=1e-06),\n        type='AmpOptimWrapper',  # \u200b\u4f7f\u7528\u200b amp \u200b\u5c01\u88c5\u200b\u5668\u200b\n        loss_scale='dynamic'),\n    discriminator=dict(\n        accumulative_counts=8,\n        optimizer=dict(type='Adam', lr=0.0004, betas=(0.0, 0.999), eps=1e-06),\n        type='AmpOptimWrapper',  # \u200b\u4f7f\u7528\u200b amp \u200b\u5c01\u88c5\u200b\u5668\u200b\n        loss_scale='dynamic'))\n</code></pre> <pre><code># \u200b\u4ee3\u7801\u200b\nimport torch.nn as nn\nfrom mmagic.registry import MODULES\nfrom mmengine.model import BaseModel\n\n\nclass DemoModule(nn.Module):\n    def __init__(self, cfg):\n        self.net = MODULES.build(cfg)\n\n    def forward(self, x):\n        return self.net(x)\n\nclass DemoModel(BaseModel):\n    def __init__(self, cfg):\n        super().__init__(self)\n        self.demo_network = DemoModule(cfg)\n\n    def train_step(self, data, optim_wrapper):\n        # \u200b\u4ece\u200b data_batch \u200b\u4e2d\u200b\u83b7\u53d6\u6570\u636e\u200b\n        data = self.data_preprocessor(data, True)\n        inputs = data['inputs']\n\n        with optim_wrapper.optim_context(self.discriminator):\n            output = self.demo_network(inputs)\n        loss_dict = self.get_loss(output)\n        # \u200b\u4f7f\u7528\u200b `BaseModel` \u200b\u63d0\u4f9b\u200b\u7684\u200b parse_loss\n        loss, log_vars = self.parse_loss(loss_dict)\n        optimizer_wrapper.update_params(loss)\n\n        return log_vars\n</code></pre> <p>\u200b\u82e5\u200b\u8981\u200b\u907f\u514d\u200b\u7528\u6237\u200b\u64cd\u4f5c\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0cMMagic \u200b\u5728\u200b <code>train.py</code> \u200b\u91cc\u200b\u63d0\u4f9b\u200b\u4e86\u200b <code>--amp</code> \u200b\u9009\u9879\u200b\uff0c\u200b\u5176\u200b\u53ef\u4ee5\u200b\u8ba9\u200b\u7528\u6237\u200b\u5728\u200b\u4e0d\u200b\u4fee\u6539\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u542f\u52a8\u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b\uff0c\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u542f\u52a8\u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b\uff1a</p> <pre><code>bash tools/dist_train.sh CONFIG GPUS --amp\n\n# \u200b\u5bf9\u200b slurm \u200b\u7528\u6237\u200b\nbash tools/slurm_train.sh PARTITION JOB_NAME CONFIG WORK_DIR --amp\n</code></pre>"},{"location":"migration/data/","title":"Data Settings \u200b\u7684\u200b\u8fc1\u79fb","text":"<p>\u200b\u672c\u7bc7\u200b\u6587\u6863\u200b\u8d1f\u8d23\u200b\u4ecb\u7ecd\u200b data settings \u200b\u7684\u200b\u8fc1\u79fb\u200b\u65b9\u5f0f\u200b\uff1a</p> <ul> <li>[Data Settings \u200b\u7684\u200b\u8fc1\u79fb\u200b](#Data Settings \u200b\u7684\u200b\u8fc1\u79fb\u200b)</li> <li>Data Pipelines</li> <li>Dataloader</li> </ul>"},{"location":"migration/data/#data-pipelines","title":"Data Pipelines","text":"<p>\u200b\u5728\u200b MMagic 1.x \u200b\u4e2d\u200b\u6211\u4eec\u200b\u66f4\u65b0\u200b\u4e86\u200b data pipeline \u200b\u7684\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u51e0\u4e2a\u200b\u91cd\u8981\u200b\u7684\u200b\u4fee\u6539\u200b\uff1a</p> <ul> <li>\u200b\u53bb\u200b\u9664\u4e86\u200b <code>normalization</code> \u200b\u548c\u200b <code>color space</code> \u200b\u4e24\u79cd\u200b\u6570\u636e\u200b\u53d8\u6362\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5b83\u4eec\u200b\u79fb\u52a8\u200b\u5230\u200b\u4e86\u200b <code>data_preprocessor</code> \u200b\u90e8\u5206\u200b\u3002</li> <li>\u200b\u539f\u200b\u7248\u672c\u200b\u4e2d\u200b\u683c\u5f0f\u5316\u200b\u6570\u636e\u200b\u53d8\u6362\u200b pipeline \u200b\u7684\u200b <code>Collect</code> \u200b\u548c\u200b <code>ToTensor</code> \u200b\u5728\u200b\u65b0\u200b\u7248\u672c\u200b\u4e2d\u200b\u88ab\u200b\u6574\u5408\u200b\u4e3a\u200b <code>PackInputs</code>\u3002\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u7ec6\u8282\u200b\u53ef\u4ee5\u200b\u5728\u200b \u200b\u6570\u636e\u200b\u53d8\u6362\u200b\u6587\u6863\u200b \u200b\u4e2d\u200b\u67e5\u770b\u200b\u3002</li> </ul>  \u200b\u539f\u200b\u7248\u672c\u200b   \u200b\u65b0\u200b\u7248\u672c\u200b  <pre><code>train_pipeline = [  # Train pipeline\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u8bfb\u53d6\u200b\u56fe\u7247\u200b\n        io_backend='disk',  # io backend\n        key='lq',  # \u200b\u627e\u5230\u200b\u7ed3\u679c\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b keys\n        flag='unchanged'),  # \u200b\u8bfb\u53d6\u200b\u56fe\u7247\u200b\u7684\u200b flag\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u8bfb\u53d6\u200b\u56fe\u7247\u200b\n        io_backend='disk',  # io backend\n        key='gt',  # \u200b\u627e\u5230\u200b\u7ed3\u679c\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b keys\n        flag='unchanged'),  # \u200b\u8bfb\u53d6\u200b\u56fe\u7247\u200b\u7684\u200b flag\n    dict(type='RescaleToZeroOne', keys=['lq', 'gt']),  # \u200b\u5c06\u200b\u56fe\u7247\u200b\u4ece\u200b [0, 255] \u200b\u7f29\u200b\u653e\u5230\u200b [0, 1]\n    dict(type='Normalize',  # normalize \u200b\u56fe\u7247\u200b\u7684\u200b augmentation pipeline\n        keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b normalized \u200b\u7684\u200b\u56fe\u7247\u200b\n        mean=[0, 0, 0],  # \u200b\u5e73\u5747\u503c\u200b\n        std=[1, 1, 1],  # \u200b\u6807\u51c6\u5dee\u200b\n        to_rgb=True),  # \u200b\u662f\u5426\u200b\u8f6c\u6362\u200b\u5230\u200b rgb \u200b\u901a\u9053\u200b\n    dict(type='PairedRandomCrop', gt_patch_size=96),  # PairedRandomCrop\n    dict(type='Flip',  # \u200b\u7ffb\u8f6c\u200b\u56fe\u7247\u200b\n        keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b\u7ffb\u8f6c\u200b\u7684\u200b\u56fe\u7247\u200b\n        flip_ratio=0.5,  # \u200b\u7ffb\u8f6c\u200b\u6982\u7387\u200b\n        direction='horizontal'),  # Flip \u200b\u65b9\u5411\u200b\n    dict(type='Flip',  # Flip \u200b\u56fe\u7247\u200b\n        keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b\u7ffb\u8f6c\u200b\u7684\u200b\u56fe\u7247\u200b\n        flip_ratio=0.5,  # Flip ratio\n        direction='vertical'),  # Flip \u200b\u65b9\u5411\u200b\n    dict(type='RandomTransposeHW',  # \u200b\u968f\u5373\u200b\u5bf9\u200b\u56fe\u7247\u200b\u7684\u200b\u9ad8\u200b\u548c\u200b\u5bbd\u200b\u8f6c\u7f6e\u200b\n        keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b transpose \u200b\u7684\u200b\u56fe\u7247\u200b\n        transpose_ratio=0.5  # Transpose ratio\n        ),\n    dict(type='Collect',  # Pipeline that decides which keys in the data should be passed to the model\n        keys=['lq', 'gt'],  # Keys to pass to the model\n        meta_keys=['lq_path', 'gt_path']), # Meta information keys. \u200b\u8bad\u7ec3\u200b\u65f6\u200b meta information \u200b\u4e0d\u662f\u200b\u5fc5\u987b\u200b\u7684\u200b\n    dict(type='ToTensor',  # \u200b\u56fe\u7247\u200b\u8f6c\u4e3a\u200b tensor\n        keys=['lq', 'gt'])  # \u200b\u9700\u8981\u200b\u8f6c\u6362\u200b\u4e3a\u200b tensor \u200b\u7684\u200b\u56fe\u7247\u200b\n]\ntest_pipeline = [  # Test pipeline\n    dict(\n        type='LoadImageFromFile',   # \u200b\u4ece\u6587\u4ef6\u200b\u8bfb\u53d6\u200b\u56fe\u7247\u200b\n        io_backend='disk',  # io backend\n        key='lq', # \u200b\u627e\u5230\u200b\u7ed3\u679c\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b keys\n        flag='unchanged'),  # flag for reading images\n    dict(\n        type='LoadImageFromFile',   # \u200b\u4ece\u6587\u4ef6\u200b\u8bfb\u53d6\u200b\u56fe\u7247\u200b\n        io_backend='disk',  # io backend\n        key='gt', # \u200b\u627e\u5230\u200b\u7ed3\u679c\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b keys\n        flag='unchanged'),  # flag for reading images\n    dict(type='RescaleToZeroOne', keys=['lq', 'gt']),  # \u200b\u5c06\u200b\u56fe\u7247\u200b\u4ece\u200b [0, 255] \u200b\u7f29\u200b\u653e\u5230\u200b [0, 1]\n    dict(\n        type='Normalize',  # \u200b\u5bf9\u200b\u8f93\u5165\u200b\u56fe\u7247\u200b\u6267\u884c\u200b normalization \u200b\u7684\u200b\u6570\u636e\u200b\u589e\u5f3a\u200b pipeline\n        keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b normalized \u200b\u56fe\u7247\u200b\n        mean=[0, 0, 0],  # Mean values\n        std=[1, 1, 1],  # Standard variance\n        to_rgb=True),  # \u200b\u662f\u5426\u200b\u8f6c\u4e3a\u200b rgb \u200b\u683c\u5f0f\u200b\n    dict(type='Collect',  # Pipeline that decides which keys in the data should be passed to the model\n        keys=['lq', 'gt'],  # Keys to pass to the model\n        meta_keys=['lq_path', 'gt_path']),  # Meta information keys\n    dict(type='ToTensor',  # \u200b\u56fe\u7247\u200b\u8f6c\u4e3a\u200b tensor\n        keys=['lq', 'gt'])  # \u200b\u9700\u8981\u200b\u8f6c\u6362\u200b\u4e3a\u200b tensor \u200b\u7684\u200b\u56fe\u7247\u200b\n]\n</code></pre> <pre><code>train_pipeline = [  # train pipeline\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u8bfb\u53d6\u200b\u56fe\u7247\u200b\n        key='img',   # \u200b\u627e\u5230\u200b\u7ed3\u679c\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b keys\n        color_type='color',  # \u200b\u56fe\u7247\u200b\u7684\u200b color type\n        channel_order='rgb',  # \u200b\u56fe\u7247\u200b\u7684\u200b channel \u200b\u987a\u5e8f\u200b\n        imdecode_backend='cv2'),  # decode backend\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u8bfb\u53d6\u200b\u56fe\u7247\u200b\n        key='gt',   # \u200b\u627e\u5230\u200b\u7ed3\u679c\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b keys\n        color_type='color',  # \u200b\u56fe\u7247\u200b\u7684\u200b color type\n        channel_order='rgb',  # \u200b\u56fe\u7247\u200b\u7684\u200b channel \u200b\u987a\u5e8f\u200b\n        imdecode_backend='cv2'),  # decode backend\n    dict(type='SetValues', dictionary=dict(scale=scale)),  # \u200b\u8bbe\u7f6e\u200b destination keys\n    dict(type='PairedRandomCrop', gt_patch_size=96),  # PairedRandomCrop\n    dict(type='Flip',  # \u200b\u7ffb\u8f6c\u200b\u56fe\u7247\u200b\n        keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b\u7ffb\u8f6c\u200b\u7684\u200b\u56fe\u7247\u200b\n        flip_ratio=0.5,  # Flip ratio\n        direction='horizontal'),  # Flip \u200b\u65b9\u5411\u200b\n    dict(type='Flip',  # Flip images\n        keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b\u7ffb\u8f6c\u200b\u7684\u200b\u56fe\u7247\u200b\n        flip_ratio=0.5,  # Flip ratio\n        direction='vertical'),  # Flip \u200b\u65b9\u5411\u200b\n    dict(type='RandomTransposeHW',  # \u200b\u968f\u5373\u200b\u5bf9\u200b\u56fe\u7247\u200b\u7684\u200b\u9ad8\u200b\u548c\u200b\u5bbd\u200b\u8fdb\u884c\u200b\u8f6c\u7f6e\u200b\n        keys=['lq', 'gt'], # \u200b\u9700\u8981\u200b\u8f6c\u7f6e\u200b\u7684\u200b\u56fe\u7247\u200b\n        transpose_ratio=0.5  # Transpose ratio\n        ),\n    dict(type='PackInputs')  # \u200b\u5728\u200b\u5f53\u524d\u200b pipeline \u200b\u4e2d\u200b\u6536\u96c6\u200b\u6570\u636e\u200b\u7684\u200b\u8bbe\u7f6e\u200b\n]\ntest_pipeline = [  # Test pipeline\n    dict(type='LoadImageFromFile',   # \u200b\u4ece\u6587\u4ef6\u200b\u8bfb\u53d6\u200b\u56fe\u7247\u200b\n        key='img',   # \u200b\u627e\u5230\u200b\u7ed3\u679c\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b keys\n        color_type='color',  # \u200b\u56fe\u7247\u200b\u7684\u200b color type\n        channel_order='rgb',  # \u200b\u56fe\u7247\u200b\u7684\u200b channel order\n        imdecode_backend='cv2'),  # decode backend\n    dict(type='LoadImageFromFile',   # \u200b\u4ece\u6587\u4ef6\u200b\u8bfb\u53d6\u200b\u56fe\u7247\u200b\n        key='gt',  # \u200b\u627e\u5230\u200b\u7ed3\u679c\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b keys\n        color_type='color', # \u200b\u56fe\u7247\u200b\u7684\u200b color type\n        channel_order='rgb',  # \u200b\u56fe\u7247\u200b\u7684\u200b channel order\n        imdecode_backend='cv2'),  # decode backend\n    dict(type='PackInputs')  # \u200b\u5728\u200b\u5f53\u524d\u200b pipeline \u200b\u4e2d\u200b\u6536\u96c6\u200b\u6570\u636e\u200b\u7684\u200b\u8bbe\u7f6e\u200b\n]\n</code></pre>"},{"location":"migration/data/#dataloader","title":"Dataloader","text":"<p>\u200b\u5728\u200b MMagic 1.x \u200b\u4e2d\u200b\u6211\u4eec\u200b\u66f4\u65b0\u200b\u4e86\u200b dataloader \u200b\u7684\u200b\u8bbe\u7f6e\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u51e0\u4e2a\u200b\u91cd\u8981\u200b\u7684\u200b\u4fee\u6539\u200b\uff1a</p> <ul> <li>\u200b\u539f\u200b\u7248\u672c\u200b\u4e2d\u200b\u7684\u200b <code>data</code> \u200b\u5b57\u200b\u6bb5\u200b\u5206\u4e3a\u200b\u4e86\u200b <code>train_dataloader</code> \uff0c <code>val_dataloader</code> \u200b\u548c\u200b <code>test_dataloader</code> \u200b\u4e09\u4e2a\u200b\u72ec\u7acb\u200b\u7684\u200b\u90e8\u5206\u200b\u3002\u200b\u8fd9\u6837\u200b\u6211\u4eec\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u7ec6\u7c92\u5ea6\u200b\u7684\u200b\u5bf9\u200b\u5404\u200b\u90e8\u5206\u200b\u8fdb\u884c\u200b\u914d\u7f6e\u200b\u3002\u200b\u4f8b\u5982\u200b\u7528\u6237\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u9488\u5bf9\u200b\u8bad\u7ec3\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u5236\u5b9a\u200b\u4e0d\u540c\u200b\u7684\u200b sampler \u200b\u548c\u200b batch size \u3002</li> <li><code>samples_per_gpu</code> \u200b\u66f4\u540d\u200b\u4e3a\u200b <code>batch_size</code> \u3002</li> <li><code>workers_per_gpu</code> \u200b\u66f4\u540d\u200b\u4e3a\u200b <code>num_workers</code> \u3002</li> </ul>  \u200b\u539f\u200b\u7248\u672c\u200b   \u200b\u65b0\u200b\u7248\u672c\u200b  <pre><code>data = dict(\n    # train\n    samples_per_gpu=16,  # \u200b\u6bcf\u4e2a\u200b GPU \u200b\u4e0a\u200b\u7684\u200b batch_size\n    workers_per_gpu=4,  # \u200b\u6bcf\u4e2a\u200b GPU \u200b\u4e0a\u200b\u505a\u200b pre-fetch \u200b\u7684\u200b worker \u200b\u6570\u200b\n    drop_last=True,  # \u200b\u5728\u200b data_loader \u200b\u4e2d\u200b\u4f7f\u7528\u200b drop_last\n    train=dict(  # Train dataset \u200b\u914d\u7f6e\u200b\n        type='RepeatDataset',  # \u200b\u5bf9\u200b iter-based \u200b\u6a21\u578b\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b RepeatDataset\n        times=1000,  # RepeatDataset \u200b\u7684\u200b repeated times \u200b\u53c2\u6570\u200b\n        dataset=dict(\n            type=train_dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7c7b\u578b\u200b\n            lq_folder='data/DIV2K/DIV2K_train_LR_bicubic/X2_sub',  # lq \u200b\u7684\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n            gt_folder='data/DIV2K/DIV2K_train_HR_sub',  # ground truth \u200b\u7684\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n            ann_file='data/DIV2K/meta_info_DIV2K800sub_GT.txt',  # \u200b\u6807\u6ce8\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\n            pipeline=train_pipeline,  # \u200b\u53c2\u7167\u200b train_pipeline\n            scale=scale)),  # Upsampling \u200b\u7684\u200b scale factor\n    # validation\n    val_samples_per_gpu=1,  # validation \u200b\u65f6\u200b\u6bcf\u4e2a\u200b GPU \u200b\u4e0a\u200b\u7684\u200b batch_size\n    val_workers_per_gpu=4,  # validation \u200b\u662f\u200b\u6bcf\u4e2a\u200b GPU \u200b\u4e0a\u200b\u505a\u200b pre-fetch \u200b\u7684\u200b worker \u200b\u6570\u200b\n    val=dict(\n        type=val_dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7c7b\u578b\u200b\n        lq_folder='data/val_set5/Set5_bicLRx2',  # lq \u200b\u7684\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n        gt_folder='data/val_set5/Set5_mod12',  # ground truth \u200b\u7684\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n        pipeline=test_pipeline,  # \u200b\u53c2\u7167\u200b test_pipeline\n        scale=scale,  # Upsampling \u200b\u7684\u200b scale factor\n        filename_tmpl='{}'),  # filename \u200b\u6a21\u677f\u200b\n    # test\n    test=dict(\n        type=val_dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7c7b\u578b\u200b\n        lq_folder='data/val_set5/Set5_bicLRx2', # lq \u200b\u7684\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n        gt_folder='data/val_set5/Set5_mod12',  # ground truth \u200b\u7684\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n        pipeline=test_pipeline,  # \u200b\u53c2\u7167\u200b test_pipeline\n        scale=scale,  # Upsampling \u200b\u7684\u200b scale factor\n        filename_tmpl='{}'),  # filename \u200b\u6a21\u677f\u200b\n)\n</code></pre> <pre><code>dataset_type = 'BasicImageDataset'  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7c7b\u578b\u200b\ndata_root = 'data'  # \u200b\u6570\u636e\u200b\u96c6\u200b\u6839\u76ee\u5f55\u200b\ntrain_dataloader = dict(\n    batch_size=16,\n    num_workers=4,  # \u200b\u6bcf\u4e2a\u200b GPU \u200b\u4e0a\u200b\u505a\u200b pre-fetch \u200b\u7684\u200b worker \u200b\u6570\u200b\n    persistent_workers=False,  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b workers instance \u200b\u5b58\u6d3b\u200b\n    sampler=dict(type='InfiniteSampler', shuffle=True),  # data sampler \u200b\u7c7b\u578b\u200b\n    dataset=dict(  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u96c6\u200b config\n        type=dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7c7b\u578b\u200b\n        ann_file='meta_info_DIV2K800sub_GT.txt',  # \u200b\u6807\u6ce8\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n        metainfo=dict(dataset_type='div2k', task_name='sisr'),\n        data_root=data_root + '/DIV2K',  # \u200b\u6570\u636e\u200b\u6839\u76ee\u5f55\u200b\n        data_prefix=dict(  # \u200b\u56fe\u50cf\u6587\u4ef6\u200b\u524d\u7f00\u200b\n            img='DIV2K_train_LR_bicubic/X2_sub', gt='DIV2K_train_HR_sub'),\n        filename_tmpl=dict(img='{}', gt='{}'),  # Filename \u200b\u6a21\u677f\u200b\n        pipeline=train_pipeline))\nval_dataloader = dict(\n    batch_size=1,\n    num_workers=4,  # \u200b\u6bcf\u4e2a\u200b GPU \u200b\u4e0a\u200b\u505a\u200b pre-fetch \u200b\u7684\u200b worker \u200b\u6570\u200b\n    persistent_workers=False,  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b workers instance \u200b\u5b58\u6d3b\u200b\n    drop_last=False,  # \u200b\u662f\u5426\u200b\u4e22\u5f03\u200b\u6700\u540e\u200b\u672a\u200b\u5b8c\u6210\u200b\u7684\u200b batch\n    sampler=dict(type='DefaultSampler', shuffle=False),  # data sampler \u200b\u7c7b\u578b\u200b\n    dataset=dict(  # Validation \u200b\u6570\u636e\u200b\u96c6\u200b\u8bbe\u7f6e\u200b\n        type=dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7c7b\u578b\u200b\n        metainfo=dict(dataset_type='set5', task_name='sisr'),\n        data_root=data_root + '/Set5',  # \u200b\u6570\u636e\u200b\u6839\u76ee\u5f55\u200b\n        data_prefix=dict(img='LRbicx2', gt='GTmod12'),  # \u200b\u56fe\u50cf\u6587\u4ef6\u200b\u524d\u7f00\u200b\n        pipeline=test_pipeline))\ntest_dataloader = val_dataloader\n</code></pre>"},{"location":"migration/distributed_train/","title":"\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u7684\u200b\u8fc1\u79fb","text":"<p>\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u5c06\u200bMMGeneration 1.x\u200b\u5408\u5e76\u200b\u81f3\u200bMMagic\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u9488\u5bf9\u200bMMGeneration\u200b\u4e2d\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u7684\u200b\u8fc1\u79fb\u200b\u4e8b\u9879\u200b\u3002</p> <p>\u200b\u5728\u200b0.x\u200b\u7248\u4e2d\u200b\uff0cMMGeneration\u200b\u4f7f\u7528\u200b<code>DDPWrapper</code>\u200b\u548c\u200b<code>DynamicRunner</code>\u200b\u6765\u200b\u8bad\u7ec3\u200b\u5bf9\u5e94\u200b\u7684\u200b\u9759\u6001\u200b\u548c\u200b\u52a8\u6001\u200b\u6a21\u578b\u200b\uff08\u200b\u4f8b\u5982\u200bPGGAN\u200b\u548c\u200bStyleGANv2\uff09\uff0c\u200b\u4f46\u200b\u5728\u200b1.x \u200b\u7248\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200bMMEngine\u200b\u63d0\u4f9b\u200b\u7684\u200b<code>MMSeparateDistributedDataParallel</code>\u200b\u6765\u200b\u5b9e\u73b0\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u3002</p> <p>\u200b\u5982\u4e0b\u200b\u662f\u200b\u914d\u7f6e\u200b\u524d\u540e\u200b\u5bf9\u6bd4\u200b\uff1a</p>  0.x\u200b\u7248\u4e2d\u200b\u7684\u200b\u9759\u6001\u200b\u6a21\u578b\u200b   1.x\u200b\u7248\u4e2d\u200b\u7684\u200b\u9759\u6001\u200b\u6a21\u578b\u200b  <pre><code># \u200b\u4f7f\u7528\u200bDDPWrapper\nuse_ddp_wrapper = True\nfind_unused_parameters = False\n\nrunner = dict(\n    type='DynamicIterBasedRunner',\n    is_dynamic_ddp=False)\n</code></pre> <pre><code>model_wrapper_cfg = dict(\n    type='MMSeparateDistributedDataParallel',\n    broadcast_buffers=False,\n    find_unused_parameters=False)\n</code></pre>  0.x\u200b\u7248\u4e2d\u200b\u7684\u200b\u52a8\u6001\u200b\u6a21\u578b\u200b   1.x\u200b\u7248\u4e2d\u200b\u7684\u200b\u52a8\u6001\u200b\u6a21\u578b\u200b  <pre><code>use_ddp_wrapper = False\nfind_unused_parameters = False\n\n# \u200b\u4f7f\u7528\u200bDynamicRunner\nrunner = dict(\n    type='DynamicIterBasedRunner',\n    is_dynamic_ddp=True)\n</code></pre> <pre><code>model_wrapper_cfg = dict(\n    type='MMSeparateDistributedDataParallel',\n    broadcast_buffers=False,\n    find_unused_parameters=True) # \u200b\u9488\u5bf9\u200b\u52a8\u6001\u200b\u6a21\u578b\u200b\uff0c\u200b\u8bbe\u7f6e\u200b`find_unused_parameters`\u200b\u6807\u5fd7\u200b\u4e3a\u200bTrue\n</code></pre>"},{"location":"migration/eval_test/","title":"\u8bc4\u4f30\u200b\u4e0e\u200b\u6d4b\u8bd5\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u8fc1\u79fb","text":"<p>\u200b\u6211\u4eec\u200b\u66f4\u65b0\u200b\u4e86\u200b MMagic 1.x \u200b\u4e2d\u200b\u7684\u200b\u8bc4\u4f30\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u91cd\u8981\u200b\u4fee\u6539\u200b\u5982\u4e0b\u200b\uff1a</p> <ul> <li>\u200b\u8bc4\u4f30\u200b\u5b57\u6bb5\u200b\u88ab\u200b\u5206\u4e3a\u200b <code>val_evaluator</code> \u200b\u548c\u200b <code>test_evaluator</code> \uff0c <code>interval</code> \u200b\u88ab\u200b\u79fb\u52a8\u200b\u5230\u200b <code>train_cfg.val_interval</code> \u3002</li> <li>\u200b\u8bc4\u4f30\u200b\u6307\u6807\u200b\u4ece\u200b <code>test_cfg</code> \u200b\u79fb\u81f3\u200b <code>val_evaluator</code> \u200b\u548c\u200b <code>test_evaluator</code></li> </ul>  \u200b\u539f\u200b\u8bc4\u4f30\u200b\u914d\u7f6e\u200b   \u200b\u65b0\u200b\u8bc4\u4f30\u200b\u914d\u7f6e\u200b  <pre><code>train_cfg = None  # \u200b\u8bad\u7ec3\u200b\u914d\u7f6e\u200b\u5b57\u5178\u200b\u53d8\u91cf\u200b\u8bbe\u200b\u4e3a\u200b None\ntest_cfg = dict(  # \u200b\u6d4b\u8bd5\u200b\u914d\u7f6e\u200b\u5b57\u5178\u200b\u53d8\u91cf\u200b\n    metrics=['PSNR'],  # \u200b\u6d4b\u8bd5\u200b\u671f\u95f4\u200b\u4f7f\u7528\u200b\u7684\u200b\u6307\u6807\u200b PSNR \uff08\u200b\u5cf0\u503c\u200b\u4fe1\u566a\u6bd4\u200b\uff09\n    crop_border=scale)  # \u200b\u8bc4\u4f30\u200b\u671f\u95f4\u200b\u88c1\u526a\u200b\u8fb9\u6846\u200b\n\nevaluation = dict(  # \u200b\u6784\u5efa\u200b\u8bc4\u4f30\u200b\u94a9\u5b50\u200b\u7684\u200b\u914d\u7f6e\u200b\u5b57\u5178\u200b\u53d8\u91cf\u200b\n    interval=5000,  # \u200b\u8bc4\u4ef7\u200b\u95f4\u9694\u200b\n    save_image=True,  # \u200b\u8bc4\u4f30\u200b\u671f\u95f4\u200b\u4fdd\u5b58\u200b\u56fe\u50cf\u200b\n    gpu_collect=True)  # \u200b\u4f7f\u7528\u200b GPU \u200b\u6536\u96c6\u200b\n</code></pre> <pre><code>val_evaluator = [\n    dict(type='PSNR', crop_border=scale),  # \u200b\u8981\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u540d\u79f0\u200b\n]\ntest_evaluator = val_evaluator\n\ntrain_cfg = dict(\n    type='IterBasedTrainLoop', max_iters=300000, val_interval=5000)  # \u200b\u8bad\u7ec3\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u914d\u7f6e\u200b\nval_cfg = dict(type='ValLoop')  # \u200b\u9a8c\u8bc1\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\ntest_cfg = dict(type='TestLoop')  # \u200b\u6d4b\u8bd5\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\n</code></pre> <p>\u200b\u6211\u4eec\u200b\u5df2\u200b\u5c06\u200bMMGeneration 1.x\u200b\u5408\u5e76\u200b\u5230\u200b MMagic \u200b\u4e2d\u200b. \u200b\u8fd9\u91cc\u200b\u662f\u200b\u5173\u4e8e\u200b MMGeneration \u200b\u7684\u200b\u8bc4\u4f30\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u8fc1\u79fb\u200b\u3002</p> <p>\u200b\u8bc4\u4f30\u200b\u5b57\u200b\u6bb5\u200b\u5206\u4e3a\u200b <code>val_evaluator</code> \u200b\u548c\u200b <code>test_evaluator</code> \uff0c\u200b\u5e76\u4e14\u200b\u8bc4\u4f30\u200b\u5b57\u200b\u6bb5\u200b\u4e0d\u518d\u200b\u652f\u6301\u200b <code>interval</code> \u200b\u548c\u200b <code>save_best</code> \u200b\u53c2\u6570\u200b\u3002</p> <ul> <li><code>interval</code> \u200b\u79fb\u81f3\u200b <code>train_cfg.val_interval</code>\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u8c03\u5ea6\u200b\u8bbe\u7f6e\u200b\u3002</li> <li><code>save_best</code> \u200b\u79fb\u81f3\u200b <code>default_hooks.checkpoint.save_best</code>\u3002</li> </ul>  0.x \u200b\u7248\u672c\u200b   1.x \u200b\u65b0\u200b\u7248\u672c\u200b  <pre><code>evaluation = dict(\n    type='GenerativeEvalHook',\n    interval=10000,\n    metrics=[\n        dict(\n            type='FID',\n            num_images=50000,\n            bgr2rgb=True,\n            inception_args=dict(type='StyleGAN')),\n        dict(type='IS', num_images=50000)\n    ],\n    best_metric=['fid', 'is'],\n    sample_kwargs=dict(sample_model='ema'))\n</code></pre> <pre><code>val_evaluator = dict(\n    type='Evaluator',\n    metrics=[\n        dict(\n            type='FID',\n            prefix='FID-Full-50k',\n            fake_nums=50000,\n            inception_style='StyleGAN',\n            sample_model='orig'),\n        dict(\n            type='IS',\n            prefix='IS-50k',\n            fake_nums=50000)])\n# \u200b\u8bbe\u7f6e\u200b\u6700\u4f73\u200b\u914d\u7f6e\u200b\ndefault_hooks = dict(\n    checkpoint=dict(\n        type='CheckpointHook',\n        interval=10000,\n        by_epoch=False,\n        less_keys=['FID-Full-50k/fid'],\n        greater_keys=['IS-50k/is'],\n        save_optimizer=True,\n        save_best=['FID-Full-50k/fid', 'IS-50k/is'],\n        rule=['less', 'greater']))\ntest_evaluator = val_evaluator\n</code></pre> <p>\u200b\u4e3a\u4e86\u200b\u6b63\u786e\u200b\u8bc4\u4f30\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u6a21\u578b\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5728\u200b <code>val_cfg</code> \u200b\u548c\u200b <code>test_cfg</code> \u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u7279\u5b9a\u200b\u7684\u200b\u5faa\u73af\u200b\u3002</p>  0.x \u200b\u7248\u672c\u200b\u4e2d\u200b\u7684\u200b\u9759\u6001\u200b\u6a21\u578b\u200b   1.x \u200b\u7248\u672c\u200b\u4e2d\u200b\u7684\u200b\u9759\u6001\u200b\u6a21\u578b\u200b  <pre><code>total_iters = 1000000\n\nrunner = dict(\n    type='DynamicIterBasedRunner',\n    is_dynamic_ddp=False,\n    pass_training_status=True)\n</code></pre> <pre><code>train_cfg = dict(\n    by_epoch=False,  # \u200b\u4f7f\u7528\u200b\u57fa\u4e8e\u200b\u8fed\u4ee3\u200b\u7684\u200b\u8bad\u7ec3\u200b\n    max_iters=1000000,  # \u200b\u6700\u5927\u200b\u8bad\u7ec3\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\n    val_begin=1,\n    val_interval=10000)  # \u200b\u8bc4\u4ef7\u200b\u95f4\u9694\u200b\nval_cfg = dict(type='MultiValLoop')  # \u200b\u9a8c\u8bc1\u200b\u4e2d\u200b\u7684\u200b\u7279\u5b9a\u200b\u5faa\u73af\u200b\ntest_cfg = dict(type='MultiTestLoop')  # \u200b\u6d4b\u8bd5\u200b\u4e2d\u200b\u7684\u200b\u7279\u5b9a\u200b\u5faa\u73af\u200b\n</code></pre>"},{"location":"migration/models/","title":"\u6a21\u578b\u200b\u7684\u200b\u8fc1\u79fb","text":"<p>\u200b\u6211\u4eec\u200b\u5728\u200b MMagic 1.x. \u200b\u7248\u672c\u200b\u66f4\u65b0\u200b\u4e86\u200b\u6a21\u578b\u200b\u8bbe\u5b9a\u200b\uff0c\u200b\u5176\u4e2d\u200b\u91cd\u8981\u200b\u7684\u200b\u6539\u52a8\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <ul> <li>\u200b\u5220\u9664\u200b <code>pretrained</code> \u200b\u5b57\u200b\u6bb5\u200b.</li> <li>\u200b\u5728\u200b\u6a21\u578b\u200b\u8bbe\u5b9a\u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>train_cfg</code> \u200b\u548c\u200b <code>test_cfg</code> \u200b\u5b57\u200b\u6bb5\u200b.</li> <li>\u200b\u6dfb\u52a0\u200b <code>data_preprocessor</code> \u200b\u5b57\u200b\u6bb5\u200b. \u200b\u8fd9\u91cc\u200b\u4e3b\u8981\u200b\u662f\u200b\u5c06\u200b\u5f52\u4e00\u5316\u200b\u548c\u200b\u989c\u8272\u200b\u7a7a\u95f4\u200b\u8f6c\u6362\u200b\u64cd\u4f5c\u200b\u4ece\u200b <code>dataset transform</code> \u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u79fb\u52a8\u200b\u5230\u200b <code>data_preprocessor</code> \u200b\u4e2d\u200b. \u200b\u6211\u4eec\u200b\u63a5\u4e0b\u6765\u200b\u4f1a\u200b\u4ecb\u7ecd\u200b<code>data_preprocessor</code>.</li> </ul>  Original   New  <pre><code>model = dict(\n    type='BasicRestorer',  # Name of the model\n    generator=dict(  # Config of the generator\n        type='EDSR',  # Type of the generator\n        in_channels=3,  # Channel number of inputs\n        out_channels=3,  # Channel number of outputs\n        mid_channels=64,  # Channel number of intermediate features\n        num_blocks=16,  # Block number in the trunk network\n        upscale_factor=scale, # Upsampling factor\n        res_scale=1,  # Used to scale the residual in residual block\n        rgb_mean=(0.4488, 0.4371, 0.4040),  # Image mean in RGB orders\n        rgb_std=(1.0, 1.0, 1.0)),  # Image std in RGB orders\n    pretrained=None,\n    pixel_loss=dict(type='L1Loss', loss_weight=1.0, reduction='mean'))  # Config for pixel loss model training and testing settings\n</code></pre> <pre><code>model = dict(\n    type='BaseEditModel',  # Name of the model\n    generator=dict(  # Config of the generator\n        type='EDSRNet',  # Type of the generator\n        in_channels=3,  # Channel number of inputs\n        out_channels=3,  # Channel number of outputs\n        mid_channels=64,  # Channel number of intermediate features\n        num_blocks=16,  # Block number in the trunk network\n        upscale_factor=scale, # Upsampling factor\n        res_scale=1,  # Used to scale the residual in residual block\n        rgb_mean=(0.4488, 0.4371, 0.4040),  # Image mean in RGB orders\n        rgb_std=(1.0, 1.0, 1.0)),  # Image std in RGB orders\n    pixel_loss=dict(type='L1Loss', loss_weight=1.0, reduction='mean')  # Config for pixel loss\n    train_cfg=dict(),  # Config of training model.\n    test_cfg=dict(),  # Config of testing model.\n    data_preprocessor=dict(  # The Config to build data preprocessor\n        type='DataPreprocessor', mean=[0., 0., 0.], std=[255., 255.,\n                                                             255.]))\n</code></pre> <p>\u200b\u6211\u4eec\u200b\u5728\u200b MMagic 1.x. \u200b\u7248\u672c\u200b\u4e2d\u200b\u5bf9\u6a21\u578b\u200b\u8fdb\u884c\u200b\u4e86\u200b\u91cd\u6784\u200b\uff0c\u200b\u5176\u4e2d\u200b\u91cd\u8981\u200b\u7684\u200b\u6539\u52a8\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <ul> <li> <p>MMagic 1.x \u200b\u4e2d\u200b\u7684\u200b <code>models</code> \u200b\u88ab\u200b\u91cd\u6784\u200b\u4e3a\u200b\u516d\u4e2a\u200b\u90e8\u5206\u200b\uff1a<code>archs</code>\u3001<code>base_models</code>\u3001<code>data_preprocessors</code>\u3001<code>editors</code>\u3001<code>diffusion_schedulers</code> \u200b\u548c\u200b <code>losses</code>.</p> </li> <li> <p>\u200b\u5728\u200b <code>models</code> \u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4e86\u200b <code>data_preprocessor</code> \u200b\u6a21\u5757\u200b\u3002\u200b\u8fd9\u91cc\u200b\u4e3b\u8981\u200b\u662f\u200b\u5c06\u200b\u5f52\u4e00\u5316\u200b\u548c\u200b\u989c\u8272\u200b\u7a7a\u95f4\u200b\u8f6c\u6362\u200b\u64cd\u4f5c\u200b\u4ece\u200b <code>dataset transform</code> \u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u79fb\u52a8\u200b\u5230\u200b <code>data_preprocessor</code> \u200b\u4e2d\u200b.\u200b\u6b64\u65f6\u200b\uff0c\u200b\u6570\u636e\u6d41\u200b\u7ecf\u8fc7\u200b\u6570\u636e\u200b\u9884\u5904\u7406\u200b\u540e\u200b\uff0c\u200b\u4f1a\u5148\u200b\u7ecf\u8fc7\u200b <code>data_preprocessor</code> \u200b\u6a21\u5757\u200b\u7684\u200b\u8f6c\u6362\u200b\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u8f93\u5165\u200b\u5230\u200b\u6a21\u578b\u200b\u4e2d\u200b.</p> </li> </ul> <p>\u200b\u6a21\u578b\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u8bf7\u200b\u53c2\u89c1\u200b\u6a21\u578b\u200b\u6307\u5357\u200b.</p>"},{"location":"migration/optimizers/","title":"\u4f18\u5316\u200b\u5668\u200b\u7684\u200b\u8fc1\u79fb","text":"<p>\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u5c06\u200bMMGeneration 1.x\u200b\u5408\u5e76\u200b\u81f3\u200bMMagic\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u9488\u5bf9\u200bMMGeneration\u200b\u4e2d\u200b\u4f18\u5316\u200b\u5668\u200b\u7684\u200b\u8fc1\u79fb\u200b\u4e8b\u9879\u200b\u3002</p> <p>\u200b\u5728\u200b0.x\u200b\u7248\u4e2d\u200b\uff0cMMGeneration\u200b\u4f7f\u7528\u200bPyTorch\u200b\u81ea\u5e26\u200b\u7684\u200b\u4f18\u5316\u200b\u5668\u200b\uff0c\u200b\u5176\u200b\u53ea\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u901a\u7528\u200b\u53c2\u6570\u200b\u4f18\u5316\u200b\uff0c\u200b\u800c\u200b\u5728\u200b1.x\u200b\u7248\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5219\u200b\u4f7f\u7528\u200b\u4e86\u200bMMEngine\u200b\u63d0\u4f9b\u200b\u7684\u200b<code>OptimizerWrapper</code>\u3002</p> <p>\u200b\u5bf9\u6bd4\u200bPyTorch\u200b\u81ea\u5e26\u200b\u7684\u200b<code>Optimizer</code>\uff0c<code>OptimizerWrapper</code>\u200b\u53ef\u4ee5\u200b\u652f\u6301\u200b\u5982\u4e0b\u200b\u529f\u80fd\u200b\uff1a</p> <ul> <li><code>OptimizerWrapper.update_params</code>\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5355\u4e00\u200b\u7684\u200b\u51fd\u6570\u200b\u4e2d\u200b\u5c31\u200b\u5b9e\u73b0\u200b\u4e86\u200b<code>zero_grad</code>\uff0c<code>backward</code>\u200b\u548c\u200b<code>step</code></li> <li>\u200b\u652f\u6301\u200b\u68af\u5ea6\u200b\u81ea\u52a8\u200b\u7d2f\u79ef\u200b</li> <li>\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b<code>OptimizerWrapper.optim_context</code>\u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\u7ba1\u7406\u5668\u200b\u6765\u200b\u5c01\u88c5\u200b\u524d\u5411\u200b\u8fdb\u7a0b\u200b\uff0c<code>optim_context</code>\u200b\u4f1a\u200b\u6839\u636e\u200b\u5f53\u524d\u200b\u66f4\u65b0\u200b\u8fed\u4ee3\u200b\u6570\u76ee\u200b\u6765\u200b\u81ea\u52a8\u200b\u8c03\u7528\u200b<code>torch.no_sync</code>\uff0c\u200b\u5728\u200bAMP(Auto Mixed Precision)\u200b\u8bad\u7ec3\u200b\u4e2d\u200b\uff0c<code>autocast</code>\u200b\u4e5f\u200b\u4f1a\u200b\u5728\u200b<code>optim_context</code>\u200b\u4e2d\u200b\u88ab\u200b\u8c03\u7528\u200b\u3002</li> </ul> <p>\u200b\u5bf9\u200bGAN\u200b\u6a21\u578b\u200b\uff0c\u200b\u751f\u6210\u5668\u200b\u548c\u200b\u9274\u522b\u5668\u200b\u91c7\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u4f18\u5316\u200b\u5668\u200b\u548c\u200b\u8bad\u7ec3\u200b\u7b56\u7565\u200b\u3002\u200b\u8981\u200b\u4f7f\u200bGAN\u200b\u6a21\u578b\u200b\u7684\u200b<code>train_step</code>\u200b\u51fd\u6570\u200b\u7b7e\u540d\u200b\u548c\u200b\u5176\u5b83\u200b\u6a21\u578b\u200b\u7684\u200b\u4fdd\u6301\u4e00\u81f4\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4ece\u200b<code>OptimizerWrapper</code>\u200b\u7ee7\u627f\u200b\u4e0b\u6765\u200b\u7684\u200b<code>OptimWrapperDict</code>\u200b\u6765\u200b\u5c01\u88c5\u200b\u751f\u6210\u5668\u200b\u548c\u200b\u9274\u522b\u5668\u200b\u7684\u200b\u4f18\u5316\u200b\u5668\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u4fbf\u4e8e\u200b\u8be5\u200b\u6d41\u7a0b\u200b\u7684\u200b\u81ea\u52a8\u5316\u200bMMagic\u200b\u5b9e\u73b0\u200b\u4e86\u200b<code>MultiOptimWrapperContructor</code>\u200b\u6784\u9020\u200b\u5668\u200b\u3002\u200b\u5982\u200b\u4f60\u200b\u60f3\u200b\u8bad\u7ec3\u200bGAN\u200b\u6a21\u578b\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5e94\u8be5\u200b\u5728\u200b\u4f60\u200b\u7684\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u6307\u5b9a\u200b\u8be5\u200b\u6784\u9020\u200b\u5668\u200b\u3002</p> <p>\u200b\u5982\u4e0b\u200b\u662f\u200b0.x\u200b\u7248\u200b\u548c\u200b1.x\u200b\u7248\u200b\u7684\u200b\u914d\u7f6e\u200b\u5bf9\u6bd4\u200b</p>  0.x\u200b\u7248\u200b   1.x\u200b\u7248\u200b  <pre><code>optimizer = dict(\n    generator=dict(type='Adam', lr=0.0001, betas=(0.0, 0.999), eps=1e-6),\n    discriminator=dict(type='Adam', lr=0.0004, betas=(0.0, 0.999), eps=1e-6))\n</code></pre> <pre><code>optim_wrapper = dict(\n    constructor='MultiOptimWrapperConstructor',\n    generator=dict(optimizer=dict(type='Adam', lr=0.0002, betas=(0.0, 0.999), eps=1e-6)),\n    discriminator=dict(\n        optimizer=dict(type='Adam', lr=0.0004, betas=(0.0, 0.999), eps=1e-6)))\n</code></pre> <p>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5728\u200b1.x\u200b\u7248\u4e2d\u200b\uff0cMMGeneration\u200b\u4f7f\u7528\u200b<code>OptimWrapper</code>\u200b\u6765\u200b\u5b9e\u73b0\u200b\u68af\u5ea6\u200b\u7d2f\u52a0\u200b\uff0c\u200b\u8fd9\u200b\u5c31\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u5728\u200b0.x\u200b\u7248\u200b\u548c\u200b1.x\u200b\u7248\u200b\u4e4b\u95f4\u200b\uff0c<code>discriminator_steps</code>\u200b\u914d\u7f6e\u200b\uff08\u200b\u7528\u4e8e\u200b\u5728\u200b\u591a\u6b21\u200b\u66f4\u65b0\u200b\u9274\u522b\u5668\u200b\u4e4b\u540e\u200b\u66f4\u65b0\u200b\u4e00\u6b21\u200b\u751f\u6210\u5668\u200b\u7684\u200b\u8bad\u7ec3\u200b\u6280\u5de7\u200b\uff09\u200b\u4e0e\u200b\u68af\u5ea6\u200b\u7d2f\u52a0\u200b\u5747\u200b\u51fa\u73b0\u200b\u4e0d\u200b\u4e00\u81f4\u200b\u95ee\u9898\u200b\u3002</p> <ul> <li>\u200b\u5728\u200b0.x\u200b\u7248\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5728\u200b\u914d\u7f6e\u200b\u91cc\u200b\u4f7f\u7528\u200b<code>disc_steps</code>\uff0c<code>gen_steps</code>\u200b\u548c\u200b<code>batch_accumulation_steps</code> \u3002<code>disc_steps</code>\u200b\u548c\u200b<code>batch_accumulation_steps</code>\u200b\u4f1a\u200b\u6839\u636e\u200b<code>train_step</code>\u200b\u7684\u200b\u8c03\u7528\u200b\u6b21\u6570\u200b\u6765\u200b\u8fdb\u884c\u200b\u7edf\u8ba1\u200b\uff08\u200b\u4ea6\u200b\u5373\u200bdataloader\u200b\u4e2d\u200b\u6570\u636e\u200b\u7684\u200b\u8bfb\u53d6\u200b\u6b21\u6570\u200b\uff09\u3002\u200b\u56e0\u6b64\u200b\u9274\u522b\u5668\u200b\u7684\u200b\u4e00\u6bb5\u200b\u8fde\u7eed\u6027\u200b\u66f4\u65b0\u200b\u6b21\u6570\u200b\u4e3a\u200b<code>disc_steps // batch_accumulation_steps</code>\u3002\u200b\u4e14\u200b\u5bf9\u4e8e\u200b\u751f\u6210\u5668\u200b\uff0c<code>gen_steps</code>\u200b\u662f\u200b\u751f\u6210\u5668\u200b\u5b9e\u9645\u200b\u7684\u200b\u4e00\u6bb5\u200b\u8fde\u7eed\u6027\u200b\u66f4\u65b0\u200b\u6b21\u6570\u200b</li> <li>\u200b\u4f46\u200b\u5728\u200b1.x\u200b\u7248\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5728\u200b\u914d\u7f6e\u200b\u91cc\u200b\u5219\u200b\u4f7f\u7528\u200b\u4e86\u200b<code>discriminator_steps</code>\uff0c<code>generator_steps</code> \u200b\u548c\u200b<code>accumulative_counts</code>\u3002<code>discriminator_steps</code>\u200b\u548c\u200b<code>generator_steps</code>\u200b\u6307\u200b\u7684\u200b\u662f\u200b\u81ea\u8eab\u200b\u5728\u200b\u66f4\u65b0\u200b\u5176\u5b83\u200b\u6a21\u578b\u200b\u4e4b\u524d\u200b\u7684\u200b\u4e00\u6bb5\u200b\u8fde\u7eed\u6027\u200b\u7684\u200b\u66f4\u65b0\u200b\u6b21\u6570\u200b   \u200b\u4ee5\u200bBigGAN-128\u200b\u914d\u7f6e\u200b\u4e3a\u4f8b\u200b\u3002</li> </ul>  0.x\u200b\u7248\u200b   1.x\u200b\u7248\u200b  <pre><code>model = dict(\n    type='BasiccGAN',\n    generator=dict(\n        type='BigGANGenerator',\n        output_scale=128,\n        noise_size=120,\n        num_classes=1000,\n        base_channels=96,\n        shared_dim=128,\n        with_shared_embedding=True,\n        sn_eps=1e-6,\n        init_type='ortho',\n        act_cfg=dict(type='ReLU', inplace=True),\n        split_noise=True,\n        auto_sync_bn=False),\n    discriminator=dict(\n        type='BigGANDiscriminator',\n        input_scale=128,\n        num_classes=1000,\n        base_channels=96,\n        sn_eps=1e-6,\n        init_type='ortho',\n        act_cfg=dict(type='ReLU', inplace=True),\n        with_spectral_norm=True),\n    gan_loss=dict(type='GANLoss', gan_type='hinge'))\n\n# \u200b\u8fde\u7eed\u6027\u200b\u66f4\u65b0\u200b\u9274\u522b\u5668\u200b`disc_steps // batch_accumulation_steps = 8 // 8 = 1`\u200b\u6b21\u200b\n# \u200b\u8fde\u7eed\u6027\u200b\u66f4\u65b0\u200b\u751f\u6210\u5668\u200b`gen_steps = 1`\u200b\u6b21\u200b\n# \u200b\u751f\u6210\u5668\u200b\u4e0e\u200b\u9274\u522b\u5668\u200b\u5728\u200b\u6bcf\u6b21\u200b\u66f4\u65b0\u200b\u4e4b\u524d\u200b\u6267\u884c\u200b`batch_accumulation_steps = 8`\u200b\u6b21\u68af\u5ea6\u200b\u7d2f\u52a0\u200b\ntrain_cfg = dict(\n    disc_steps=8, gen_steps=1, batch_accumulation_steps=8, use_ema=True)\n</code></pre> <pre><code>model = dict(\n    type='BigGAN',\n    num_classes=1000,\n    data_preprocessor=dict(type='DataPreprocessor'),\n    generator=dict(\n        type='BigGANGenerator',\n        output_scale=128,\n        noise_size=120,\n        num_classes=1000,\n        base_channels=96,\n        shared_dim=128,\n        with_shared_embedding=True,\n        sn_eps=1e-6,\n        init_type='ortho',\n        act_cfg=dict(type='ReLU', inplace=True),\n        split_noise=True,\n        auto_sync_bn=False),\n    discriminator=dict(\n        type='BigGANDiscriminator',\n        input_scale=128,\n        num_classes=1000,\n        base_channels=96,\n        sn_eps=1e-6,\n        init_type='ortho',\n        act_cfg=dict(type='ReLU', inplace=True),\n        with_spectral_norm=True),\n    # \u200b\u8fde\u7eed\u6027\u200b\u66f4\u65b0\u200b\u9274\u522b\u5668\u200b`discriminator_steps = 1`\u200b\u6b21\u200b\n    # \u200b\u8fde\u7eed\u6027\u200b\u66f4\u65b0\u200b\u751f\u6210\u5668\u200b`generator_steps = 1`\u200b\u6b21\u200b\n    generator_steps=1,\n    discriminator_steps=1)\n\noptim_wrapper = dict(\n    constructor='MultiOptimWrapperConstructor',\n    generator=dict(\n        # \u200b\u751f\u6210\u5668\u200b\u5728\u200b\u6bcf\u6b21\u200b\u66f4\u65b0\u200b\u4e4b\u524d\u200b\u6267\u884c\u200b`accumulative_counts = 8`\u200b\u6b21\u68af\u5ea6\u200b\u7d2f\u52a0\u200b\n        accumulative_counts=8,\n        optimizer=dict(type='Adam', lr=0.0001, betas=(0.0, 0.999), eps=1e-6)),\n    discriminator=dict(\n        # \u200b\u9274\u522b\u5668\u200b\u5728\u200b\u6bcf\u6b21\u200b\u66f4\u65b0\u200b\u4e4b\u524d\u200b\u6267\u884c\u200b`accumulative_counts = 8`\u200b\u6b21\u68af\u5ea6\u200b\u7d2f\u52a0\u200b\n        accumulative_counts=8,\n        optimizer=dict(type='Adam', lr=0.0004, betas=(0.0, 0.999), eps=1e-6)))\n</code></pre>"},{"location":"migration/overview/","title":"\u6982\u89c8","text":"<p>\u200b\u672c\u8282\u200b\u5c06\u200b\u4ece\u200b\u4ee5\u4e0b\u200b\u51e0\u4e2a\u200b\u65b9\u9762\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u4ece\u200b MMEditing 0.x \u200b\u8fc1\u79fb\u200b\u81f3\u200b MMagic 1.x\uff1a</p> <ul> <li>\u200b\u6982\u89c8\u200b</li> <li>\u200b\u65b0\u200b\u4f9d\u8d56\u200b\u9879\u200b</li> <li>\u200b\u603b\u4f53\u200b\u7ed3\u6784\u200b</li> <li>\u200b\u5176\u4ed6\u200b\u914d\u7f6e\u200b\u8bbe\u7f6e\u200b</li> </ul>"},{"location":"migration/overview/#_2","title":"\u65b0\u200b\u4f9d\u8d56\u200b\u9879","text":"<p>MMagic 1.x \u200b\u4f9d\u8d56\u4e8e\u200b\u4e00\u4e9b\u200b\u65b0\u200b\u7684\u200b\u5305\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u5b89\u88c5\u200b\u6559\u7a0b\u200b\u51c6\u5907\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u5e72\u51c0\u200b\u73af\u5883\u200b\u5e76\u200b\u91cd\u65b0\u5b89\u88c5\u200b\u3002</p>"},{"location":"migration/overview/#_3","title":"\u603b\u4f53\u200b\u7ed3\u6784","text":"<p>\u200b\u6211\u4eec\u200b\u5728\u200b MMagic 1.x \u200b\u4e2d\u200b\u5bf9\u200b\u603b\u4f53\u200b\u7ed3\u6784\u200b\u8fdb\u884c\u200b\u4e86\u200b\u91cd\u6784\u200b\uff0c\u200b\u5177\u4f53\u200b\u5982\u4e0b\u200b\uff1a</p> <ul> <li>\u200b\u65e7\u7248\u672c\u200b MMEdit \u200b\u4e2d\u200b\u7684\u200b <code>core</code> \u200b\u88ab\u200b\u62c6\u200b\u5206\u4e3a\u200b <code>engine</code>\u3001<code>evaluation</code>\u3001<code>structures</code> \u200b\u548c\u200b <code>visualization</code></li> <li>\u200b\u65e7\u7248\u672c\u200b MMEdit \u200b\u4e2d\u200b <code>datasets</code> \u200b\u7684\u200b <code>pipelines</code> \u200b\u88ab\u200b\u91cd\u6784\u200b\u4e3a\u200b <code>transforms</code></li> <li>MMagic 1.x \u200b\u4e2d\u200b\u7684\u200b <code>models</code> \u200b\u88ab\u200b\u91cd\u6784\u200b\u4e3a\u200b\u516d\u4e2a\u200b\u90e8\u5206\u200b\uff1a<code>archs</code>\u3001<code>base_models</code>\u3001<code>data_preprocessors</code>\u3001<code>editors</code>\u3001<code>diffusion_schedulers</code> \u200b\u548c\u200b <code>losses</code>\u3002</li> </ul>"},{"location":"migration/overview/#_4","title":"\u5176\u4ed6\u200b\u914d\u7f6e\u200b\u8bbe\u7f6e","text":"<p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u91cd\u547d\u540d\u200b\u4e3a\u200b\u65b0\u200b\u6a21\u677f\u200b\uff1a<code>{model_settings}_{module_setting}_{training_setting}_{datasets_info}</code>\u3002</p> <p>\u200b\u66f4\u200b\u591a\u200b\u914d\u7f6e\u200b\u7ec6\u8282\u200b\u8bf7\u200b\u53c2\u89c1\u200b\u914d\u7f6e\u200b\u6307\u5357\u200b\u3002</p>"},{"location":"migration/runtime/","title":"\u8fd0\u884c\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u8fc1\u79fb","text":"<p>\u200b\u6211\u4eec\u200b\u66f4\u65b0\u200b\u4e86\u200b MMagic 1.x \u200b\u4e2d\u200b\u7684\u200b\u8fd0\u884c\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u91cd\u8981\u200b\u4fee\u6539\u200b\u5982\u4e0b\u200b\uff1a</p> <ul> <li><code>checkpoint_config</code> \u200b\u88ab\u200b\u79fb\u52a8\u200b\u5230\u200b <code>default_hooks.checkpoint</code>\uff0c<code>log_config</code> \u200b\u88ab\u200b\u79fb\u52a8\u200b\u5230\u200b <code>default_hooks.logger</code>\u3002 \u200b\u6211\u4eec\u200b\u5c06\u200b\u8bb8\u591a\u200b hooks \u200b\u8bbe\u7f6e\u200b\u4ece\u200b\u811a\u672c\u200b\u4ee3\u7801\u79fb\u52a8\u200b\u5230\u200b\u8fd0\u884c\u200b\u914d\u7f6e\u200b\u7684\u200b <code>default_hooks</code> \u200b\u5b57\u6bb5\u200b\u4e2d\u200b\u3002</li> <li><code>resume_from</code> \u200b\u88ab\u200b\u79fb\u9664\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>resume</code> \u200b\u66ff\u4ee3\u200b\u5b83\u200b\u3002</li> <li>\u200b\u5982\u679c\u200b resume=True \u200b\u5e76\u4e14\u200b load_from \u200b\u4e0d\u662f\u200b None, \u200b\u5219\u200b\u4ece\u200bload_from\u200b\u4e2d\u200b\u7684\u200b\u68c0\u67e5\u70b9\u200b\u6062\u590d\u200b\u8bad\u7ec3\u200b\u3002</li> <li>\u200b\u5982\u679c\u200b resume=True \u200b\u4e14\u200b load_from \u200b\u4e3a\u200b None\uff0c\u200b\u5219\u200b\u5c1d\u8bd5\u200b\u4ece\u200b\u5de5\u4f5c\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u7684\u200b\u6700\u65b0\u200b\u68c0\u67e5\u70b9\u200b\u6062\u590d\u200b\u3002</li> <li>\u200b\u5982\u679c\u200b resume=False \u200b\u4e14\u200b load_from \u200b\u4e0d\u200b\u4e3a\u200bNone\uff0c\u200b\u5219\u200b\u4ec5\u200b\u52a0\u8f7d\u200b\u68c0\u67e5\u70b9\u200b\uff0c\u200b\u4e0d\u200b\u6062\u590d\u200b\u8bad\u7ec3\u200b\u3002</li> <li>\u200b\u5982\u679c\u200b resume=False \u200b\u4e14\u200b load_from \u200b\u4e3a\u200b None\uff0c\u200b\u5219\u200b\u4e0d\u200b\u52a0\u8f7d\u200b\u4e5f\u200b\u4e0d\u200b\u6062\u590d\u200b\u3002</li> <li><code>dist_params</code> \u200b\u5b57\u200b\u6bb5\u200b\u73b0\u5728\u200b\u662f\u200b <code>env_cfg</code> \u200b\u7684\u200b\u4e00\u4e2a\u200b\u5b50\u5b57\u6bb5\u200b\u3002 \u200b\u5e76\u4e14\u200b\u5728\u200b <code>env_cfg</code> \u200b\u8fd8\u6709\u200b\u4e00\u4e9b\u200b\u65b0\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002</li> <li><code>workflow</code> \u200b\u76f8\u5173\u200b\u529f\u80fd\u200b\u5df2\u200b\u88ab\u200b\u5220\u9664\u200b\u3002</li> <li>\u200b\u65b0\u5b57\u200b\u6bb5\u200b <code>visualizer</code>: \u200b\u53ef\u89c6\u5316\u200b\u5de5\u5177\u200b\u662f\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u8bbe\u8ba1\u200b\u3002\u200b\u5728\u200b runner \u200b\u4e2d\u200b\u4f7f\u7528\u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\u5b9e\u4f8b\u200b\u6765\u200b\u5904\u7406\u7ed3\u679c\u200b\u548c\u200b\u65e5\u5fd7\u200b\u53ef\u89c6\u5316\u200b\u5e76\u200b\u4fdd\u5b58\u200b\u5230\u200b\u4e0d\u540c\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\uff0c\u200b\u4f8b\u5982\u200b Local\u3001TensorBoard \u200b\u548c\u200b Wandb\u3002</li> <li>\u200b\u65b0\u5b57\u200b\u6bb5\u200b <code>default_scope</code>: \u200b\u6240\u6709\u200b\u6ce8\u518c\u5668\u200b\u641c\u7d22\u200b module \u200b\u7684\u200b\u8d77\u70b9\u200b\u3002</li> </ul>  \u200b\u539f\u59cb\u200b\u914d\u7f6e\u200b   \u200b\u65b0\u200b\u7684\u200b\u914d\u7f6e\u200b  <pre><code>checkpoint_config = dict(  # \u200b\u8bbe\u7f6e\u200b\u68c0\u67e5\u70b9\u200b hook \u200b\u7684\u200b\u914d\u7f6e\u200b, \u200b\u53c2\u8003\u200b https://github.com/open-mmlab/mmcv/blob/master/mmcv/runner/hooks/checkpoint.py \u200b\u5b8c\u6210\u200b\u7684\u200b\n    interval=5000,  # \u200b\u4fdd\u5b58\u200b\u95f4\u9694\u200b\u4e3a\u200b 5000 \u200b\u6b21\u200b\u8fed\u4ee3\u200b\n    save_optimizer=True,  # \u200b\u4e5f\u200b\u4fdd\u5b58\u200b\u4f18\u5316\u200b\u5668\u200b\n    by_epoch=False)  # \u200b\u901a\u8fc7\u200b iterations \u200b\u8ba1\u6570\u200b\nlog_config = dict(  # \u200b\u6ce8\u518c\u200b\u65e5\u5fd7\u200b hook \u200b\u7684\u200b\u914d\u7f6e\u200b\n    interval=100,  # \u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\u7684\u200b\u95f4\u9694\u200b\n    hooks=[\n        dict(type='TextLoggerHook', by_epoch=False),  # logger \u200b\u7528\u6765\u200b\u8bb0\u5f55\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\n        dict(type='TensorboardLoggerHook'),  # \u200b\u4e5f\u200b\u652f\u6301\u200b Tensorboard logger\n    ])\nvisual_config = None  # \u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u5b83\u200b\u3002\n# runtime settings\ndist_params = dict(backend='nccl')  # \u200b\u8bbe\u7f6e\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b\u7aef\u53e3\u200b\nlog_level = 'INFO'  # \u200b\u65e5\u5fd7\u200b\u7b49\u7ea7\u200b\nload_from = None # \u200b\u4ece\u200b\u6307\u5b9a\u200b\u8def\u5f84\u200b\u52a0\u8f7d\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u4f1a\u200b\u6062\u590d\u200b\u8bad\u7ec3\u200b\nresume_from = None # \u200b\u4ece\u200b\u7ed9\u5b9a\u200b\u8def\u5f84\u200b\u6062\u590d\u200b\u68c0\u67e5\u70b9\u200b\uff0c\u200b\u8bad\u7ec3\u200b\u5c06\u200b\u4ece\u200b\u4fdd\u5b58\u200b\u68c0\u67e5\u70b9\u200b\u7684\u200bepoch\u200b\u5f00\u59cb\u200b\u6062\u590d\u200b\nworkflow = [('train', 1)]  # Runner \u200b\u7684\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b. [('train', 1)] \u200b\u610f\u5473\u7740\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u5de5\u4f5c\u200b\u6d41\u200b\uff0c\u200b\u5e76\u4e14\u200b\u540d\u4e3a\u200b\u201ctrain\u201d\u200b\u7684\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u6267\u884c\u200b\u4e00\u6b21\u200b\u3002 \u200b\u5728\u200b\u8bad\u7ec3\u200b\u5f53\u524d\u200b\u7684\u200b\u62a0\u200b\u56fe\u200b\u6a21\u578b\u200b\u65f6\u200b\uff0c\u200b\u8bf7\u200b\u4fdd\u6301\u200b\u6b64\u9879\u200b\u4e0d\u53d8\u200b\n</code></pre> <pre><code>default_hooks = dict(  # \u200b\u7528\u6765\u200b\u521b\u5efa\u200b\u9ed8\u8ba4\u200b hooks\n    checkpoint=dict(  # \u200b\u8bbe\u7f6e\u200b checkpoint hook \u200b\u7684\u200b\u914d\u7f6e\u200b\n        type='CheckpointHook',\n        interval=5000,  # \u200b\u4fdd\u5b58\u200b\u95f4\u9694\u200b\u4e3a\u200b5000\u200b\u6b21\u200b\u8fed\u4ee3\u200b\n        save_optimizer=True,\n        by_epoch=False,  # \u200b\u901a\u8fc7\u200b iterations \u200b\u8ba1\u6570\u200b\n        out_dir=save_dir,\n    ),\n    timer=dict(type='IterTimerHook'),\n    logger=dict(type='LoggerHook', interval=100),  # \u200b\u6ce8\u518c\u200b logger hook \u200b\u7684\u200b\u914d\u7f6e\u200b\n    param_scheduler=dict(type='ParamSchedulerHook'),\n    sampler_seed=dict(type='DistSamplerSeedHook'),\n)\ndefault_scope = 'mmedit' # \u200b\u7528\u6765\u200b\u8bbe\u7f6e\u200b\u6ce8\u518c\u200b\u4f4d\u7f6e\u200b\nenv_cfg = dict(  # \u200b\u8bbe\u7f6e\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b\u7aef\u53e3\u200b\n    cudnn_benchmark=False,\n    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=4),\n    dist_cfg=dict(backend='nccl'),\n)\nlog_level = 'INFO'  # \u200b\u65e5\u5fd7\u200b\u7b49\u7ea7\u200b\nlog_processor = dict(type='LogProcessor', window_size=100, by_epoch=False)  # \u200b\u7528\u6765\u200b\u521b\u5efa\u200b\u65e5\u5fd7\u200b\u5904\u7406\u5668\u200b\nload_from = None  # \u200b\u4ece\u200b\u6307\u5b9a\u200b\u8def\u5f84\u200b\u52a0\u8f7d\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u4f1a\u200b\u6062\u590d\u200b\u8bad\u7ec3\u200b\nresume = False  # \u200b\u4ece\u200b\u7ed9\u5b9a\u200b\u8def\u5f84\u200b\u6062\u590d\u200b\u68c0\u67e5\u70b9\u200b\uff0c\u200b\u8bad\u7ec3\u200b\u5c06\u200b\u4ece\u200b\u4fdd\u5b58\u200b\u68c0\u67e5\u70b9\u200b\u7684\u200bepoch\u200b\u5f00\u59cb\u200b\u6062\u590d\u200b\n</code></pre>"},{"location":"migration/schedule/","title":"\u8c03\u5ea6\u200b\u5668\u200b\u7684\u200b\u8fc1\u79fb","text":"<p>\u200b\u6211\u4eec\u200b\u66f4\u65b0\u200b\u4e86\u200bMMagic 1.x \u200b\u4e2d\u200b\u7684\u200b\u8c03\u5ea6\u200b\u5668\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u91cd\u8981\u200b\u4fee\u6539\u200b\u5982\u4e0b\u200b:</p> <ul> <li>\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b <code>optim_wrapper</code> \u200b\u5b57\u6bb5\u200b\u6765\u200b\u6307\u5b9a\u200b\u5173\u4e8e\u200b\u4f18\u5316\u200b\u8fc7\u7a0b\u200b\u7684\u200b\u6240\u6709\u200b\u914d\u7f6e\u200b\u3002<code>optimizer</code> \u200b\u5b57\u200b\u6bb5\u200b\u73b0\u5728\u200b\u662f\u200b <code>optim_wrapper</code> \u200b\u7684\u200b\u4e00\u4e2a\u200b\u5b50\u5b57\u6bb5\u200b\u3002</li> <li><code>lr_config</code> \u200b\u5b57\u6bb5\u200b\u88ab\u200b\u79fb\u9664\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u65b0\u200b\u7684\u200b <code>param_scheduler</code> \u200b\u6765\u200b\u4ee3\u66ff\u200b\u5b83\u200b\u3002</li> <li><code>total_iters</code> \u200b\u5b57\u6bb5\u200b\u5df2\u200b\u79fb\u81f3\u200b <code>train_cfg</code>\uff0c\u200b\u4f5c\u4e3a\u200b <code>max_iters</code>, <code>val_cfg</code> \u200b\u548c\u200b <code>test_cfg</code>\uff0c\u200b\u7528\u4e8e\u200b\u914d\u7f6e\u200b\u8bad\u7ec3\u200b\u3001\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u4e2d\u200b\u7684\u200b\u5faa\u73af\u200b\u3002</li> </ul>  Original   New  <pre><code>optimizers = dict(generator=dict(type='Adam', lr=1e-4, betas=(0.9, 0.999)))   # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u4f18\u5316\u200b\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\uff0c\u200b\u652f\u6301\u200b PyTorch \u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u4f18\u5316\u200b\u5668\u200b\uff0c\u200b\u5176\u200b\u53c2\u6570\u200b\u4e0e\u200b PyTorch \u200b\u4e2d\u200b\u7684\u200b\u53c2\u6570\u200b\u76f8\u540c\u200b\u3002\ntotal_iters = 300000 # \u200b\u603b\u200b\u8bad\u7ec3\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\nlr_config = dict( # \u200b\u7528\u4e8e\u200b\u6ce8\u518c\u200b LrUpdater hook \u200b\u7684\u200b\u5b66\u4e60\u200b\u7387\u200b\u8c03\u5ea6\u200b\u5668\u200b\u914d\u7f6e\u200b\n    policy='Step', by_epoch=False, step=[200000], gamma=0.5)  # \u200b\u8c03\u5ea6\u200b\u5668\u200b\u7684\u200b\u7b56\u7565\u200b\n</code></pre> <pre><code>optim_wrapper = dict(\n    dict(\n        type='OptimWrapper',\n        optimizer=dict(type='Adam', lr=1e-4),\n    )\n)  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u4f18\u5316\u200b\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\uff0c\u200b\u652f\u6301\u200b PyTorch \u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u4f18\u5316\u200b\u5668\u200b\uff0c\u200b\u5176\u200b\u53c2\u6570\u200b\u4e0e\u200b PyTorch \u200b\u4e2d\u200b\u7684\u200b\u53c2\u6570\u200b\u76f8\u540c\u200b\u3002\nparam_scheduler = dict(  # \u200b\u5b66\u4e60\u7b56\u7565\u200b\u7684\u200b\u914d\u7f6e\u200b\n    type='MultiStepLR', by_epoch=False, milestones=[200000], gamma=0.5)  # \u200b\u8c03\u5ea6\u200b\u5668\u200b\u7684\u200b\u7b56\u7565\u200b\ntrain_cfg = dict(\n    type='IterBasedTrainLoop', max_iters=300000, val_interval=5000)  # \u200b\u8bad\u7ec3\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u914d\u7f6e\u200b\nval_cfg = dict(type='ValLoop')  # \u200b\u9a8c\u8bc1\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\ntest_cfg = dict(type='TestLoop')  # \u200b\u6d4b\u8bd5\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\n</code></pre> <p>\u200b\u6709\u5173\u200b\u8c03\u5ea6\u200b\u5668\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u53ef\u200b\u5728\u200b MMEngine Documents \u200b\u4e2d\u200b\u627e\u5230\u200b\u3002</p>"},{"location":"migration/visualization/","title":"\u53ef\u89c6\u5316\u200b\u7684\u200b\u8fc1\u79fb","text":"<p>\u200b\u5728\u200b0.x\u200b\u7248\u4e2d\u200b\uff0cMMEditing\u200b\u4f7f\u7528\u200b<code>VisualizationHook</code>\u200b\u6765\u200b\u5bf9\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u751f\u6210\u200b\u7684\u200b\u7ed3\u679c\u200b\u8fdb\u884c\u200b\u53ef\u89c6\u5316\u200b\uff0c\u200b\u5728\u200b1.x\u200b\u7248\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u8be5\u200b\u529f\u80fd\u200b\u6574\u5408\u200b\u5230\u200b<code>BasicVisualizationHook</code> / <code>VisualizationHook</code>\u200b\u4e2d\u200b\uff0c\u200b\u800c\u4e14\u200b\u9075\u5faa\u200bMMEngine\u200b\u7684\u200b\u8bbe\u8ba1\u200b\uff0c\u200b\u6211\u4eec\u200b\u5b9e\u73b0\u200b\u4e86\u200b<code>ConcatImageVisualizer</code> / <code>Visualizer</code>\u200b\u548c\u200b\u4e00\u7cfb\u5217\u200b<code>VisBackend</code>\u200b\u6765\u200b\u7ed8\u5236\u200b\u548c\u200b\u4fdd\u5b58\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\u3002</p>  0.x\u200b\u7248\u200b   1.x\u200b\u7248\u200b  <pre><code>visual_config = dict(\n    type='VisualizationHook',\n    output_dir='visual',\n    interval=1000,\n    res_name_list=['gt_img', 'masked_img', 'fake_res', 'fake_img'],\n)\n</code></pre> <pre><code>vis_backends = [dict(type='LocalVisBackend')]\nvisualizer = dict(\n    type='ConcatImageVisualizer',\n    vis_backends=vis_backends,\n    fn_key='gt_path',\n    img_keys=['gt_img', 'input', 'pred_img'],\n    bgr2rgb=True)\ncustom_hooks = [dict(type='BasicVisualizationHook', interval=1)]\n</code></pre> <p>\u200b\u8981\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b\u53ef\u89c6\u5316\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u8fd9\u4e2a\u200b\u6559\u7a0b\u200b\u3002</p>"},{"location":"user_guides/config/","title":"\u6559\u7a0b\u200b1 \u200b\u4e86\u89e3\u200bMMagic\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6","text":"<p>\u200b\u6211\u4eec\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u914d\u7f6e\u200b\u7cfb\u7edf\u200b\u4e2d\u200b\u91c7\u7528\u200b\u4e86\u200b\u6a21\u5757\u5316\u200b\u548c\u200b\u7ee7\u627f\u200b\u8bbe\u8ba1\u200b\uff0c\u200b\u65b9\u4fbf\u200b\u8fdb\u884c\u200b\u5404\u79cd\u200b\u5b9e\u9a8c\u200b\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u5e0c\u671b\u200b\u67e5\u770b\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8fd0\u884c\u200b <code>python tools/misc/print_config.py /PATH/TO/CONFIG</code> \u200b\u6765\u200b\u67e5\u770b\u200b\u5b8c\u6574\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u4ee5\u4e0b\u200b\u6559\u7a0b\u200b\u4e86\u89e3\u200b\u6211\u4eec\u200b\u914d\u7f6e\u200b\u7cfb\u7edf\u200b\u7684\u200b\u4f7f\u7528\u200b\u65b9\u6cd5\u200b\u3002</p> <ul> <li>\u200b\u6559\u7a0b\u200b1\uff1a\u200b\u4e86\u89e3\u200bMMagic\u200b\u4e2d\u200b\u7684\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u901a\u8fc7\u200b\u811a\u672c\u200b\u53c2\u6570\u200b\u4fee\u6539\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7ed3\u6784\u200b</li> <li>\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u547d\u540d\u200b\u98ce\u683c\u200b</li> <li>EDSR\u200b\u7684\u200b\u793a\u4f8b\u200b<ul> <li>\u200b\u6a21\u578b\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u6570\u636e\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u6570\u636e\u200b\u6d41\u7a0b\u200b</li> <li>\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b</li> <li>\u200b\u8bc4\u4f30\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u8bad\u7ec3\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u4f18\u5316\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u94a9\u5b50\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u8fd0\u884c\u200b\u65f6\u200b\u914d\u7f6e\u200b</li> </ul> </li> <li>StyleGAN2\u200b\u7684\u200b\u793a\u4f8b\u200b<ul> <li>\u200b\u6a21\u578b\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u6570\u636e\u200b\u96c6\u200b\u548c\u200b\u8bc4\u4f30\u5668\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u8bad\u7ec3\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u4f18\u5316\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u94a9\u5b50\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u8fd0\u884c\u200b\u65f6\u200b\u914d\u7f6e\u200b</li> </ul> </li> <li>\u200b\u5176\u4ed6\u200b\u793a\u4f8b\u200b<ul> <li>\u200b\u4fee\u590d\u200b\u4efb\u52a1\u200b\u7684\u200b\u914d\u7f6e\u200b\u793a\u4f8b\u200b</li> <li>\u200b\u62a0\u200b\u56fe\u200b\u4efb\u52a1\u200b\u7684\u200b\u914d\u7f6e\u200b\u793a\u4f8b\u200b</li> <li>\u200b\u6062\u590d\u200b\u4efb\u52a1\u200b\u7684\u200b\u914d\u7f6e\u200b\u793a\u4f8b\u200b</li> </ul> </li> </ul>"},{"location":"user_guides/config/#_1","title":"\u901a\u8fc7\u200b\u811a\u672c\u200b\u53c2\u6570\u200b\u4fee\u6539\u200b\u914d\u7f6e","text":"<p>\u200b\u4f7f\u7528\u200b <code>tools/train.py</code>\u200b\u6216\u200b <code>tools/test.py</code> \u200b\u6765\u200b\u8fd0\u884c\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6307\u5b9a\u200b <code>--cfg-options</code> \u200b\u6765\u200b\u4e34\u65f6\u200b\u4fee\u6539\u200b\u914d\u7f6e\u200b\u3002</p> <ul> <li>\u200b\u66f4\u65b0\u200b\u5b57\u5178\u200b\u94fe\u4e2d\u200b\u7684\u200b\u914d\u7f6e\u200b\u952e\u200b</li> </ul> <p>\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u539f\u59cb\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u5b57\u5178\u200b\u952e\u200b\u7684\u200b\u987a\u5e8f\u200b\u6307\u5b9a\u200b\u914d\u7f6e\u200b\u9009\u9879\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c<code>--cfg-options test_cfg.use_ema=False</code>   \u200b\u5c06\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u91c7\u6837\u200b\u6a21\u578b\u200b\u66f4\u200b\u6539\u4e3a\u200b\u539f\u59cb\u200b\u751f\u6210\u5668\u200b\uff0c<code>--cfg-options train_dataloader.batch_size=8</code> \u200b\u5c06\u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u7684\u200b\u6279\u200b\u5927\u5c0f\u200b\u66f4\u200b\u6539\u4e3a\u200b8\u3002</p> <ul> <li>\u200b\u66f4\u65b0\u200b\u914d\u7f6e\u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u952e\u200b</li> </ul> <p>\u200b\u60a8\u200b\u7684\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u6709\u4e9b\u200b\u914d\u7f6e\u200b\u5b57\u5178\u200b\u662f\u200b\u4f5c\u4e3a\u200b\u5217\u8868\u200b\u7ec4\u6210\u200b\u7684\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u8bad\u7ec3\u200b\u6d41\u7a0b\u200b <code>train_dataloader.dataset.pipeline</code>   \u200b\u901a\u5e38\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5217\u8868\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>[dict(type='LoadImageFromFile'), ...]</code>\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u8981\u200b\u5728\u200b\u6d41\u7a0b\u200b\u4e2d\u5c06\u200b <code>'LoadImageFromFile'</code>   \u200b\u66f4\u200b\u6539\u4e3a\u200b <code>'LoadImageFromWebcam'</code>\uff0c\u200b\u53ef\u4ee5\u200b\u6307\u5b9a\u200b <code>--cfg-options train_dataloader.dataset.pipeline.0.type=LoadImageFromWebcam</code>   \u3002\u200b\u8bad\u7ec3\u200b\u6d41\u7a0b\u200b <code>train_pipeline</code> \u200b\u901a\u5e38\u200b\u4e5f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5217\u8868\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>[dict(type='LoadImageFromFile'), ...]</code>   \u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u8981\u200b\u5c06\u200b <code>'LoadImageFromFile'</code> \u200b\u66f4\u200b\u6539\u4e3a\u200b <code>'LoadMask'</code>\uff0c\u200b\u53ef\u4ee5\u200b\u6307\u5b9a\u200b <code>--cfg-options train_pipeline.0.type=LoadMask</code>\u3002</p> <ul> <li>\u200b\u66f4\u65b0\u200b\u5217\u8868\u200b/\u200b\u5143\u7ec4\u200b\u7684\u200b\u503c\u200b</li> </ul> <p>\u200b\u5982\u679c\u200b\u8981\u200b\u66f4\u65b0\u200b\u7684\u200b\u503c\u200b\u662f\u200b\u5217\u8868\u200b\u6216\u200b\u5143\u7ec4\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b <code>--cfg-options key=\"[a,b]\"</code> \u200b\u6216\u200b <code>--cfg-options key=a,b</code>   \u3002\u200b\u5b83\u200b\u8fd8\u200b\u5141\u8bb8\u200b\u5d4c\u5957\u200b\u7684\u200b\u5217\u8868\u200b/\u200b\u5143\u7ec4\u200b\u503c\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>--cfg-options key=\"[(a,b),(c,d)]\"</code>\u3002\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u652f\u6301\u200b\u5217\u8868\u200b/\u200b\u5143\u7ec4\u200b\u6570\u636e\u7c7b\u578b\u200b\uff0c\u200b\u5f15\u53f7\u200b <code>\"</code>   \u200b\u662f\u200b\u5fc5\u9700\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5728\u200b\u6307\u5b9a\u200b\u7684\u200b\u503c\u200b\u5185\u200b\u5f15\u53f7\u200b\u4e4b\u95f4\u200b\u4e0d\u200b\u5141\u8bb8\u200b\u6709\u200b\u7a7a\u683c\u200b\u3002</p>"},{"location":"user_guides/config/#_2","title":"\u914d\u7f6e\u6587\u4ef6\u200b\u7ed3\u6784","text":"<p>\u200b\u5728\u200b<code>config/_base_</code> \u200b\u76ee\u5f55\u200b\u4e0b\u200b\u6709\u200b\u4e09\u79cd\u200b\u57fa\u672c\u200b\u7ec4\u4ef6\u200b\u7c7b\u578b\u200b\uff1a\u200b\u6570\u636e\u200b\u96c6\u200b\uff08datasets\uff09\u3001\u200b\u6a21\u578b\u200b\uff08models\uff09\u200b\u548c\u200b\u9ed8\u8ba4\u200b\u8fd0\u884c\u200b\u65f6\u200b\uff08default_runtime\uff09\u3002\u200b\u8bb8\u591a\u200b\u65b9\u6cd5\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u5176\u4e2d\u200b\u7684\u200b\u6bcf\u79cd\u200b\u7ec4\u4ef6\u200b\u4e4b\u4e00\u200b\u8fdb\u884c\u200b\u7b80\u5355\u200b\u6784\u5efa\u200b\uff0c\u200b\u4f8b\u5982\u200bAOT-GAN\u3001EDVR\u3001GLEAN\u3001StyleGAN2\u3001CycleGAN\u3001SinGAN\u200b\u7b49\u200b\u3002\u200b\u7531\u200b<code>_base_</code> \u200b\u7ec4\u4ef6\u200b\u7ec4\u6210\u200b\u7684\u200b\u914d\u7f6e\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u539f\u59cb\u200b\u914d\u7f6e\u200b\u3002</p> <p>\u200b\u5bf9\u4e8e\u200b\u540c\u4e00\u200b\u6587\u4ef6\u5939\u200b\u4e0b\u200b\u7684\u200b\u6240\u6709\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u5efa\u8bae\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u539f\u59cb\u200b\u914d\u7f6e\u200b\u3002\u200b\u6240\u6709\u200b\u5176\u4ed6\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u90fd\u200b\u5e94\u8be5\u200b\u7ee7\u627f\u200b\u81ea\u200b\u539f\u59cb\u200b\u914d\u7f6e\u200b\u3002\u200b\u540c\u65f6\u200b\uff0c\u200b\u6700\u5927\u200b\u7684\u200b\u7ee7\u627f\u200b\u5c42\u7ea7\u200b\u4e3a\u200b3\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u4fbf\u4e8e\u200b\u7406\u89e3\u200b\uff0c\u200b\u6211\u4eec\u200b\u5efa\u8bae\u200b\u8d21\u732e\u8005\u200b\u4ece\u200b\u73b0\u6709\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u7ee7\u627f\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u57fa\u4e8e\u200bBasicVSR\u200b\u8fdb\u884c\u200b\u4e86\u200b\u67d0\u4e9b\u200b\u4fee\u6539\u200b\uff0c\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6307\u5b9a\u200b<code>_base_ = ../basicvsr/basicvsr_reds4.py</code> \u200b\u6765\u200b\u9996\u5148\u200b\u7ee7\u627f\u200b\u57fa\u672c\u200b\u7684\u200bBasicVSR\u200b\u7ed3\u6784\u200b\uff0c\u200b\u7136\u540e\u200b\u4fee\u6539\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u5fc5\u8981\u200b\u5b57\u200b\u6bb5\u200b\u3002\u200b\u5982\u679c\u200b\u57fa\u4e8e\u200bStyleGAN2\u200b\u8fdb\u884c\u200b\u4e86\u200b\u67d0\u4e9b\u200b\u4fee\u6539\u200b\uff0c\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6307\u5b9a\u200b<code>_base_ = ../styleganv2/stylegan2_c2_ffhq_256_b4x8_800k.py</code> \u200b\u6765\u200b\u9996\u5148\u200b\u7ee7\u627f\u200b\u57fa\u672c\u200b\u7684\u200bStyleGAN2\u200b\u7ed3\u6784\u200b\uff0c\u200b\u7136\u540e\u200b\u4fee\u6539\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u5fc5\u8981\u200b\u5b57\u200b\u6bb5\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u6b63\u5728\u200b\u6784\u5efa\u200b\u4e00\u79cd\u200b\u5b8c\u5168\u200b\u4e0d\u200b\u4e0e\u200b\u4efb\u4f55\u200b\u73b0\u6709\u200b\u65b9\u6cd5\u200b\u5171\u4eab\u200b\u7ed3\u6784\u200b\u7684\u200b\u5168\u65b0\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b<code>configs</code>\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b<code>xxx</code>\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\u3002</p> <p>\u200b\u8be6\u7ec6\u200b\u7684\u200b\u6587\u6863\u200b\u8bf7\u200b\u53c2\u8003\u200bMMEngine\u3002</p>"},{"location":"user_guides/config/#_3","title":"\u914d\u7f6e\u6587\u4ef6\u200b\u547d\u540d\u200b\u98ce\u683c","text":"<p>\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u6309\u7167\u200b\u4e0b\u9762\u200b\u7684\u200b\u98ce\u683c\u200b\u547d\u540d\u200b\u3002\u200b\u6211\u4eec\u200b\u5efa\u8bae\u200b\u793e\u533a\u200b\u8d21\u732e\u8005\u200b\u4f7f\u7528\u200b\u540c\u6837\u200b\u7684\u200b\u98ce\u683c\u200b\u3002</p> <pre><code>{model}_[module setting]_{training schedule}_{dataset}\n</code></pre> <p><code>{xxx}</code> \u200b\u662f\u200b\u5fc5\u586b\u200b\u5b57\u200b\u6bb5\u200b\uff0c<code>[yyy]</code> \u200b\u662f\u200b\u53ef\u200b\u9009\u5b57\u200b\u6bb5\u200b\u3002</p> <ul> <li><code>{model}</code>\uff1a\u200b\u6a21\u578b\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5982\u200b <code>stylegan</code>\u3001<code>dcgan</code>\u3001<code>basicvsr</code>\u3001<code>dim</code>   \u200b\u7b49\u200b\u3002\u200b\u539f\u59cb\u200b\u8bba\u6587\u200b\u4e2d\u200b\u63d0\u5230\u200b\u7684\u200b\u8bbe\u7f6e\u200b\u4e5f\u200b\u5305\u542b\u200b\u5728\u200b\u6b64\u200b\u5b57\u200b\u6bb5\u200b\u4e2d\u200b\uff08\u200b\u4f8b\u5982\u200b <code>Stylegan2-config-f</code>\u3001<code>edvrm</code> \u200b\u7684\u200b <code>edvrm_8xb4-600k_reds</code>\uff09\u3002</li> <li><code>[module setting]</code>\uff1a\u200b\u67d0\u4e9b\u200b\u6a21\u5757\u200b\u7684\u200b\u5177\u4f53\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u5305\u62ec\u200b Encoder\u3001Decoder\u3001Generator\u3001Discriminator\u3001Normalization\u3001loss\u3001Activation   \u200b\u7b49\u200b\u3002\u200b\u4f8b\u5982\u200b <code>c64n7</code> \u200b\u7684\u200b <code>basicvsr-pp_c64n7_8xb1-600k_reds4</code>\uff0cdcgan \u200b\u7684\u200b\u5b66\u4e60\u200b\u7387\u200b <code>Glr4e-4_Dlr1e-4</code>\uff0cstylegan3 \u200b\u7684\u200b <code>gamma32.8</code>\uff0csagan   \u200b\u4e2d\u200b\u7684\u200b <code>woReLUInplace</code>\u3002\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u90e8\u5206\u200b\uff0c\u200b\u6765\u81ea\u200b\u4e0d\u540c\u200b\u5b50\u200b\u6a21\u5757\u200b\uff08\u200b\u4f8b\u5982\u200b generator \u200b\u548c\u200b discriminator\uff09\u200b\u7684\u200b\u4fe1\u606f\u200b\u7528\u200b <code>_</code> \u200b\u8fde\u63a5\u8d77\u6765\u200b\u3002</li> <li><code>{training_scheduler}</code>\uff1a\u200b\u8bad\u7ec3\u200b\u7684\u200b\u7279\u5b9a\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u5305\u62ec\u200b\u6279\u91cf\u200b\u5927\u5c0f\u200b\u3001\u200b\u8bad\u7ec3\u200b\u8ba1\u5212\u200b\u7b49\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5b66\u4e60\u200b\u7387\u200b\uff08\u200b\u4f8b\u5982\u200b <code>lr1e-3</code>\uff09\uff0c\u200b\u4f7f\u7528\u200b\u7684\u200b GPU   \u200b\u6570\u91cf\u200b\u548c\u200b\u6279\u91cf\u200b\u5927\u5c0f\u200b\uff08\u200b\u4f8b\u5982\u200b <code>8xb32</code>\uff09\uff0c\u200b\u603b\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\uff08\u200b\u4f8b\u5982\u200b <code>160kiter</code>\uff09\u200b\u6216\u200b\u5728\u200b discriminator \u200b\u4e2d\u200b\u663e\u793a\u200b\u7684\u200b\u56fe\u50cf\u200b\u6570\u91cf\u200b\uff08\u200b\u4f8b\u5982\u200b <code>12Mimgs</code>\uff09\u3002</li> <li><code>{dataset}</code>\uff1a\u200b\u6570\u636e\u200b\u96c6\u200b\u540d\u79f0\u200b\u548c\u200b\u6570\u636e\u200b\u5927\u5c0f\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>deepfillv1_4xb4_celeba-256x256</code> \u200b\u7684\u200b <code>celeba-256x256</code>\uff0c<code>basicvsr_2xb4_reds4</code>   \u200b\u7684\u200b <code>reds4</code>\uff0c<code>ffhq</code>\uff0c<code>lsun-car</code>\uff0c<code>celeba-hq</code>\u3002</li> </ul>"},{"location":"user_guides/config/#edsr","title":"EDSR\u200b\u7684\u200b\u793a\u4f8b","text":"<p>\u200b\u4e3a\u4e86\u200b\u5e2e\u52a9\u200b\u7528\u6237\u200b\u5bf9\u200b\u5b8c\u6574\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u6709\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u200b\u7684\u200b\u4e86\u89e3\u200b\uff0c\u200b\u6211\u4eec\u200b\u5bf9\u200b\u6211\u4eec\u200b\u5b9e\u73b0\u200b\u7684\u200bEDSR\u200b\u6a21\u578b\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b \u200b\u8fdb\u884c\u200b\u7b80\u8981\u200b\u8bf4\u660e\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u3002\u200b\u5173\u4e8e\u200b\u6bcf\u4e2a\u200b\u6a21\u5757\u200b\u7684\u200b\u66f4\u200b\u8be6\u7ec6\u200b\u7528\u6cd5\u200b\u548c\u200b\u76f8\u5e94\u200b\u7684\u200b\u66ff\u4ee3\u200b\u65b9\u6848\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u8003\u200bAPI\u200b\u6587\u6863\u200b\u548c\u200bMMEngine\u200b\u4e2d\u200b\u7684\u200b\u6559\u7a0b\u200b\u3002</p>"},{"location":"user_guides/config/#_4","title":"\u6a21\u578b\u200b\u914d\u7f6e","text":"<p>\u200b\u5728\u200bMMagic\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b <code>model</code> \u200b\u5b57\u6bb5\u200b\u6765\u200b\u8bbe\u7f6e\u200b\u6a21\u578b\u200b\u3002</p> <pre><code>model = dict(\n    type='BaseEditModel',  # \u200b\u6a21\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\n    generator=dict(  # \u200b\u751f\u6210\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type='EDSRNet',  # \u200b\u751f\u6210\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\n        in_channels=3,  # \u200b\u8f93\u5165\u200b\u7684\u200b\u901a\u9053\u200b\u6570\u200b\n        out_channels=3,  # \u200b\u8f93\u51fa\u200b\u7684\u200b\u901a\u9053\u200b\u6570\u200b\n        mid_channels=64,  # \u200b\u4e2d\u95f4\u200b\u7279\u5f81\u200b\u7684\u200b\u901a\u9053\u200b\u6570\u200b\n        num_blocks=16,  # \u200b\u4e3b\u5e72\u200b\u7f51\u7edc\u200b\u4e2d\u200b\u7684\u200b\u5757\u200b\u6570\u200b\n        upscale_factor=scale,  # \u200b\u4e0a\u200b\u91c7\u6837\u200b\u56e0\u5b50\u200b\n        res_scale=1,  # \u200b\u7528\u4e8e\u200b\u7f29\u653e\u200b\u6b8b\u5dee\u200b\u5757\u200b\u4e2d\u200b\u7684\u200b\u6b8b\u5dee\u200b\n        rgb_mean=(0.4488, 0.4371, 0.4040),  # RGB\u200b\u56fe\u50cf\u200b\u7684\u200b\u5747\u503c\u200b\n        rgb_std=(1.0, 1.0, 1.0)),  # RGB\u200b\u56fe\u50cf\u200b\u7684\u200b\u6807\u51c6\u5dee\u200b\n    pixel_loss=dict(type='L1Loss', loss_weight=1.0, reduction='mean'),  # \u200b\u914d\u7f6e\u200b\u50cf\u7d20\u200b\u635f\u5931\u200b\n    train_cfg=dict(),  # \u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u7684\u200b\u914d\u7f6e\u200b\n    test_cfg=dict(),  # \u200b\u6d4b\u8bd5\u200b\u6a21\u578b\u200b\u7684\u200b\u914d\u7f6e\u200b\n    data_preprocessor=dict(  # \u200b\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type='DataPreprocessor', mean=[0., 0., 0.], std=[255., 255., 255.])\n)\n</code></pre>"},{"location":"user_guides/config/#_5","title":"\u6570\u636e\u200b\u914d\u7f6e","text":"<p>\u200b\u8bad\u7ec3\u200b\u3001\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u6d4b\u8bd5\u8fd0\u884c\u200b\u5668\u200b(runner) \u200b\u90fd\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b(Dataloader)\u3002 \u200b\u4e3a\u4e86\u200b\u6784\u5efa\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\uff0c\u200b\u9700\u8981\u200b\u8bbe\u7f6e\u200b\u6570\u636e\u200b\u96c6\u200b(Dataset)\u200b\u548c\u200b\u6570\u636e\u5904\u7406\u200b\u6d41\u7a0b\u200b(data pipeline)\u3002 \u200b\u7531\u4e8e\u200b\u8fd9\u90e8\u5206\u200b\u7684\u200b\u590d\u6742\u6027\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4e2d\u95f4\u200b\u53d8\u91cf\u200b\u6765\u200b\u7b80\u5316\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u914d\u7f6e\u200b\u7684\u200b\u7f16\u5199\u200b\u3002</p>"},{"location":"user_guides/config/#_6","title":"\u6570\u636e\u200b\u6d41\u7a0b","text":"<pre><code>train_pipeline = [  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u5904\u7406\u200b\u6d41\u7a0b\u200b\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\n         key='img',  # \u200b\u5728\u200b\u7ed3\u679c\u200b\u4e2d\u200b\u67e5\u627e\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b\u952e\u540d\u200b\n         color_type='color',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u989c\u8272\u200b\u7c7b\u578b\u200b\n         channel_order='rgb',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u901a\u9053\u200b\u987a\u5e8f\u200b\n         imdecode_backend='cv2'),  # \u200b\u89e3\u7801\u200b\u540e\u200b\u7aef\u200b\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\n         key='gt',  # \u200b\u5728\u200b\u7ed3\u679c\u200b\u4e2d\u200b\u67e5\u627e\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b\u952e\u540d\u200b\n         color_type='color',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u989c\u8272\u200b\u7c7b\u578b\u200b\n         channel_order='rgb',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u901a\u9053\u200b\u987a\u5e8f\u200b\n         imdecode_backend='cv2'),  # \u200b\u89e3\u7801\u200b\u540e\u200b\u7aef\u200b\n    dict(type='SetValues', dictionary=dict(scale=scale)),  # \u200b\u5c06\u503c\u200b\u8bbe\u7f6e\u200b\u7ed9\u200b\u76ee\u6807\u200b\u952e\u540d\u200b\n    dict(type='PairedRandomCrop', gt_patch_size=96),  # \u200b\u968f\u673a\u200b\u88c1\u526a\u200b\u6210\u200b\u914d\u5bf9\u200b\u56fe\u50cf\u200b\n    dict(type='Flip',  # \u200b\u7ffb\u8f6c\u200b\u56fe\u50cf\u200b\n         keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b\u7ffb\u8f6c\u200b\u7684\u200b\u56fe\u50cf\u200b\u952e\u540d\u200b\n         flip_ratio=0.5,  # \u200b\u7ffb\u8f6c\u200b\u6bd4\u4f8b\u200b\n         direction='horizontal'),  # \u200b\u7ffb\u8f6c\u200b\u65b9\u5411\u200b\n    dict(type='Flip',  # \u200b\u7ffb\u8f6c\u200b\u56fe\u50cf\u200b\n         keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b\u7ffb\u8f6c\u200b\u7684\u200b\u56fe\u50cf\u200b\u952e\u540d\u200b\n         flip_ratio=0.5,  # \u200b\u7ffb\u8f6c\u200b\u6bd4\u4f8b\u200b\n         direction='vertical'),  # \u200b\u7ffb\u8f6c\u200b\u65b9\u5411\u200b\n    dict(type='RandomTransposeHW',  # \u200b\u968f\u673a\u200b\u4ea4\u6362\u200b\u56fe\u50cf\u200b\u7684\u200b\u5bbd\u200b\u9ad8\u200b\n         keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b\u4ea4\u6362\u200b\u7684\u200b\u56fe\u50cf\u200b\u952e\u540d\u200b\n         transpose_ratio=0.5  # \u200b\u4ea4\u6362\u200b\u6bd4\u4f8b\u200b\n         ),\n    dict(type='PackInputs')  # \u200b\u4ece\u200b\u5f53\u524d\u200b\u5904\u7406\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u6536\u96c6\u200b\u6570\u636e\u200b\u7684\u200b\u914d\u7f6e\u200b\n]\n\ntest_pipeline = [  # \u200b\u6d4b\u8bd5\u200b\u6570\u636e\u5904\u7406\u200b\u6d41\u7a0b\u200b\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\n         key='img',  # \u200b\u5728\u200b\u7ed3\u679c\u200b\u4e2d\u200b\u67e5\u627e\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b\u952e\u540d\u200b\n         color_type='color',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u989c\u8272\u200b\u7c7b\u578b\u200b\n         channel_order='rgb',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u901a\u9053\u200b\u987a\u5e8f\u200b\n         imdecode_backend='cv2'),  # \u200b\u89e3\u7801\u200b\u540e\u200b\u7aef\u200b\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\n         key='gt',  # \u200b\u5728\u200b\u7ed3\u679c\u200b\u4e2d\u200b\u67e5\u627e\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b\u952e\u540d\u200b\n         color_type='color',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u989c\u8272\u200b\u7c7b\u578b\u200b\n         channel_order='rgb',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u901a\u9053\u200b\u987a\u5e8f\u200b\n         imdecode_backend='cv2'),  # \u200b\u89e3\u7801\u200b\u540e\u200b\u7aef\u200b\n    dict(type='PackInputs')  # \u200b\u4ece\u200b\u5f53\u524d\u200b\u5904\u7406\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u6536\u96c6\u200b\u6570\u636e\u200b\u7684\u200b\u914d\u7f6e\u200b\n]\n</code></pre>"},{"location":"user_guides/config/#_7","title":"\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668","text":"<pre><code>dataset_type = 'BasicImageDataset'  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u7c7b\u578b\u200b\ndata_root = 'data'  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\n\ntrain_dataloader = dict(\n    num_workers=4,  # \u200b\u6bcf\u4e2a\u200b GPU \u200b\u9884\u53d6\u200b\u6570\u636e\u200b\u7684\u200b\u5de5\u4f5c\u200b\u8fdb\u7a0b\u200b\u6570\u200b\n    persistent_workers=False,  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b\u5de5\u4f5c\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u5b9e\u4f8b\u200b\u5904\u4e8e\u200b\u6d3b\u52a8\u72b6\u6001\u200b\n    sampler=dict(type='InfiniteSampler', shuffle=True),  # \u200b\u6570\u636e\u200b\u91c7\u6837\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\n    dataset=dict(  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u96c6\u200b\u914d\u7f6e\u200b\n        type=dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u7c7b\u578b\u200b\n        ann_file='meta_info_DIV2K800sub_GT.txt',  # \u200b\u6ce8\u91ca\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\n        metainfo=dict(dataset_type='div2k', task_name='sisr'),\n        data_root=data_root + '/DIV2K',  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\n        data_prefix=dict(  # \u200b\u56fe\u50cf\u200b\u8def\u5f84\u200b\u7684\u200b\u524d\u7f00\u200b\n            img='DIV2K_train_LR_bicubic/X2_sub', gt='DIV2K_train_HR_sub'),\n        filename_tmpl=dict(img='{}', gt='{}'),  # \u200b\u6587\u4ef6\u540d\u200b\u6a21\u677f\u200b\n        pipeline=train_pipeline)\n)\n\nval_dataloader = dict(\n    num_workers=4,  # \u200b\u6bcf\u4e2a\u200b GPU \u200b\u9884\u53d6\u200b\u6570\u636e\u200b\u7684\u200b\u5de5\u4f5c\u200b\u8fdb\u7a0b\u200b\u6570\u200b\n    persistent_workers=False,  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b\u5de5\u4f5c\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u5b9e\u4f8b\u200b\u5904\u4e8e\u200b\u6d3b\u52a8\u72b6\u6001\u200b\n    drop_last=False,  # \u200b\u662f\u5426\u200b\u4e22\u5f03\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u4e0d\u200b\u5b8c\u6574\u200b\u7684\u200b\u6279\u6b21\u200b\n    sampler=dict(type='DefaultSampler', shuffle=False),  # \u200b\u6570\u636e\u200b\u91c7\u6837\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\n    dataset=dict(  # \u200b\u9a8c\u8bc1\u200b\u6570\u636e\u200b\u96c6\u200b\u914d\u7f6e\u200b\n        type=dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u7c7b\u578b\u200b\n        metainfo=dict(dataset_type='set5', task_name='sisr'),\n        data_root=data_root + '/Set5',  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\n        data_prefix=dict(img='LRbicx2', gt='GTmod12'),  # \u200b\u56fe\u50cf\u200b\u8def\u5f84\u200b\u7684\u200b\u524d\u7f00\u200b\n        pipeline=test_pipeline)\n)\n\ntest_dataloader = val_dataloader\n</code></pre>"},{"location":"user_guides/config/#_8","title":"\u8bc4\u4f30\u200b\u914d\u7f6e","text":"<p>\u200b\u8bc4\u4f30\u5668\u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u200b\u5728\u200b\u9a8c\u8bc1\u200b\u96c6\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u96c6\u4e0a\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u7684\u200b\u6307\u6807\u200b\u3002 \u200b\u8bc4\u4f30\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\u5305\u62ec\u200b\u4e00\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b\u6307\u6807\u200b\u914d\u7f6e\u200b\uff1a</p> <pre><code>val_evaluator = [\n    dict(type='MAE'),  # \u200b\u8981\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u540d\u79f0\u200b\n    dict(type='PSNR', crop_border=scale),  # \u200b\u8981\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u540d\u79f0\u200b\n    dict(type='SSIM', crop_border=scale),  # \u200b\u8981\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u540d\u79f0\u200b\n]\n\ntest_evaluator = val_evaluator  # \u200b\u6d4b\u8bd5\u200b\u8bc4\u4f30\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\u4e0e\u200b\u9a8c\u8bc1\u200b\u8bc4\u4f30\u5668\u200b\u76f8\u540c\u200b\n</code></pre>"},{"location":"user_guides/config/#_9","title":"\u8bad\u7ec3\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u914d\u7f6e","text":"<p>MMEngine\u200b\u7684\u200b\u8fd0\u884c\u200b\u5668\u200b\u4f7f\u7528\u200bLoop\u200b\u6765\u200b\u63a7\u5236\u200b\u8bad\u7ec3\u200b\u3001\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u8fc7\u7a0b\u200b\u3002 \u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u8fd9\u4e9b\u200b\u5b57\u200b\u6bb5\u200b\u8bbe\u7f6e\u200b\u6700\u5927\u200b\u8bad\u7ec3\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\u548c\u200b\u9a8c\u8bc1\u200b\u95f4\u9694\u200b\u3002</p> <pre><code>train_cfg = dict(\n    type='IterBasedTrainLoop',  # \u200b\u8bad\u7ec3\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\n    max_iters=300000,  # \u200b\u603b\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\n    val_interval=5000,  # \u200b\u9a8c\u8bc1\u200b\u95f4\u9694\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\n)\nval_cfg = dict(type='ValLoop')  # \u200b\u9a8c\u8bc1\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\ntest_cfg = dict(type='TestLoop')  # \u200b\u6d4b\u8bd5\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\n</code></pre>"},{"location":"user_guides/config/#_10","title":"\u4f18\u5316\u200b\u914d\u7f6e","text":"<p><code>optim_wrapper</code>\u200b\u662f\u200b\u7528\u4e8e\u200b\u914d\u7f6e\u200b\u4f18\u5316\u200b\u76f8\u5173\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u3002 \u200b\u4f18\u5316\u200b\u5668\u200b\u5305\u88c5\u200b\u5668\u200b\u4e0d\u4ec5\u200b\u63d0\u4f9b\u200b\u4f18\u5316\u200b\u5668\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u8fd8\u200b\u652f\u6301\u200b\u68af\u5ea6\u200b\u88c1\u526a\u200b\u3001\u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b\u7b49\u200b\u529f\u80fd\u200b\u3002\u200b\u5728\u200boptimizer wrapper\u200b\u6559\u7a0b\u200b \u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002</p> <pre><code>optim_wrapper = dict(\n    type='OptimWrapper',\n    optimizer=dict(type='Adam', lr=0.00001),\n)  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u4f18\u5316\u200b\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\uff0c\u200b\u652f\u6301\u200b\u6240\u6709\u200b\u4e0e\u200bPyTorch\u200b\u4e2d\u200b\u53c2\u6570\u200b\u76f8\u540c\u200b\u7684\u200b\u4f18\u5316\u200b\u5668\u200b\u3002\n</code></pre> <p><code>param_scheduler</code>\u200b\u662f\u200b\u4e00\u4e2a\u200b\u914d\u7f6e\u200b\u4f18\u5316\u200b\u8d85\u200b\u53c2\u6570\u200b\uff08\u200b\u5982\u200b\u5b66\u4e60\u200b\u7387\u200b\u548c\u200b\u52a8\u91cf\u200b\uff09\u200b\u8c03\u6574\u200b\u65b9\u6cd5\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u3002 \u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u7ed3\u5408\u200b\u591a\u4e2a\u200b\u8c03\u5ea6\u200b\u5668\u6765\u200b\u521b\u5efa\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u53c2\u6570\u200b\u8c03\u6574\u200b\u7b56\u7565\u200b\u3002 \u200b\u5728\u200bparameter scheduler\u200b\u6559\u7a0b\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002</p> <pre><code>param_scheduler = dict(  # \u200b\u5b66\u4e60\u7b56\u7565\u200b\u7684\u200b\u914d\u7f6e\u200b\n    type='MultiStepLR', by_epoch=False, milestones=[200000], gamma=0.5)\n</code></pre>"},{"location":"user_guides/config/#_11","title":"\u94a9\u5b50\u200b\u914d\u7f6e","text":"<p>\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u94a9\u5b50\u200b\uff08hooks\uff09\u200b\u9644\u52a0\u200b\u5230\u200b\u8bad\u7ec3\u200b\u3001\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u5faa\u73af\u200b\u4e2d\u200b\uff0c\u200b\u5728\u200b\u8fd0\u884c\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u63d2\u5165\u200b\u4e00\u4e9b\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6709\u200b\u4e24\u4e2a\u200b\u4e0d\u540c\u200b\u7684\u200b\u94a9\u5b50\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b<code>default_hooks</code> \uff0c\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u662f\u200b<code>custom_hooks</code>\u3002</p> <p><code>default_hooks</code>\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u94a9\u5b50\u200b\u914d\u7f6e\u200b\u7684\u200b\u5b57\u5178\u200b\u3002<code>default_hooks</code> \u200b\u662f\u200b\u8fd0\u884c\u200b\u65f6\u200b\u5fc5\u9700\u200b\u7684\u200b\u94a9\u5b50\u200b\uff0c\u200b\u5b83\u4eec\u200b\u5177\u6709\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u4f18\u5148\u7ea7\u200b\uff0c\u200b\u4e0d\u200b\u5e94\u200b\u4fee\u6539\u200b\u3002\u200b\u5982\u679c\u200b\u672a\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u9ed8\u8ba4\u503c\u200b\u5c06\u200b\u88ab\u200b\u4f7f\u7528\u200b\u3002\u200b\u8981\u200b\u7981\u7528\u200b\u9ed8\u8ba4\u200b\u94a9\u5b50\u200b\uff0c\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5176\u200b\u914d\u7f6e\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b<code>None</code>\u3002</p> <pre><code>default_hooks = dict(  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u9ed8\u8ba4\u200b\u94a9\u5b50\u200b\u7684\u200b\u914d\u7f6e\u200b\n    checkpoint=dict(  # \u200b\u914d\u7f6e\u200b\u68c0\u67e5\u70b9\u200b\u94a9\u5b50\u200b\n        type='CheckpointHook',\n        interval=5000,  # \u200b\u4fdd\u5b58\u200b\u95f4\u9694\u200b\u4e3a\u200b5000\u200b\u6b21\u200b\u8fed\u4ee3\u200b\n        save_optimizer=True,\n        by_epoch=False,  # \u200b\u4ee5\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\u8ba1\u6570\u200b\n        out_dir=save_dir,\n    ),\n    timer=dict(type='IterTimerHook'),\n    logger=dict(type='LoggerHook', interval=100),  # \u200b\u914d\u7f6e\u200b\u6ce8\u518c\u200b\u65e5\u5fd7\u200b\u94a9\u5b50\u200b\n    param_scheduler=dict(type='ParamSchedulerHook'),\n    sampler_seed=dict(type='DistSamplerSeedHook'),\n)\n</code></pre> <p><code>custom_hooks</code>\u200b\u662f\u200b\u4e00\u4e2a\u200b\u94a9\u5b50\u200b\u914d\u7f6e\u200b\u7684\u200b\u5217\u8868\u200b\u3002\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5f00\u53d1\u200b\u81ea\u5df1\u200b\u7684\u200b\u94a9\u5b50\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u63d2\u5165\u200b\u5230\u200b\u8be5\u200b\u5b57\u200b\u6bb5\u200b\u4e2d\u200b\u3002</p> <pre><code>custom_hooks = [dict(type='BasicVisualizationHook', interval=1)]  # \u200b\u53ef\u89c6\u5316\u200b\u94a9\u5b50\u200b\u7684\u200b\u914d\u7f6e\u200b\n</code></pre>"},{"location":"user_guides/config/#_12","title":"\u8fd0\u884c\u200b\u65f6\u200b\u914d\u7f6e","text":"<pre><code>default_scope = 'mmagic'  # \u200b\u7528\u4e8e\u200b\u8bbe\u7f6e\u200b\u6ce8\u518c\u8868\u200b\u4f4d\u7f6e\u200b\nenv_cfg = dict(  # \u200b\u8bbe\u7f6e\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u7aef\u53e3\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b\n    cudnn_benchmark=False,\n    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=4),\n    dist_cfg=dict(backend='nccl'),\n)\nlog_level = 'INFO'  # \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u200b\u7684\u200b\u7ea7\u522b\u200b\nlog_processor = dict(type='LogProcessor', window_size=100, by_epoch=False)  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u65e5\u5fd7\u200b\u5904\u7406\u5668\u200b\nload_from = None  # \u200b\u4ece\u200b\u7ed9\u5b9a\u200b\u8def\u5f84\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u4f5c\u4e3a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u3002\u200b\u8fd9\u200b\u4e0d\u4f1a\u200b\u6062\u590d\u200b\u8bad\u7ec3\u200b\u3002\nresume = False  # \u200b\u4ece\u200b\u7ed9\u5b9a\u200b\u8def\u5f84\u200b\u6062\u590d\u200b\u68c0\u67e5\u70b9\u200b\uff0c\u200b\u8bad\u7ec3\u200b\u5c06\u200b\u4ece\u200b\u68c0\u67e5\u70b9\u200b\u4fdd\u5b58\u200b\u7684\u200b\u65f6\u671f\u200b\u7ee7\u7eed\u200b\u3002\n</code></pre>"},{"location":"user_guides/config/#stylegan2","title":"StyleGAN2\u200b\u7684\u200b\u793a\u4f8b","text":"<p>\u200b\u4ee5\u200bStylegan2 \u200b\u5728\u200b 1024x1024 \u200b\u5206\u8fa8\u7387\u200b\u4e0a\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b \u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u6211\u4eec\u200b\u6839\u636e\u200b\u4e0d\u540c\u200b\u7684\u200b\u529f\u80fd\u6a21\u5757\u200b\u4ecb\u7ecd\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u7684\u200b\u5404\u4e2a\u200b\u5b57\u200b\u6bb5\u200b\u3002</p>"},{"location":"user_guides/config/#_13","title":"\u6a21\u578b\u200b\u914d\u7f6e","text":"<p>\u200b\u9664\u4e86\u200b\u5305\u62ec\u200b\u751f\u6210\u5668\u200b\u3001\u200b\u9274\u522b\u5668\u200b\u7b49\u200b\u795e\u7ecf\u7f51\u7edc\u200b\u7ec4\u4ef6\u200b\u4e4b\u5916\u200b\uff0c\u200b\u8fd8\u200b\u9700\u8981\u200b<code>data_preprocessor</code>\u3001<code>loss_config</code>\u200b\u7b49\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u5176\u4e2d\u200b\u4e00\u4e9b\u200b\u8fd8\u200b\u5305\u542b\u200b<code>ema_config</code>\u3002</p> <p><code>data_preprocessor</code>\u200b\u8d1f\u8d23\u200b\u5904\u7406\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u8f93\u51fa\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6279\u6b21\u200b\u6570\u636e\u200b\u3002</p> <p><code>loss_config</code>\u200b\u8d1f\u8d23\u200b\u8bbe\u7f6e\u200b\u635f\u5931\u200b\u9879\u200b\u7684\u200b\u6743\u91cd\u200b\u3002</p> <p><code>ema_config</code>\u200b\u8d1f\u8d23\u200b\u4e3a\u200b\u751f\u6210\u5668\u200b\u6267\u884c\u200b\u6307\u6570\u200b\u79fb\u52a8\u200b\u5e73\u5747\u200b\uff08EMA\uff09\u200b\u64cd\u4f5c\u200b\u3002</p> <pre><code>model = dict(\n    type='StyleGAN2',  # \u200b\u6a21\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\n    data_preprocessor=dict(type='DataPreprocessor'),  # \u200b\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\uff0c\u200b\u901a\u5e38\u200b\u5305\u62ec\u200b\u56fe\u50cf\u200b\u5f52\u4e00\u5316\u200b\u548c\u200b\u586b\u5145\u200b\n    generator=dict(  # \u200b\u751f\u6210\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type='StyleGANv2Generator',  # \u200b\u751f\u6210\u5668\u200b\u7684\u200b\u540d\u79f0\u200b\n        out_size=1024,  # \u200b\u751f\u6210\u5668\u200b\u7684\u200b\u8f93\u51fa\u200b\u5206\u8fa8\u7387\u200b\n        style_channels=512),  # \u200b\u751f\u6210\u5668\u200b\u7684\u200b\u98ce\u683c\u200b\u901a\u9053\u200b\u6570\u200b\n    discriminator=dict(  # \u200b\u9274\u522b\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type='StyleGAN2Discriminator',  # \u200b\u9274\u522b\u5668\u200b\u7684\u200b\u540d\u79f0\u200b\n        in_size=1024),  # \u200b\u9274\u522b\u5668\u200b\u7684\u200b\u8f93\u5165\u200b\u5206\u8fa8\u7387\u200b\n    ema_config=dict(  # EMA\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type='ExponentialMovingAverage',  # \u200b\u5e73\u5747\u200b\u6a21\u578b\u200b\u7684\u200b\u5177\u4f53\u200b\u7c7b\u578b\u200b\n        interval=1,  # EMA\u200b\u64cd\u4f5c\u200b\u7684\u200b\u95f4\u9694\u200b\n        momentum=0.9977843871238888),  # EMA\u200b\u64cd\u4f5c\u200b\u7684\u200b\u52a8\u91cf\u200b\n    loss_config=dict(  # \u200b\u635f\u5931\u200b\u9879\u200b\u7684\u200b\u914d\u7f6e\u200b\n        r1_loss_weight=80.0,  # r1\u200b\u68af\u5ea6\u200b\u60e9\u7f5a\u200b\u7684\u200b\u6743\u91cd\u200b\n        r1_interval=16,  # r1\u200b\u68af\u5ea6\u200b\u60e9\u7f5a\u200b\u7684\u200b\u95f4\u9694\u200b\n        norm_mode='HWC',  # r1\u200b\u68af\u5ea6\u200b\u60e9\u7f5a\u200b\u7684\u200b\u5f52\u4e00\u5316\u200b\u6a21\u5f0f\u200b\n        g_reg_interval=4,  # \u200b\u751f\u6210\u5668\u200b\u7684\u200b\u6b63\u5219\u200b\u5316\u200b\u95f4\u9694\u200b\n        g_reg_weight=8.0,  # \u200b\u751f\u6210\u5668\u200b\u7684\u200b\u6b63\u5219\u200b\u5316\u200b\u6743\u91cd\u200b\n        pl_batch_shrink=2))  # \u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\u6b63\u5219\u200b\u5316\u4e2d\u200b\u7f29\u51cf\u200b\u6279\u6b21\u200b\u5927\u5c0f\u200b\u7684\u200b\u56e0\u5b50\u200b\n</code></pre>"},{"location":"user_guides/config/#_14","title":"\u6570\u636e\u200b\u96c6\u200b\u548c\u200b\u8bc4\u4f30\u5668\u200b\u914d\u7f6e","text":"<p>\u200b\u8bad\u7ec3\u200b\u3001\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u6d4b\u8bd5\u200brunner \u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200bDataloaders\u3002 \u200b\u9700\u8981\u200b\u8bbe\u7f6e\u200b\u6570\u636e\u200b\u96c6\u200b\u548c\u200b\u6570\u636e\u5904\u7406\u200b\u6d41\u7a0b\u200b\u6765\u200b\u6784\u5efa\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u3002\u200b\u7531\u4e8e\u200b\u8fd9\u90e8\u5206\u200b\u7684\u200b\u590d\u6742\u6027\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4e2d\u95f4\u200b\u53d8\u91cf\u200b\u6765\u200b\u7b80\u5316\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u914d\u7f6e\u200b\u7684\u200b\u7f16\u5199\u200b\u3002</p> <pre><code>dataset_type = 'BasicImageDataset'  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5c06\u200b\u7528\u4e8e\u200b\u5b9a\u4e49\u6570\u636e\u200b\u96c6\u200b\ndata_root = './data/ffhq/'  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u76ee\u5f55\u200b\n\ntrain_pipeline = [  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u5904\u7406\u200b\u6d41\u7a0b\u200b\n    dict(type='LoadImageFromFile', key='img'),  # \u200b\u7b2c\u4e00\u4e2a\u200b\u5904\u7406\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u4ece\u6587\u4ef6\u200b\u8def\u5f84\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\n    dict(type='Flip', keys=['img'], direction='horizontal'),  # \u200b\u56fe\u50cf\u200b\u7ffb\u8f6c\u200b\u7684\u200b\u6570\u636e\u200b\u589e\u5f3a\u200b\u5904\u7406\u200b\u6d41\u7a0b\u200b\n    dict(type='PackInputs', keys=['img'])  # \u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5904\u7406\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u683c\u5f0f\u5316\u200b\u6ce8\u91ca\u200b\u6570\u636e\u200b\uff08\u200b\u5982\u679c\u200b\u6709\u200b\uff09\u200b\u5e76\u200b\u51b3\u5b9a\u200b\u54ea\u4e9b\u200b\u952e\u200b\u5e94\u8be5\u200b\u6253\u5305\u200b\u5230\u200bdata_samples\u200b\u4e2d\u200b\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile', key='img'),  # \u200b\u7b2c\u4e00\u4e2a\u200b\u5904\u7406\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u4ece\u6587\u4ef6\u200b\u8def\u5f84\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\n    dict(type='PackInputs', keys=['img'])  # \u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5904\u7406\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u683c\u5f0f\u5316\u200b\u6ce8\u91ca\u200b\u6570\u636e\u200b\uff08\u200b\u5982\u679c\u200b\u6709\u200b\uff09\u200b\u5e76\u200b\u51b3\u5b9a\u200b\u54ea\u4e9b\u200b\u952e\u200b\u5e94\u8be5\u200b\u6253\u5305\u200b\u5230\u200bdata_samples\u200b\u4e2d\u200b\n]\ntrain_dataloader = dict(  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n    batch_size=4,  # \u200b\u5355\u4e2a\u200bGPU\u200b\u7684\u200b\u6279\u6b21\u200b\u5927\u5c0f\u200b\n    num_workers=8,  # \u200b\u6bcf\u4e2a\u200b\u5355\u4e2a\u200bGPU\u200b\u7684\u200b\u6570\u636e\u200b\u9884\u53d6\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u6570\u200b\n    persistent_workers=True,  # \u200b\u5982\u679c\u200b\u4e3a\u200bTrue\uff0c\u200b\u5219\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u5c06\u200b\u5728\u200b\u4e00\u4e2a\u200bepoch\u200b\u7ed3\u675f\u200b\u540e\u200b\u4e0d\u4f1a\u200b\u5173\u95ed\u200b\u5de5\u4f5c\u200b\u8fdb\u7a0b\u200b\uff0c\u200b\u8fd9\u200b\u53ef\u4ee5\u200b\u52a0\u901f\u200b\u8bad\u7ec3\u200b\u901f\u5ea6\u200b\u3002\n    sampler=dict(  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u91c7\u6837\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type='InfiniteSampler',\n        # \u200b\u7528\u4e8e\u200b\u8fed\u4ee3\u200b\u8bad\u7ec3\u200b\u7684\u200bInfiniteSampler\u3002\u200b\u53c2\u8003\u200b https://github.com/open-mmlab/mmengine/blob/fe0eb0a5bbc8bf816d5649bfdd34908c258eb245/mmengine/dataset/sampler.py#L107\n        shuffle=True),  # \u200b\u662f\u5426\u200b\u968f\u673a\u200b\u6253\u4e71\u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\n    dataset=dict(  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type=dataset_type,\n        data_root=data_root,\n        pipeline=train_pipeline))\nval_dataloader = dict(  # \u200b\u9a8c\u8bc1\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n    batch_size=4,  # \u200b\u5355\u4e2a\u200bGPU\u200b\u7684\u200b\u6279\u6b21\u200b\u5927\u5c0f\u200b\n    num_workers=8,  # \u200b\u6bcf\u4e2a\u200b\u5355\u4e2a\u200bGPU\u200b\u7684\u200b\u6570\u636e\u200b\u9884\u53d6\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u6570\u200b\n    dataset=dict(  # \u200b\u9a8c\u8bc1\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type=dataset_type,\n        data_root=data_root,\n        pipeline=val_pipeline),\n    sampler=dict(  # \u200b\u9a8c\u8bc1\u200b\u6570\u636e\u200b\u91c7\u6837\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type='DefaultSampler',\n        # \u200b\u652f\u6301\u200b\u5206\u5e03\u5f0f\u200b\u548c\u200b\u975e\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u7684\u200bDefaultSampler\u3002\u200b\u53c2\u8003\u200b https://github.com/open-mmlab/mmengine/blob/fe0eb0a5bbc8bf816d5649bfdd34908c258eb245/mmengine/dataset/sampler.py#L14\n        shuffle=False),  # \u200b\u662f\u5426\u200b\u968f\u673a\u200b\u6253\u4e71\u200b\u9a8c\u8bc1\u200b\u6570\u636e\u200b\n    persistent_workers=True)\ntest_dataloader = val_dataloader  # \u200b\u6d4b\u8bd5\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\u4e0e\u200b\u9a8c\u8bc1\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5668\u200b\u76f8\u540c\u200b\n</code></pre> <p>\u200b\u8bc4\u4f30\u5668\u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u200b\u5728\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u6d4b\u8bd5\u6570\u636e\u200b\u96c6\u4e0a\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u7684\u200b\u6307\u6807\u200b\u3002 \u200b\u8bc4\u4f30\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\u7531\u200b\u4e00\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b\u6307\u6807\u200b\u914d\u7f6e\u200b\u7ec4\u6210\u200b\uff1a</p> <pre><code>val_evaluator = dict(  # \u200b\u9a8c\u8bc1\u200b\u8bc4\u4f30\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n    type='Evaluator',  # \u200b\u8bc4\u4f30\u200b\u7c7b\u578b\u200b\n    metrics=[  # \u200b\u6307\u6807\u200b\u7684\u200b\u914d\u7f6e\u200b\n        dict(\n            type='FrechetInceptionDistance',\n            prefix='FID-Full-50k',\n            fake_nums=50000,\n            inception_style='StyleGAN',\n            sample_model='ema'),\n        dict(type='PrecisionAndRecall', fake_nums=50000, prefix='PR-50K'),\n        dict(type='PerceptualPathLength', fake_nums=50000, prefix='ppl-w')\n    ])\ntest_evaluator = val_evaluator  # \u200b\u6d4b\u8bd5\u200b\u8bc4\u4f30\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\u4e0e\u200b\u9a8c\u8bc1\u200b\u8bc4\u4f30\u5668\u200b\u76f8\u540c\u200b\n</code></pre>"},{"location":"user_guides/config/#_15","title":"\u8bad\u7ec3\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u914d\u7f6e","text":"<p>MMEngine\u200b\u7684\u200brunner\u200b\u4f7f\u7528\u200bLoop\u200b\u6765\u200b\u63a7\u5236\u200b\u8bad\u7ec3\u200b\u3001\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u8fc7\u7a0b\u200b\u3002 \u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u5b57\u200b\u6bb5\u200b\u8bbe\u7f6e\u200b\u6700\u5927\u200b\u8bad\u7ec3\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\u548c\u200b\u9a8c\u8bc1\u200b\u95f4\u9694\u200b\uff1a</p> <pre><code>train_cfg = dict(  # \u200b\u8bad\u7ec3\u200b\u914d\u7f6e\u200b\n    by_epoch=False,  # \u200b\u8bbe\u7f6e\u200b`by_epoch`\u200b\u4e3a\u200bFalse\u200b\u4ee5\u200b\u4f7f\u7528\u200b\u57fa\u4e8e\u200b\u8fed\u4ee3\u200b\u7684\u200b\u8bad\u7ec3\u200b\n    val_begin=1,  # \u200b\u5f00\u59cb\u200b\u9a8c\u8bc1\u200b\u7684\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\n    val_interval=10000,  # \u200b\u9a8c\u8bc1\u200b\u95f4\u9694\u200b\n    max_iters=800002)  # \u200b\u6700\u5927\u200b\u8bad\u7ec3\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\nval_cfg = dict(type='MultiValLoop')  # \u200b\u9a8c\u8bc1\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\ntest_cfg = dict(type='MultiTestLoop')  # \u200b\u6d4b\u8bd5\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\n</code></pre>"},{"location":"user_guides/config/#_16","title":"\u4f18\u5316\u200b\u914d\u7f6e","text":"<p><code>optim_wrapper</code>\u200b\u662f\u200b\u914d\u7f6e\u200b\u4f18\u5316\u200b\u76f8\u5173\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u3002 \u200b\u4f18\u5316\u200b\u5668\u200b\u5305\u88c5\u200b\u5668\u200b\u4e0d\u4ec5\u200b\u63d0\u4f9b\u200b\u4f18\u5316\u200b\u5668\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u8fd8\u200b\u652f\u6301\u200b\u68af\u5ea6\u200b\u88c1\u526a\u200b\u3001\u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b\u7b49\u200b\u529f\u80fd\u200b\u3002\u200b\u5728\u200boptimizer wrapper tutorial \u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002</p> <pre><code>optim_wrapper = dict(\n    constructor='MultiOptimWrapperConstructor',\n    generator=dict(\n        optimizer=dict(type='Adam', lr=0.0016, betas=(0, 0.9919919678228657))),\n    discriminator=dict(\n        optimizer=dict(\n            type='Adam',\n            lr=0.0018823529411764706,\n            betas=(0, 0.9905854573074332))))\n</code></pre> <p><code>param_scheduler</code>\u200b\u662f\u200b\u4e00\u4e2a\u200b\u914d\u7f6e\u200b\u4f18\u5316\u200b\u8d85\u200b\u53c2\u6570\u200b\uff08\u200b\u5982\u200b\u5b66\u4e60\u200b\u7387\u200b\u548c\u200b\u52a8\u91cf\u200b\uff09\u200b\u8c03\u6574\u200b\u65b9\u6cd5\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u3002 \u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u7ec4\u5408\u200b\u591a\u4e2a\u200b\u8c03\u5ea6\u200b\u5668\u6765\u200b\u521b\u5efa\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u53c2\u6570\u200b\u8c03\u6574\u200b\u7b56\u7565\u200b\u3002 \u200b\u5728\u200bparameter scheduler tutorial\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002 \u200b\u7531\u4e8e\u200bStyleGAN2\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u53c2\u6570\u200b\u8c03\u5ea6\u200b\u5668\u200b\uff0c\u200b\u6211\u4eec\u200b\u4ee5\u200bCycleGAN \u200b\u7684\u200b\u914d\u7f6e\u200b\u4f5c\u4e3a\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code># CycleGAN\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u7684\u200b\u53c2\u6570\u200b\u8c03\u5ea6\u200b\u5668\u200b\nparam_scheduler = dict(\n    type='LinearLrInterval',  # \u200b\u8c03\u5ea6\u200b\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\n    interval=400,  # \u200b\u66f4\u65b0\u200b\u5b66\u4e60\u200b\u7387\u200b\u7684\u200b\u95f4\u9694\u200b\n    by_epoch=False,  # \u200b\u8c03\u5ea6\u200b\u5668\u200b\u6309\u200b\u8fed\u4ee3\u200b\u8c03\u7528\u200b\n    start_factor=0.0002,  # \u200b\u5728\u200b\u7b2c\u4e00\u6b21\u200b\u8fed\u4ee3\u200b\u4e2d\u200b\u4e58\u4ee5\u200b\u53c2\u6570\u503c\u200b\u7684\u200b\u6570\u503c\u200b\n    end_factor=0,  # \u200b\u5728\u200b\u7ebf\u6027\u200b\u53d8\u5316\u200b\u8fc7\u7a0b\u200b\u7ed3\u675f\u200b\u65f6\u200b\u4e58\u4ee5\u200b\u53c2\u6570\u503c\u200b\u7684\u200b\u6570\u503c\u200b\n    begin=40000,  # \u200b\u8c03\u5ea6\u200b\u5668\u200b\u7684\u200b\u8d77\u59cb\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\n    end=80000)  # \u200b\u8c03\u5ea6\u200b\u5668\u200b\u7684\u200b\u7ed3\u675f\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\n</code></pre>"},{"location":"user_guides/config/#_17","title":"\u94a9\u5b50\u200b\u914d\u7f6e","text":"<p>\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8bad\u7ec3\u200b\u3001\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u5faa\u73af\u200b\u4e2d\u200b\u9644\u52a0\u200b\u94a9\u5b50\u200b\uff0c\u200b\u4ee5\u200b\u5728\u200b\u8fd0\u884c\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u63d2\u5165\u200b\u4e00\u4e9b\u200b\u64cd\u4f5c\u200b\u3002\u200b\u8fd9\u91cc\u200b\u6709\u200b\u4e24\u4e2a\u200b\u4e0d\u540c\u200b\u7684\u200b\u94a9\u5b50\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b<code>default_hooks</code> \uff0c\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u662f\u200b<code>custom_hooks</code>\u3002</p> <p><code>default_hooks</code>\u200b\u662f\u200b\u4e00\u4e2a\u200b\u94a9\u5b50\u200b\u914d\u7f6e\u200b\u7684\u200b\u5b57\u5178\u200b\u3002<code>default_hooks</code> \u200b\u662f\u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\u5fc5\u987b\u200b\u7684\u200b\u94a9\u5b50\u200b\u3002\u200b\u5b83\u4eec\u200b\u5177\u6709\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u4f18\u5148\u7ea7\u200b\uff0c\u200b\u4e0d\u200b\u5e94\u8be5\u200b\u88ab\u200b\u4fee\u6539\u200b\u3002\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u8fd0\u884c\u200b\u5668\u200b\u5c06\u200b\u4f7f\u7528\u200b\u9ed8\u8ba4\u503c\u200b\u3002\u200b\u8981\u200b\u7981\u7528\u200b\u4e00\u4e2a\u200b\u9ed8\u8ba4\u200b\u94a9\u5b50\u200b\uff0c\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5176\u200b\u914d\u7f6e\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b<code>None</code>\u3002</p> <pre><code>default_hooks = dict(\n    timer=dict(type='IterTimerHook'),\n    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),\n    checkpoint=dict(\n        type='CheckpointHook',\n        interval=10000,\n        by_epoch=False,\n        less_keys=['FID-Full-50k/fid'],\n        greater_keys=['IS-50k/is'],\n        save_optimizer=True,\n        save_best='FID-Full-50k/fid'))\n</code></pre> <p><code>custom_hooks</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u94a9\u5b50\u200b\u914d\u7f6e\u200b\u7684\u200b\u5217\u8868\u200b\u3002\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5f00\u53d1\u200b\u81ea\u5df1\u200b\u7684\u200b\u94a9\u5b50\u200b\u5e76\u200b\u5c06\u200b\u5b83\u4eec\u200b\u63d2\u5165\u200b\u5230\u200b\u8fd9\u4e2a\u200b\u5b57\u6bb5\u200b\u4e2d\u200b\u3002</p> <pre><code>custom_hooks = [\n    dict(\n        type='VisualizationHook',\n        interval=5000,\n        fixed_input=True,\n        vis_kwargs_list=dict(type='GAN', name='fake_img'))\n]\n</code></pre>"},{"location":"user_guides/config/#_18","title":"\u8fd0\u884c\u200b\u65f6\u200b\u914d\u7f6e","text":"<pre><code>default_scope = 'mmagic'  # \u200b\u9ed8\u8ba4\u200b\u7684\u200b\u6ce8\u518c\u8868\u200b\u4f5c\u7528\u57df\u200b\uff0c\u200b\u7528\u4e8e\u200b\u67e5\u627e\u200b\u6a21\u5757\u200b\u3002\u200b\u53c2\u8003\u200b https://mmengine.readthedocs.io/en/latest/advanced_tutorials/registry.html\n\n# \u200b\u73af\u5883\u200b\u914d\u7f6e\u200b\nenv_cfg = dict(\n    cudnn_benchmark=True,  # \u200b\u662f\u5426\u200b\u542f\u7528\u200bcudnn\u200b\u57fa\u51c6\u200b\u6d4b\u8bd5\u200b\n    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),  # \u200b\u8bbe\u7f6e\u200b\u591a\u200b\u8fdb\u7a0b\u200b\u53c2\u6570\u200b\n    dist_cfg=dict(backend='nccl')  # \u200b\u8bbe\u7f6e\u200b\u5206\u5e03\u5f0f\u200b\u53c2\u6570\u200b\n)\n\nlog_level = 'INFO'  # \u200b\u65e5\u5fd7\u200b\u7ea7\u522b\u200b\nlog_processor = dict(\n    type='LogProcessor',  # \u200b\u65e5\u5fd7\u200b\u5904\u7406\u5668\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5904\u7406\u200b\u8fd0\u884c\u200b\u65f6\u200b\u65e5\u5fd7\u200b\n    by_epoch=False)  # \u200b\u6309\u200b\u8fed\u4ee3\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\nload_from = None  # \u200b\u4ece\u200b\u7ed9\u5b9a\u200b\u8def\u5f84\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u68c0\u67e5\u70b9\u200b\u4f5c\u4e3a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\nresume = False  # \u200b\u662f\u5426\u200b\u4ece\u200b`load_from`\u200b\u5b9a\u4e49\u200b\u7684\u200b\u68c0\u67e5\u70b9\u200b\u6062\u590d\u200b\u8bad\u7ec3\u200b\u3002\u200b\u5982\u679c\u200b`load_from`\u200b\u4e3a\u200b`None`\uff0c\u200b\u5c06\u200b\u6062\u590d\u200b`work_dir`\u200b\u4e2d\u200b\u7684\u200b\u6700\u65b0\u200b\u68c0\u67e5\u70b9\u200b\n</code></pre>"},{"location":"user_guides/config/#_19","title":"\u5176\u4ed6\u200b\u793a\u4f8b","text":""},{"location":"user_guides/config/#_20","title":"\u4fee\u590d\u200b\u4efb\u52a1\u200b\u7684\u200b\u914d\u7f6e\u200b\u793a\u4f8b","text":"<p>\u200b\u4e3a\u4e86\u200b\u5e2e\u52a9\u200b\u7528\u6237\u200b\u5bf9\u200b\u4fee\u590d\u200b\u7cfb\u7edf\u200b\u7684\u200b\u5b8c\u6574\u200b\u914d\u7f6e\u200b\u548c\u200b\u6a21\u5757\u200b\u6709\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u200b\u7684\u200b\u4e86\u89e3\u200b\uff0c\u200b\u6211\u4eec\u200b\u5bf9\u200b\u5168\u5c40\u200b\u548c\u200b\u5c40\u90e8\u200b\u4fee\u590d\u200b\u7684\u200b\u914d\u7f6e\u200b\u8fdb\u884c\u200b\u7b80\u8981\u200b\u6ce8\u91ca\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u3002\u200b\u6709\u5173\u200b\u66f4\u200b\u8be6\u7ec6\u200b\u7684\u200b\u7528\u6cd5\u200b\u548c\u200b\u6bcf\u4e2a\u200b\u6a21\u5757\u200b\u7684\u200b\u66ff\u4ee3\u200b\u9009\u9879\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u8003\u200bAPI\u200b\u6587\u6863\u200b\u3002</p> <pre><code>model = dict(\n    type='GLInpaintor',  # \u200b\u4fee\u590d\u200b\u6a21\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\n    data_preprocessor=dict(\n        type='DataPreprocessor',  # \u200b\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\u7684\u200b\u540d\u79f0\u200b\n        mean=[127.5],  # \u200b\u6570\u636e\u200b\u5f52\u4e00\u5316\u200b\u65f6\u200b\u4f7f\u7528\u200b\u7684\u200b\u5747\u503c\u200b\n        std=[127.5],  # \u200b\u6570\u636e\u200b\u5f52\u4e00\u5316\u200b\u65f6\u200b\u4f7f\u7528\u200b\u7684\u200b\u6807\u51c6\u5dee\u200b\n    ),\n    encdec=dict(\n        type='GLEncoderDecoder',  # \u200b\u7f16\u7801\u5668\u200b-\u200b\u89e3\u7801\u5668\u200b\u7684\u200b\u540d\u79f0\u200b\n        encoder=dict(type='GLEncoder', norm_cfg=dict(type='SyncBN')),  # \u200b\u7f16\u7801\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n        decoder=dict(type='GLDecoder', norm_cfg=dict(type='SyncBN')),  # \u200b\u89e3\u7801\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n        dilation_neck=dict(\n            type='GLDilationNeck', norm_cfg=dict(type='SyncBN'))),  # \u200b\u81a8\u80c0\u200b\u6a21\u5757\u200b\u7684\u200b\u914d\u7f6e\u200b\n    disc=dict(\n        type='GLDiscs',  # \u200b\u5224\u522b\u200b\u5668\u200b\u7684\u200b\u540d\u79f0\u200b\n        global_disc_cfg=dict(\n            in_channels=3,  # \u200b\u5224\u522b\u200b\u5668\u200b\u7684\u200b\u8f93\u5165\u200b\u901a\u9053\u200b\u6570\u200b\n            max_channels=512,  # \u200b\u5224\u522b\u200b\u5668\u200b\u4e2d\u95f4\u200b\u901a\u9053\u200b\u7684\u200b\u6700\u5927\u200b\u6570\u91cf\u200b\n            fc_in_channels=512 * 4 * 4,  # \u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5168\u200b\u8fde\u63a5\u200b\u5c42\u200b\u7684\u200b\u8f93\u5165\u200b\u901a\u9053\u200b\u6570\u200b\n            fc_out_channels=1024,  # \u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5168\u200b\u8fde\u63a5\u200b\u5c42\u200b\u7684\u200b\u8f93\u51fa\u200b\u901a\u9053\u200b\u6570\u200b\n            num_convs=6,  # \u200b\u5224\u522b\u200b\u5668\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u5377\u79ef\u200b\u5c42\u200b\u6570\u91cf\u200b\n            norm_cfg=dict(type='SyncBN')  # \u200b\u5f52\u4e00\u5316\u200b\u5c42\u200b\u7684\u200b\u914d\u7f6e\u200b\n        ),\n        local_disc_cfg=dict(\n            in_channels=3,  # \u200b\u5224\u522b\u200b\u5668\u200b\u7684\u200b\u8f93\u5165\u200b\u901a\u9053\u200b\u6570\u200b\n            max_channels=512,  # \u200b\u5224\u522b\u200b\u5668\u200b\u4e2d\u95f4\u200b\u901a\u9053\u200b\u7684\u200b\u6700\u5927\u200b\u6570\u91cf\u200b\n            fc_in_channels=512 * 4 * 4,  # \u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5168\u200b\u8fde\u63a5\u200b\u5c42\u200b\u7684\u200b\u8f93\u5165\u200b\u901a\u9053\u200b\u6570\u200b\n            fc_out_channels=1024,  # \u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5168\u200b\u8fde\u63a5\u200b\u5c42\u200b\u7684\u200b\u8f93\u51fa\u200b\u901a\u9053\u200b\u6570\u200b\n            num_convs=5,  # \u200b\u5224\u522b\u200b\u5668\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u5377\u79ef\u200b\u5c42\u200b\u6570\u91cf\u200b\n            norm_cfg=dict(type='SyncBN')  # \u200b\u5f52\u4e00\u5316\u200b\u5c42\u200b\u7684\u200b\u914d\u7f6e\u200b\n        ),\n    ),\n    loss_gan=dict(\n        type='GANLoss',  # GAN\u200b\u635f\u5931\u200b\u7684\u200b\u540d\u79f0\u200b\n        gan_type='vanilla',  # GAN\u200b\u635f\u5931\u200b\u7684\u200b\u7c7b\u578b\u200b\n        loss_weight=0.001  # GAN\u200b\u635f\u5931\u200b\u7684\u200b\u6743\u91cd\u200b\n    ),\n    loss_l1_hole=dict(\n        type='L1Loss',  # L1\u200b\u635f\u5931\u200b\u7684\u200b\u7c7b\u578b\u200b\n        loss_weight=1.0  # L1\u200b\u635f\u5931\u200b\u7684\u200b\u6743\u91cd\u200b\n    )\n)\n\ntrain_cfg = dict(\n    type='IterBasedTrainLoop',  # \u200b\u8bad\u7ec3\u200b\u5faa\u73af\u200b\u7684\u200b\u7c7b\u578b\u200b\n    max_iters=500002,  # \u200b\u603b\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\n    val_interval=50000  # \u200b\u9a8c\u8bc1\u200b\u95f4\u9694\u200b\u7684\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\n)\nval_cfg = dict(type='ValLoop')  # \u200b\u9a8c\u8bc1\u200b\u5faa\u73af\u200b\u7684\u200b\u7c7b\u578b\u200b\ntest_cfg = dict(type='TestLoop')  # \u200b\u6d4b\u8bd5\u200b\u5faa\u73af\u200b\u7684\u200b\u7c7b\u578b\u200b\n\nval_evaluator = [\n    dict(type='MAE', mask_key='mask', scaling=100),  # \u200b\u7528\u4e8e\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u540d\u79f0\u200b\n    dict(type='PSNR'),  # \u200b\u7528\u4e8e\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u540d\u79f0\u200b\n    dict(type='SSIM'),  # \u200b\u7528\u4e8e\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u540d\u79f0\u200b\n]\ntest_evaluator = val_evaluator\n\ninput_shape = (256, 256)  # \u200b\u8f93\u5165\u200b\u56fe\u50cf\u200b\u7684\u200b\u5f62\u72b6\u200b\n\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', key='gt'),  # \u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\u7684\u200b\u914d\u7f6e\u200b\n    dict(\n        type='LoadMask',  # \u200b\u52a0\u8f7d\u200b\u63a9\u819c\u200b\u7684\u200b\u7c7b\u578b\u200b\n        mask_mode='bbox',  # \u200b\u63a9\u819c\u200b\u7684\u200b\u7c7b\u578b\u200b\n        mask_config=dict(\n            max_bbox_shape=(128, 128),  # \u200b\u8fb9\u754c\u200b\u6846\u200b\u7684\u200b\u5f62\u72b6\u200b\n            max_bbox_delta=40,  # \u200b\u8fb9\u754c\u200b\u6846\u200b\u9ad8\u5ea6\u200b\u548c\u200b\u5bbd\u5ea6\u200b\u7684\u200b\u53d8\u5316\u200b\u8303\u56f4\u200b\n            min_margin=20,  # \u200b\u8fb9\u754c\u200b\u6846\u200b\u4e0e\u200b\u56fe\u50cf\u200b\u8fb9\u754c\u200b\u7684\u200b\u6700\u5c0f\u200b\u95f4\u8ddd\u200b\n            img_shape=input_shape)),  # \u200b\u8f93\u5165\u200b\u56fe\u50cf\u200b\u7684\u200b\u5f62\u72b6\u200b\n    dict(\n        type='Crop',  # \u200b\u88c1\u526a\u200b\u7684\u200b\u7c7b\u578b\u200b\n        keys=['gt'],  # \u200b\u9700\u8981\u200b\u88c1\u526a\u200b\u7684\u200b\u56fe\u50cf\u200b\u7684\u200b\u952e\u200b\n        crop_size=(384, 384),  # \u200b\u88c1\u526a\u200b\u540e\u200b\u7684\u200b\u5927\u5c0f\u200b\n        random_crop=True,  # \u200b\u662f\u5426\u200b\u968f\u673a\u200b\u88c1\u526a\u200b\n    ),\n    dict(\n        type='Resize',  # \u200b\u8c03\u6574\u200b\u5927\u5c0f\u200b\u7684\u200b\u7c7b\u578b\u200b\n        keys=['gt'],  # \u200b\u9700\u8981\u200b\u8c03\u6574\u200b\u5927\u5c0f\u200b\u7684\u200b\u56fe\u50cf\u200b\u7684\u200b\u952e\u200b\n        scale=input_shape,  # \u200b\u8c03\u6574\u200b\u5927\u5c0f\u200b\u7684\u200b\u6bd4\u4f8b\u200b\n        keep_ratio=False,  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b\u6bd4\u4f8b\u200b\n    ),\n    dict(\n        type='Normalize',  # \u200b\u5f52\u4e00\u5316\u200b\u7684\u200b\u7c7b\u578b\u200b\n        keys=['gt_img'],  # \u200b\u9700\u8981\u200b\u5f52\u4e00\u5316\u200b\u7684\u200b\u56fe\u50cf\u200b\u7684\u200b\u952e\u200b\n        mean=[127.5] * 3,  # \u200b\u5f52\u4e00\u5316\u200b\u65f6\u200b\u4f7f\u7528\u200b\u7684\u200b\u5747\u503c\u200b\n        std=[127.5] * 3,  # \u200b\u5f52\u4e00\u5316\u200b\u65f6\u200b\u4f7f\u7528\u200b\u7684\u200b\u6807\u51c6\u5dee\u200b\n        to_rgb=False),  # \u200b\u662f\u5426\u200b\u5c06\u200b\u56fe\u50cf\u200b\u901a\u9053\u200b\u8f6c\u6362\u200b\u4e3a\u200bRGB\n    dict(type='GetMaskedImage'),  # \u200b\u83b7\u53d6\u200b\u63a9\u819c\u200b\u56fe\u50cf\u200b\u7684\u200b\u914d\u7f6e\u200b\n    dict(type='PackInputs'),  # \u200b\u6536\u96c6\u200b\u5f53\u524d\u200b\u6d41\u6c34\u7ebf\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u7684\u200b\u914d\u7f6e\u200b\n]\n\ntest_pipeline = train_pipeline  # \u200b\u6784\u5efa\u200b\u6d4b\u8bd5\u200b/\u200b\u9a8c\u8bc1\u200b\u6d41\u6c34\u7ebf\u200b\n\ndataset_type = 'BasicImageDataset'  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u7c7b\u578b\u200b\ndata_root = 'data/places'  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\n\ntrain_dataloader = dict(\n    batch_size=12,  # \u200b\u5355\u4e2a\u200bGPU\u200b\u7684\u200b\u6279\u5904\u7406\u200b\u5927\u5c0f\u200b\n    num_workers=4,  # \u200b\u6bcf\u4e2a\u200b\u5355\u4e2a\u200bGPU\u200b\u9884\u53d6\u200b\u6570\u636e\u200b\u7684\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u6570\u200b\n    persistent_workers=False,  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u5b9e\u4f8b\u200b\n    sampler=dict(type='InfiniteSampler', shuffle=False),  # \u200b\u6570\u636e\u200b\u91c7\u6837\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\n    dataset=dict(  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type=dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u7c7b\u578b\u200b\n        data_root=data_root,  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\n        data_prefix=dict(gt='data_large'),  # \u200b\u56fe\u50cf\u200b\u8def\u5f84\u200b\u7684\u200b\u524d\u7f00\u200b\n        ann_file='meta/places365_train_challenge.txt',  # \u200b\u6ce8\u91ca\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\n        test_mode=False,\n        pipeline=train_pipeline,\n    ))\n\nval_dataloader = dict(\n    batch_size=1,  # \u200b\u5355\u4e2a\u200bGPU\u200b\u7684\u200b\u6279\u5904\u7406\u200b\u5927\u5c0f\u200b\n    num_workers=4,  # \u200b\u6bcf\u4e2a\u200b\u5355\u4e2a\u200bGPU\u200b\u9884\u53d6\u200b\u6570\u636e\u200b\u7684\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u6570\u200b\n    persistent_workers=False,  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u5b9e\u4f8b\u200b\n    drop_last=False,  # \u200b\u662f\u5426\u200b\u4e22\u5f03\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u4e0d\u200b\u5b8c\u6574\u200b\u7684\u200b\u6279\u6b21\u200b\n    sampler=dict(type='DefaultSampler', shuffle=False),  # \u200b\u6570\u636e\u200b\u91c7\u6837\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\n    dataset=dict(  # \u200b\u9a8c\u8bc1\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type=dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u7c7b\u578b\u200b\n        data_root=data_root,  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\n        data_prefix=dict(gt='val_large'),  # \u200b\u56fe\u50cf\u200b\u8def\u5f84\u200b\u7684\u200b\u524d\u7f00\u200b\n        ann_file='meta/places365_val.txt',  # \u200b\u6ce8\u91ca\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\n        test_mode=True,\n        pipeline=test_pipeline,\n    ))\n\ntest_dataloader = val_dataloader\n\nmodel_wrapper_cfg = dict(type='MMSeparateDistributedDataParallel')  # \u200b\u6a21\u578b\u200b\u5305\u88c5\u200b\u5668\u200b\u7684\u200b\u540d\u79f0\u200b\n\noptim_wrapper = dict(  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u4f18\u5316\u200b\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\uff0c\u200b\u652f\u6301\u200bPyTorch\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u4f18\u5316\u200b\u5668\u200b\uff0c\u200b\u5176\u200b\u53c2\u6570\u200b\u4e0e\u200bPyTorch\u200b\u4e2d\u200b\u7684\u200b\u4f18\u5316\u200b\u5668\u200b\u7684\u200b\u53c2\u6570\u200b\u76f8\u540c\u200b\n    constructor='MultiOptimWrapperConstructor',\n    generator=dict(\n        type='OptimWrapper', optimizer=dict(type='Adam', lr=0.0004)),\n    disc=dict(type='OptimWrapper', optimizer=dict(type='Adam', lr=0.0004)))\n\ndefault_scope = 'mmagic'  # \u200b\u7528\u4e8e\u200b\u8bbe\u7f6e\u200b\u6ce8\u518c\u8868\u200b\u4f4d\u7f6e\u200b\nsave_dir = './work_dirs'  # \u200b\u4fdd\u5b58\u200b\u6a21\u578b\u200b\u68c0\u67e5\u70b9\u200b\u548c\u200b\u65e5\u5fd7\u200b\u7684\u200b\u76ee\u5f55\u200b\nexp_name = 'gl_places'  # \u200b\u5b9e\u9a8c\u200b\u540d\u79f0\u200b\n\ndefault_hooks = dict(  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u9ed8\u8ba4\u200b\u6302\u94a9\u200b\n    timer=dict(type='IterTimerHook'),\n    logger=dict(type='LoggerHook', interval=100),  # \u200b\u6ce8\u518c\u200b\u8bb0\u5f55\u5668\u200b\u6302\u94a9\u200b\u7684\u200b\u914d\u7f6e\u200b\n    param_scheduler=dict(type='ParamSchedulerHook'),\n    checkpoint=dict(  # \u200b\u8bbe\u7f6e\u200b\u68c0\u67e5\u70b9\u200b\u6302\u94a9\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type='CheckpointHook',\n        interval=50000,\n        by_epoch=False,\n        out_dir=save_dir),\n    sampler_seed=dict(type='DistSamplerSeedHook'),\n)\n\nenv_cfg = dict(  # \u200b\u7528\u4e8e\u200b\u8bbe\u7f6e\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b\u7aef\u53e3\u200b\n    cudnn_benchmark=False,\n    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),\n    dist_cfg=dict(backend='nccl'),\n)\n\nvis_backends = [dict(type='LocalVisBackend')]  # \u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u7684\u200b\u540d\u79f0\u200b\nvisualizer = dict(  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n    type='ConcatImageVisualizer',\n    vis_backends=vis_backends,\n    fn_key='gt_path',\n    img_keys=['gt_img', 'input', 'pred_img'],\n    bgr2rgb=True)\ncustom_hooks = [dict(type='BasicVisualizationHook', interval=1)]  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u81ea\u5b9a\u4e49\u200b\u6302\u94a9\u200b\n\nlog_level = 'INFO'  # \u200b\u8bb0\u5f55\u200b\u7ea7\u522b\u200b\nlog_processor = dict(type='LogProcessor', by_epoch=False)  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u65e5\u5fd7\u200b\u5904\u7406\u5668\u200b\n\nload_from = None  # \u200b\u4ece\u200b\u7ed9\u5b9a\u200b\u8def\u5f84\u200b\u52a0\u8f7d\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\nresume = False  # \u200b\u4ece\u200b\u7ed9\u5b9a\u200b\u8def\u5f84\u200b\u6062\u590d\u200b\u68c0\u67e5\u70b9\u200b\n\nfind_unused_parameters = False  # \u200b\u662f\u5426\u200b\u5728\u200bDDP\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u672a\u200b\u4f7f\u7528\u200b\u7684\u200b\u53c2\u6570\u200b\n</code></pre>"},{"location":"user_guides/config/#_21","title":"\u62a0\u200b\u56fe\u200b\u4efb\u52a1\u200b\u7684\u200b\u914d\u7f6e\u200b\u793a\u4f8b","text":"<p>\u200b\u4e3a\u4e86\u200b\u5e2e\u52a9\u200b\u7528\u6237\u200b\u5bf9\u200b\u5b8c\u6574\u200b\u7684\u200b\u914d\u7f6e\u200b\u6709\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u200b\u7684\u200b\u4e86\u89e3\u200b\uff0c\u200b\u6211\u4eec\u200b\u5bf9\u200b\u6211\u4eec\u200b\u5b9e\u73b0\u200b\u7684\u200b\u539f\u59cb\u200bDIM\uff08Deep Image Matting\uff09\u200b\u6a21\u578b\u200b\u7684\u200b\u914d\u7f6e\u200b\u8fdb\u884c\u200b\u4e86\u200b\u7b80\u8981\u200b\u7684\u200b\u6ce8\u91ca\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u3002\u200b\u6709\u5173\u200b\u6bcf\u4e2a\u200b\u6a21\u5757\u200b\u7684\u200b\u66f4\u200b\u8be6\u7ec6\u200b\u7528\u6cd5\u200b\u548c\u200b\u76f8\u5e94\u200b\u7684\u200b\u66ff\u4ee3\u200b\u65b9\u6848\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200bAPI\u200b\u6587\u6863\u200b\u3002</p> <pre><code># \u200b\u6a21\u578b\u200b\u8bbe\u7f6e\u200b\nmodel = dict(\n    type='DIM',  # \u200b\u6a21\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\uff08\u200b\u6211\u4eec\u200b\u79f0\u4e4b\u4e3a\u200bmattor\uff09\u3002\n    data_preprocessor=dict(  # \u200b\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type='DataPreprocessor',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        bgr_to_rgb=True,\n        proc_inputs='normalize',\n        proc_trimap='rescale_to_zero_one',\n        proc_gt='rescale_to_zero_one',\n    ),\n    backbone=dict(  # \u200b\u9aa8\u5e72\u200b\u7f51\u7edc\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002\n        type='SimpleEncoderDecoder',  # \u200b\u9aa8\u5e72\u200b\u7f51\u7edc\u200b\u7684\u200b\u7c7b\u578b\u200b\u3002\n        encoder=dict(  # \u200b\u7f16\u7801\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002\n            type='VGG16'),  # \u200b\u7f16\u7801\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\u3002\n        decoder=dict(  # \u200b\u89e3\u7801\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002\n            type='PlainDecoder')),  # \u200b\u89e3\u7801\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\u3002\n    pretrained='./weights/vgg_state_dict.pth',  # \u200b\u8981\u200b\u52a0\u8f7d\u200b\u7684\u200b\u7f16\u7801\u5668\u200b\u7684\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6743\u91cd\u200b\u3002\n    loss_alpha=dict(  # alpha\u200b\u635f\u5931\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002\n        type='CharbonnierLoss',  # \u200b\u9884\u6d4b\u200b\u7684\u200balpha\u200b\u878d\u5408\u200b\u56fe\u50cf\u200b\u7684\u200b\u635f\u5931\u200b\u7c7b\u578b\u200b\u3002\n        loss_weight=0.5),  # alpha\u200b\u635f\u5931\u200b\u7684\u200b\u6743\u91cd\u200b\u3002\n    loss_comp=dict(  # \u200b\u5408\u6210\u200b\u635f\u5931\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002\n        type='CharbonnierCompLoss',  # \u200b\u5408\u6210\u200b\u635f\u5931\u200b\u7684\u200b\u7c7b\u578b\u200b\u3002\n        loss_weight=0.5),  # \u200b\u5408\u6210\u200b\u635f\u5931\u200b\u7684\u200b\u6743\u91cd\u200b\u3002\n    train_cfg=dict(  # DIM\u200b\u6a21\u578b\u200b\u7684\u200b\u8bad\u7ec3\u200b\u914d\u7f6e\u200b\u3002\n        train_backbone=True,  # \u200b\u5728\u200bDIM\u200b\u9636\u6bb5\u200b1\u200b\u4e2d\u200b\uff0c\u200b\u8bad\u7ec3\u200b\u9aa8\u5e72\u200b\u7f51\u7edc\u200b\u3002\n        train_refiner=False),  # \u200b\u5728\u200bDIM\u200b\u9636\u6bb5\u200b1\u200b\u4e2d\u200b\uff0c\u200b\u4e0d\u200b\u8bad\u7ec3\u200brefiner\u3002\n    test_cfg=dict(  # DIM\u200b\u6a21\u578b\u200b\u7684\u200b\u6d4b\u8bd5\u200b\u914d\u7f6e\u200b\u3002\n        refine=False,  # \u200b\u662f\u5426\u200b\u4f7f\u7528\u200brefiner\u200b\u8f93\u51fa\u200b\u4f5c\u4e3a\u200b\u8f93\u51fa\u200b\uff0c\u200b\u5728\u200b\u9636\u6bb5\u200b1\u200b\u4e2d\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u5b83\u200b\u3002\n        resize_method='pad',\n        resize_mode='reflect',\n        size_divisor=32,\n    ),\n)\n\n# \u200b\u6570\u636e\u200b\u8bbe\u7f6e\u200b\ndataset_type = 'AdobeComp1kDataset'  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7c7b\u578b\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5b9a\u4e49\u6570\u636e\u200b\u96c6\u200b\u3002\ndata_root = 'data/adobe_composition-1k'  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\u3002\n\ntrain_pipeline = [  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u5904\u7406\u200b\u6d41\u7a0b\u200b\u3002\n    dict(\n        type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u52a0\u8f7d\u200balpha\u200b\u878d\u5408\u200b\u56fe\u50cf\u200b\u3002\n        key='alpha',  # \u200b\u6ce8\u91ca\u200b\u6587\u4ef6\u200b\u4e2d\u200balpha\u200b\u878d\u5408\u200b\u56fe\u50cf\u200b\u7684\u200b\u952e\u200b\u3002\u200b\u8be5\u200b\u6d41\u7a0b\u200b\u5c06\u200b\u4ece\u200b\u8def\u5f84\u200b`alpha_path`\u200b\u8bfb\u53d6\u200balpha\u200b\u878d\u5408\u200b\u56fe\u50cf\u200b\u3002\n        color_type='grayscale'),  # \u200b\u52a0\u8f7d\u200b\u4e3a\u200b\u7070\u5ea6\u200b\u56fe\u50cf\u200b\uff0c\u200b\u5177\u6709\u200b\u5f62\u72b6\u200b\uff08\u200b\u9ad8\u5ea6\u200b\uff0c\u200b\u5bbd\u5ea6\u200b\uff09\u3002\n    dict(\n        type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\u3002\n        key='fg'),  # \u200b\u8981\u200b\u52a0\u8f7d\u200b\u7684\u200b\u56fe\u50cf\u200b\u7684\u200b\u952e\u200b\u3002\u200b\u8be5\u200b\u6d41\u7a0b\u200b\u5c06\u200b\u4ece\u200b\u8def\u5f84\u200b`fg_path`\u200b\u8bfb\u53d6\u200b\u524d\u666f\u200b\u56fe\u50cf\u200b\u3002\n    dict(\n        type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\u3002\n        key='bg'),  # \u200b\u8981\u200b\u52a0\u8f7d\u200b\u7684\u200b\u56fe\u50cf\u200b\u7684\u200b\u952e\u200b\u3002\u200b\u8be5\u200b\u6d41\u7a0b\u200b\u5c06\u200b\u4ece\u200b\u8def\u5f84\u200b`bg_path`\u200b\u8bfb\u53d6\u200b\u80cc\u666f\u200b\u56fe\u50cf\u200b\u3002\n    dict(\n        type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\u3002\n        key='merged'),  # \u200b\u8981\u200b\u52a0\u8f7d\u200b\u7684\u200b\u56fe\u50cf\u200b\u7684\u200b\u952e\u200b\u3002\u200b\u8be5\u200b\u6d41\u7a0b\u200b\u5c06\u200b\u4ece\u200b\u8def\u5f84\u200b`merged_path`\u200b\u8bfb\u53d6\u200b\u5408\u5e76\u200b\u56fe\u50cf\u200b\u3002\n    dict(\n        type='CropAroundUnknown',  # \u200b\u5728\u200b\u672a\u77e5\u200b\u533a\u57df\u200b\uff08\u200b\u534a\u900f\u660e\u200b\u533a\u57df\u200b\uff09\u200b\u5468\u56f4\u200b\u88c1\u526a\u200b\u56fe\u50cf\u200b\u3002\n        keys=['alpha', 'merged', 'fg', 'bg'],  # \u200b\u8981\u200b\u88c1\u526a\u200b\u7684\u200b\u56fe\u50cf\u200b\u3002\n        crop_sizes=[320, 480, 640]),  # \u200b\u5019\u9009\u200b\u88c1\u526a\u200b\u5927\u5c0f\u200b\u3002\n    dict(\n        type='Flip',  # \u200b\u7ffb\u8f6c\u200b\u56fe\u50cf\u200b\u7684\u200b\u589e\u5f3a\u200b\u6d41\u7a0b\u200b\u3002\n        keys=['alpha', 'merged', 'fg', 'bg']),  # \u200b\u8981\u200b\u7ffb\u8f6c\u200b\u7684\u200b\u56fe\u50cf\u200b\u3002\n    dict(\n        type='Resize',  # \u200b\u8c03\u6574\u200b\u56fe\u50cf\u200b\u5927\u5c0f\u200b\u7684\u200b\u589e\u5f3a\u200b\u6d41\u7a0b\u200b\u3002\n        keys=['alpha', 'merged', 'fg', 'bg'],  # \u200b\u8981\u200b\u8c03\u6574\u200b\u5927\u5c0f\u200b\u7684\u200b\u56fe\u50cf\u200b\u3002\n        scale=(320, 320),  # \u200b\u76ee\u6807\u200b\u5927\u5c0f\u200b\u3002\n        keep_ratio=False),  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b\u9ad8\u5ea6\u200b\u548c\u200b\u5bbd\u5ea6\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6bd4\u4f8b\u200b\u3002\n    dict(\n        type='GenerateTrimap',  # \u200b\u4ece\u200balpha\u200b\u878d\u5408\u200b\u56fe\u50cf\u200b\u751f\u6210\u200btrimap\u3002\n        kernel_size=(1, 30)),  # \u200b\u8150\u8680\u200b/\u200b\u81a8\u80c0\u200b\u5185\u6838\u200b\u7684\u200b\u5927\u5c0f\u200b\u8303\u56f4\u200b\u3002\n    dict(type='PackInputs'),  # \u200b\u4ece\u200b\u5f53\u524d\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u6536\u96c6\u200b\u6570\u636e\u200b\u7684\u200b\u914d\u7f6e\u200b\n]\ntest_pipeline = [\n    dict(\n        type='LoadImageFromFile',  # \u200b\u52a0\u8f7d\u200balpha\u200b\u878d\u5408\u200b\u56fe\u50cf\u200b\u3002\n        key='alpha',  # \u200b\u6ce8\u91ca\u200b\u6587\u4ef6\u200b\u4e2d\u200balpha\u200b\u878d\u5408\u200b\u56fe\u50cf\u200b\u7684\u200b\u952e\u200b\u3002\u200b\u8be5\u200b\u6d41\u7a0b\u200b\u5c06\u200b\u4ece\u200b\u8def\u5f84\u200b`alpha_path`\u200b\u8bfb\u53d6\u200balpha\u200b\u878d\u5408\u200b\u56fe\u50cf\u200b\u3002\n        color_type='grayscale',\n        save_original_img=True),\n    dict(\n        type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\u3002\n        key='trimap',  # \u200b\u8981\u200b\u52a0\u8f7d\u200b\u7684\u200b\u56fe\u50cf\u200b\u7684\u200b\u952e\u200b\u3002\u200b\u8be5\u200b\u6d41\u7a0b\u200b\u5c06\u200b\u4ece\u200b\u8def\u5f84\u200b`trimap_path`\u200b\u8bfb\u53d6\u200btrimap\u3002\n        color_type='grayscale',  # \u200b\u52a0\u8f7d\u200b\u4e3a\u200b\u7070\u5ea6\u200b\u56fe\u50cf\u200b\uff0c\u200b\u5177\u6709\u200b\u5f62\u72b6\u200b\uff08\u200b\u9ad8\u5ea6\u200b\uff0c\u200b\u5bbd\u5ea6\u200b\uff09\u3002\n        save_original_img=True),  # \u200b\u4fdd\u5b58\u200btrimap\u200b\u7684\u200b\u526f\u672c\u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u200b\u6307\u6807\u200b\u3002\u200b\u5b83\u200b\u5c06\u200b\u4ee5\u952e\u200b`ori_trimap`\u200b\u4fdd\u5b58\u200b\u3002\n    dict(\n        type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\u3002\n        key='merged'),  # \u200b\u8981\u200b\u52a0\u8f7d\u200b\u7684\u200b\u56fe\u50cf\u200b\u7684\u200b\u952e\u200b\u3002\u200b\u8be5\u200b\u6d41\u7a0b\u200b\u5c06\u200b\u4ece\u200b\u8def\u5f84\u200b`merged_path`\u200b\u8bfb\u53d6\u200b\u5408\u5e76\u200b\u56fe\u50cf\u200b\u3002\n    dict(type='PackInputs'),  # \u200b\u4ece\u200b\u5f53\u524d\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u6536\u96c6\u200b\u6570\u636e\u200b\u7684\u200b\u914d\u7f6e\u200b\n]\n\ntrain_dataloader = dict(\n    batch_size=1,  # \u200b\u5355\u4e2a\u200bGPU\u200b\u7684\u200b\u6279\u5904\u7406\u200b\u5927\u5c0f\u200b\n    num_workers=4,  # \u200b\u6bcf\u4e2a\u200b\u5355\u4e2a\u200bGPU\u200b\u9884\u200b\u63d0\u53d6\u200b\u6570\u636e\u200b\u7684\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u6570\u200b\n    persistent_workers=False,  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200bDataset\u200b\u5b9e\u4f8b\u200b\u5904\u4e8e\u200b\u6d3b\u52a8\u72b6\u6001\u200b\n    sampler=dict(type='InfiniteSampler', shuffle=True),  # \u200b\u6570\u636e\u200b\u91c7\u6837\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\n    dataset=dict(  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type=dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u7c7b\u578b\u200b\n        data_root=data_root,  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\n        ann_file='training_list.json',  # \u200b\u6ce8\u91ca\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\n        test_mode=False,\n        pipeline=train_pipeline,\n    ))\n\nval_dataloader = dict(\n    batch_size=1,  # \u200b\u5355\u4e2a\u200bGPU\u200b\u7684\u200b\u6279\u5904\u7406\u200b\u5927\u5c0f\u200b\n    num_workers=4,  # \u200b\u6bcf\u4e2a\u200b\u5355\u4e2a\u200bGPU\u200b\u9884\u200b\u63d0\u53d6\u200b\u6570\u636e\u200b\u7684\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u6570\u200b\n    persistent_workers=False,  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200bDataset\u200b\u5b9e\u4f8b\u200b\u5904\u4e8e\u200b\u6d3b\u52a8\u72b6\u6001\u200b\n    drop_last=False,  # \u200b\u662f\u5426\u200b\u4e22\u5f03\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u4e0d\u200b\u5b8c\u6574\u200b\u7684\u200b\u6279\u6b21\u200b\n    sampler=dict(type='DefaultSampler', shuffle=False),  # \u200b\u6570\u636e\u200b\u91c7\u6837\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\n    dataset=dict(  # \u200b\u9a8c\u8bc1\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type=dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u7c7b\u578b\u200b\n        data_root=data_root,  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\n        ann_file='test_list.json',  # \u200b\u6ce8\u91ca\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\n        test_mode=True,\n        pipeline=test_pipeline,\n    ))\n\ntest_dataloader = val_dataloader\n\nval_evaluator = [\n    dict(type='SAD'),  # \u200b\u8981\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u540d\u79f0\u200b\n    dict(type='MattingMSE'),  # \u200b\u8981\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u540d\u79f0\u200b\n    dict(type='GradientError'),  # \u200b\u8981\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u540d\u79f0\u200b\n    dict(type='ConnectivityError'),  # \u200b\u8981\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u540d\u79f0\u200b\n]\ntest_evaluator = val_evaluator\n\ntrain_cfg = dict(\n    type='IterBasedTrainLoop',  # \u200b\u8bad\u7ec3\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\n    max_iters=1_000_000,  # \u200b\u603b\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\n    val_interval=40000,  # \u200b\u9a8c\u8bc1\u200b\u95f4\u9694\u200b\u8fed\u4ee3\u200b\u6b21\u6570\u200b\n)\nval_cfg = dict(type='ValLoop')  # \u200b\u9a8c\u8bc1\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\ntest_cfg = dict(type='TestLoop')  # \u200b\u6d4b\u8bd5\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\n\n# \u200b\u4f18\u5316\u200b\u5668\u200b\noptim_wrapper = dict(\n    dict(\n        type='OptimWrapper',\n        optimizer=dict(type='Adam', lr=0.00001),\n    )\n)  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u4f18\u5316\u200b\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\uff0c\u200b\u652f\u6301\u200bPyTorch\u200b\u4e2d\u200b\u6240\u6709\u200b\u4f18\u5316\u200b\u5668\u200b\uff0c\u200b\u5176\u200b\u53c2\u6570\u200b\u4e5f\u200b\u4e0e\u200bPyTorch\u200b\u4e2d\u200b\u7684\u200b\u53c2\u6570\u200b\u76f8\u540c\u200b\u3002\n\ndefault_scope = 'mmagic'  # \u200b\u7528\u4e8e\u200b\u8bbe\u7f6e\u200b\u6ce8\u518c\u8868\u200b\u4f4d\u7f6e\u200b\nsave_dir = './work_dirs'  # \u200b\u4fdd\u5b58\u200b\u5f53\u524d\u200b\u5b9e\u9a8c\u200b\u7684\u200b\u6a21\u578b\u200b\u68c0\u67e5\u70b9\u200b\u548c\u200b\u65e5\u5fd7\u200b\u7684\u200b\u76ee\u5f55\u200b\u3002\n\ndefault_hooks = dict(  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u9ed8\u8ba4\u200b\u94a9\u5b50\u200b\n    timer=dict(type='IterTimerHook'),\n    logger=dict(type='LoggerHook', interval=100),  # \u200b\u6ce8\u518c\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\u94a9\u5b50\u200b\u7684\u200b\u914d\u7f6e\u200b\n    param_scheduler=dict(type='ParamSchedulerHook'),\n    checkpoint=dict(  # \u200b\u914d\u7f6e\u200b\u68c0\u67e5\u70b9\u200b\u94a9\u5b50\u200b\n        type='CheckpointHook',\n        interval=40000,  # \u200b\u4fdd\u5b58\u200b\u95f4\u9694\u200b\u4e3a\u200b40000\u200b\u6b21\u200b\u8fed\u4ee3\u200b\u3002\n        by_epoch=False,  # \u200b\u6309\u200b\u8fed\u4ee3\u200b\u8ba1\u6570\u200b\u3002\n        out_dir=save_dir),\n    sampler_seed=dict(type='DistSamplerSeedHook'),\n)\n\nenv_cfg = dict(  # \u200b\u8bbe\u7f6e\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b\u7aef\u53e3\u200b\n    cudnn_benchmark=False,\n    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=4),\n    dist_cfg=dict(backend='nccl'),\n)\n\nlog_level = 'INFO'  # \u200b\u65e5\u5fd7\u200b\u7ea7\u522b\u200b\nlog_processor = dict(type='LogProcessor', by_epoch=False)  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u65e5\u5fd7\u200b\u5904\u7406\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002\n\n# \u200b\u5bfc\u5165\u200b\u6a21\u5757\u200b\u5e76\u200b\u8bbe\u7f6e\u200bMMDetection\u200b\u7684\u200b\u914d\u7f6e\u200b\nload_from = None  # \u200b\u4ece\u200b\u7ed9\u5b9a\u200b\u8def\u5f84\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u4f5c\u4e3a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u4f1a\u200b\u6062\u590d\u200b\u8bad\u7ec3\u200b\u3002\nresume = False  # \u200b\u4ece\u200b\u7ed9\u5b9a\u200b\u8def\u5f84\u200b\u6062\u590d\u200b\u68c0\u67e5\u70b9\u200b\uff0c\u200b\u8bad\u7ec3\u200b\u5c06\u200b\u4ece\u200b\u68c0\u67e5\u70b9\u200b\u4fdd\u5b58\u200b\u7684\u200b\u65f6\u671f\u200b\u6062\u590d\u200b\u3002\n</code></pre>"},{"location":"user_guides/config/#_22","title":"\u6062\u590d\u200b\u4efb\u52a1\u200b\u7684\u200b\u914d\u7f6e\u200b\u793a\u4f8b","text":"<p>\u200b\u4e3a\u4e86\u200b\u5e2e\u52a9\u200b\u7528\u6237\u200b\u5bf9\u200b\u5b8c\u6574\u200b\u914d\u7f6e\u200b\u6709\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u200b\u7684\u200b\u7406\u89e3\u200b\uff0c\u200b\u6211\u4eec\u200b\u5bf9\u200b\u6211\u4eec\u200b\u5b9e\u73b0\u200b\u7684\u200bEDSR\u200b\u6a21\u578b\u200b\u7684\u200b\u914d\u7f6e\u200b\u8fdb\u884c\u200b\u4e86\u200b\u7b80\u8981\u200b\u7684\u200b\u6ce8\u91ca\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u3002\u200b\u6709\u5173\u200b\u66f4\u200b\u8be6\u7ec6\u200b\u7684\u200b\u7528\u6cd5\u200b\u548c\u200b\u6bcf\u4e2a\u200b\u6a21\u5757\u200b\u7684\u200b\u76f8\u5e94\u200b\u66ff\u4ee3\u200b\u65b9\u6848\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200bAPI\u200b\u6587\u6863\u200b\u3002</p> <pre><code>exp_name = 'edsr_x2c64b16_1x16_300k_div2k'  # \u200b\u5b9e\u9a8c\u200b\u540d\u79f0\u200b\nwork_dir = f'./work_dirs/{experiment_name}'\nsave_dir = './work_dirs/'\n\nload_from = None  # \u200b\u57fa\u4e8e\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200bx2\u200b\u6a21\u578b\u200b\n\nscale = 2  # \u200b\u4e0a\u200b\u91c7\u6837\u200b\u7684\u200b\u6bd4\u4f8b\u200b\n# \u200b\u6a21\u578b\u200b\u8bbe\u7f6e\u200b\nmodel = dict(\n    type='BaseEditModel',  # \u200b\u6a21\u578b\u200b\u540d\u79f0\u200b\n    generator=dict(  # \u200b\u751f\u6210\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type='EDSRNet',  # \u200b\u751f\u6210\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\n        in_channels=3,  # \u200b\u8f93\u5165\u200b\u7684\u200b\u901a\u9053\u200b\u6570\u200b\n        out_channels=3,  # \u200b\u8f93\u51fa\u200b\u7684\u200b\u901a\u9053\u200b\u6570\u200b\n        mid_channels=64,  # \u200b\u4e2d\u95f4\u200b\u7279\u5f81\u200b\u7684\u200b\u901a\u9053\u200b\u6570\u200b\n        num_blocks=16,  # \u200b\u4e3b\u5e72\u200b\u7f51\u7edc\u200b\u4e2d\u200b\u7684\u200b\u5757\u200b\u6570\u200b\n        upscale_factor=scale,  # \u200b\u4e0a\u200b\u91c7\u6837\u200b\u56e0\u5b50\u200b\n        res_scale=1,  # \u200b\u7528\u4e8e\u200b\u7f29\u653e\u200b\u6b8b\u5dee\u200b\u5757\u200b\u4e2d\u200b\u7684\u200b\u6b8b\u5dee\u200b\n        rgb_mean=(0.4488, 0.4371, 0.4040),  # \u200b\u56fe\u50cf\u200b\u7684\u200bRGB\u200b\u5747\u503c\u200b\n        rgb_std=(1.0, 1.0, 1.0)),  # \u200b\u56fe\u50cf\u200b\u7684\u200bRGB\u200b\u6807\u51c6\u5dee\u200b\n    pixel_loss=dict(type='L1Loss', loss_weight=1.0, reduction='mean')  # \u200b\u50cf\u7d20\u200b\u635f\u5931\u200b\u7684\u200b\u914d\u7f6e\u200b\ntrain_cfg = dict(),  # \u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u7684\u200b\u914d\u7f6e\u200b\ntest_cfg = dict(),  # \u200b\u6d4b\u8bd5\u200b\u6a21\u578b\u200b\u7684\u200b\u914d\u7f6e\u200b\ndata_preprocessor = dict(  # \u200b\u6570\u636e\u200b\u9884\u200b\u5904\u7406\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\n    type='DataPreprocessor', mean=[0., 0., 0.], std=[255., 255., 255.]))\n\ntrain_pipeline = [  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u5904\u7406\u200b\u7684\u200b\u6d41\u7a0b\u200b\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\n         key='img',  # \u200b\u7ed3\u679c\u200b\u4e2d\u200b\u5bfb\u627e\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\n         color_type='color',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u989c\u8272\u200b\u7c7b\u578b\u200b\n         channel_order='rgb',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u901a\u9053\u200b\u987a\u5e8f\u200b\n         imdecode_backend='cv2'),  # \u200b\u89e3\u7801\u200b\u540e\u200b\u7aef\u200b\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\n         key='gt',  # \u200b\u7ed3\u679c\u200b\u4e2d\u200b\u5bfb\u627e\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\n         color_type='color',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u989c\u8272\u200b\u7c7b\u578b\u200b\n         channel_order='rgb',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u901a\u9053\u200b\u987a\u5e8f\u200b\n         imdecode_backend='cv2'),  # \u200b\u89e3\u7801\u200b\u540e\u200b\u7aef\u200b\n    dict(type='SetValues', dictionary=dict(scale=scale)),  # \u200b\u8bbe\u7f6e\u200b\u76ee\u6807\u200b\u5173\u952e\u5b57\u200b\u7684\u200b\u503c\u200b\n    dict(type='PairedRandomCrop', gt_patch_size=96),  # \u200b\u968f\u673a\u200b\u88c1\u526a\u200b\u914d\u5bf9\u200b\u56fe\u50cf\u200b\n    dict(type='Flip',  # \u200b\u7ffb\u8f6c\u200b\u56fe\u50cf\u200b\n         keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b\u7ffb\u8f6c\u200b\u7684\u200b\u56fe\u50cf\u200b\n         flip_ratio=0.5,  # \u200b\u7ffb\u8f6c\u200b\u7684\u200b\u6bd4\u4f8b\u200b\n         direction='horizontal'),  # \u200b\u7ffb\u8f6c\u200b\u7684\u200b\u65b9\u5411\u200b\n    dict(type='Flip',  # \u200b\u7ffb\u8f6c\u200b\u56fe\u50cf\u200b\n         keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b\u7ffb\u8f6c\u200b\u7684\u200b\u56fe\u50cf\u200b\n         flip_ratio=0.5,  # \u200b\u7ffb\u8f6c\u200b\u7684\u200b\u6bd4\u4f8b\u200b\n         direction='vertical'),  # \u200b\u7ffb\u8f6c\u200b\u7684\u200b\u65b9\u5411\u200b\n    dict(type='RandomTransposeHW',  # \u200b\u968f\u673a\u200b\u8f6c\u7f6e\u200b\u56fe\u50cf\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u548c\u200b\u5bbd\u5ea6\u200b\n         keys=['lq', 'gt'],  # \u200b\u9700\u8981\u200b\u8f6c\u7f6e\u200b\u7684\u200b\u56fe\u50cf\u200b\n         transpose_ratio=0.5  # \u200b\u8f6c\u7f6e\u200b\u7684\u200b\u6bd4\u4f8b\u200b\n         ),\n    dict(type='PackInputs')  # \u200b\u6536\u96c6\u200b\u5f53\u524d\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u7684\u200b\u914d\u7f6e\u200b\n]\ntest_pipeline = [  # \u200b\u6d4b\u8bd5\u200b\u6d41\u7a0b\u200b\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\n         key='img',  # \u200b\u7ed3\u679c\u200b\u4e2d\u200b\u5bfb\u627e\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\n         color_type='color',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u989c\u8272\u200b\u7c7b\u578b\u200b\n         channel_order='rgb',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u901a\u9053\u200b\u987a\u5e8f\u200b\n         imdecode_backend='cv2'),  # \u200b\u89e3\u7801\u200b\u540e\u200b\u7aef\u200b\n    dict(type='LoadImageFromFile',  # \u200b\u4ece\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u56fe\u50cf\u200b\n         key='gt',  # \u200b\u7ed3\u679c\u200b\u4e2d\u200b\u5bfb\u627e\u200b\u5bf9\u5e94\u200b\u8def\u5f84\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\n         color_type='color',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u989c\u8272\u200b\u7c7b\u578b\u200b\n         channel_order='rgb',  # \u200b\u56fe\u50cf\u200b\u7684\u200b\u901a\u9053\u200b\u987a\u5e8f\u200b\n         imdecode_backend='cv2'),  # \u200b\u89e3\u7801\u200b\u540e\u200b\u7aef\u200b\n    dict(type='ToTensor', keys=['img', 'gt']),  # \u200b\u5c06\u200b\u56fe\u50cf\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5f20\u91cf\u200b\n    dict(type='PackInputs')  # \u200b\u6536\u96c6\u200b\u5f53\u524d\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u7684\u200b\u914d\u7f6e\u200b\n]\n\n# \u200b\u6570\u636e\u200b\u96c6\u200b\u8bbe\u7f6e\u200b\ndataset_type = 'BasicImageDataset'  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u7c7b\u578b\u200b\ndata_root = 'data'  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\n\ntrain_dataloader = dict(\n    num_workers=4,  # \u200b\u6bcf\u4e2a\u200bGPU\u200b\u9884\u200b\u63d0\u53d6\u200b\u6570\u636e\u200b\u7684\u200b\u5de5\u4f5c\u200b\u8fdb\u7a0b\u200b\u6570\u200b\n    persistent_workers=False,  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b\u5de5\u4f5c\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u5b9e\u4f8b\u200b\u5904\u4e8e\u200b\u6d3b\u52a8\u72b6\u6001\u200b\n    sampler=dict(type='InfiniteSampler', shuffle=True),  # \u200b\u6570\u636e\u200b\u91c7\u6837\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\n    dataset=dict(  # \u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type=dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u7c7b\u578b\u200b\n        ann_file='meta_info_DIV2K800sub_GT.txt',  # \u200b\u6ce8\u91ca\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\n        metainfo=dict(dataset_type='div2k', task_name='sisr'),\n        data_root=data_root + '/DIV2K',  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\n        data_prefix=dict(  # \u200b\u56fe\u50cf\u200b\u8def\u5f84\u200b\u7684\u200b\u524d\u7f00\u200b\n            img='DIV2K_train_LR_bicubic/X2_sub', gt='DIV2K_train_HR_sub'),\n        filename_tmpl=dict(img='{}', gt='{}'),  # \u200b\u6587\u4ef6\u540d\u200b\u6a21\u677f\u200b\n        pipeline=train_pipeline))\nval_dataloader = dict(\n    num_workers=4,  # \u200b\u6bcf\u4e2a\u200bGPU\u200b\u9884\u200b\u63d0\u53d6\u200b\u6570\u636e\u200b\u7684\u200b\u5de5\u4f5c\u200b\u8fdb\u7a0b\u200b\u6570\u200b\n    persistent_workers=False,  # \u200b\u662f\u5426\u200b\u4fdd\u6301\u200b\u5de5\u4f5c\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u5b9e\u4f8b\u200b\u5904\u4e8e\u200b\u6d3b\u52a8\u72b6\u6001\u200b\n    drop_last=False,  # \u200b\u662f\u5426\u200b\u4e22\u5f03\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u4e0d\u200b\u5b8c\u6574\u200b\u7684\u200b\u6279\u6b21\u200b\n    sampler=dict(type='DefaultSampler', shuffle=False),  # \u200b\u6570\u636e\u200b\u91c7\u6837\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b\n    dataset=dict(  # \u200b\u9a8c\u8bc1\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u914d\u7f6e\u200b\n        type=dataset_type,  # \u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u7c7b\u578b\u200b\n        metainfo=dict(dataset_type='set5', task_name='sisr'),\n        data_root=data_root + '/Set5',  # \u200b\u6570\u636e\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\n        data_prefix=dict(img='LRbicx2', gt='GTmod12'),  # \u200b\u56fe\u50cf\u200b\u8def\u5f84\u200b\u7684\u200b\u524d\u7f00\u200b\n        pipeline=test_pipeline))\ntest_dataloader = val_dataloader\n\nval_evaluator = [\n    dict(type='MAE'),  # \u200b\u7528\u4e8e\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u7684\u200b\u540d\u79f0\u200b\n    dict(type='PSNR', crop_border=scale),  # \u200b\u7528\u4e8e\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u7684\u200b\u540d\u79f0\u200b\n    dict(type='SSIM', crop_border=scale),  # \u200b\u7528\u4e8e\u200b\u8bc4\u4f30\u200b\u7684\u200b\u6307\u6807\u200b\u7684\u200b\u540d\u79f0\u200b\n]\ntest_evaluator = val_evaluator\n\ntrain_cfg = dict(\n    type='IterBasedTrainLoop', max_iters=300000, val_interval=5000)  # \u200b\u8bad\u7ec3\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u914d\u7f6e\u200b\nval_cfg = dict(type='ValLoop')  # \u200b\u9a8c\u8bc1\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\ntest_cfg = dict(type='TestLoop')  # \u200b\u6d4b\u8bd5\u200b\u5faa\u73af\u200b\u7c7b\u578b\u200b\u7684\u200b\u540d\u79f0\u200b\n\n# \u200b\u4f18\u5316\u200b\u5668\u200b\noptim_wrapper = dict(\n    dict(\n        type='OptimWrapper',\n        optimizer=dict(type='Adam', lr=0.00001),\n    )\n)  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u4f18\u5316\u200b\u5668\u200b\u7684\u200b\u914d\u7f6e\u200b\uff0c\u200b\u652f\u6301\u200bPyTorch\u200b\u4e2d\u200b\u6240\u6709\u200b\u4f18\u5316\u200b\u5668\u200b\uff0c\u200b\u53c2\u6570\u200b\u4e0e\u200bPyTorch\u200b\u4e2d\u200b\u7684\u200b\u76f8\u540c\u200b\u3002\n\nparam_scheduler = dict(  # \u200b\u5b66\u4e60\u7b56\u7565\u200b\u7684\u200b\u914d\u7f6e\u200b\n    type='MultiStepLR', by_epoch=False, milestones=[200000], gamma=0.5)\n\ndefault_hooks = dict(  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u9ed8\u8ba4\u200b\u94a9\u5b50\u200b\n    checkpoint=dict(  # \u200b\u914d\u7f6e\u200b\u4fdd\u5b58\u200b\u68c0\u67e5\u70b9\u200b\u7684\u200b\u94a9\u5b50\u200b\n        type='CheckpointHook',\n        interval=5000,  # \u200b\u4fdd\u5b58\u200b\u95f4\u9694\u200b\u4e3a\u200b5000\u200b\u6b21\u200b\u8fed\u4ee3\u200b\n        save_optimizer=True,\n        by_epoch=False,  # \u200b\u4ee5\u200b\u8fed\u4ee3\u200b\u8ba1\u6570\u200b\n        out_dir=save_dir,\n    ),\n    timer=dict(type='IterTimerHook'),\n    logger=dict(type='LoggerHook', interval=100),  # \u200b\u6ce8\u518c\u200b\u8bb0\u5f55\u5668\u200b\u94a9\u5b50\u200b\u7684\u200b\u914d\u7f6e\u200b\n    param_scheduler=dict(type='ParamSchedulerHook'),\n    sampler_seed=dict(type='DistSamplerSeedHook'),\n)\n\ndefault_scope = 'mmagic'  # \u200b\u7528\u4e8e\u200b\u8bbe\u7f6e\u200b\u6ce8\u518c\u8868\u200b\u4f4d\u7f6e\u200b\nsave_dir = './work_dirs'  # \u200b\u4fdd\u5b58\u200b\u5f53\u524d\u200b\u5b9e\u9a8c\u200b\u7684\u200b\u6a21\u578b\u200b\u68c0\u67e5\u70b9\u200b\u548c\u200b\u65e5\u5fd7\u200b\u7684\u200b\u76ee\u5f55\u200b\u3002\n\nenv_cfg = dict(  # \u200b\u8bbe\u7f6e\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u7aef\u53e3\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b\n    cudnn_benchmark=False,\n    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=4),\n    dist_cfg=dict(backend='nccl'),\n)\n\nlog_level = 'INFO'  # \u200b\u8bb0\u5f55\u200b\u7684\u200b\u7ea7\u522b\u200b\nlog_processor = dict(type='LogProcessor', window_size=100, by_epoch=False)  # \u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u65e5\u5fd7\u200b\u5904\u7406\u5668\u200b\n\nload_from = None  # \u200b\u4ece\u200b\u7ed9\u5b9a\u200b\u8def\u5f84\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u4f5c\u4e3a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u4f1a\u200b\u6062\u590d\u200b\u8bad\u7ec3\u200b\u3002\nresume = False  # \u200b\u4ece\u200b\u7ed9\u5b9a\u200b\u8def\u5f84\u200b\u6062\u590d\u200b\u68c0\u67e5\u70b9\u200b\uff0c\u200b\u8bad\u7ec3\u200b\u5c06\u200b\u4ece\u200b\u68c0\u67e5\u70b9\u200b\u4fdd\u5b58\u200b\u7684\u200b\u65f6\u671f\u200b\u6062\u590d\u200b\u3002\n</code></pre>"},{"location":"user_guides/dataset_prepare/","title":"\u6559\u7a0b\u200b 2\uff1a\u200b\u51c6\u5907\u200b\u6570\u636e\u200b\u96c6","text":"<p>\u200b\u5728\u200b\u672c\u8282\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u8be6\u7ec6\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u51c6\u5907\u200b\u6570\u636e\u200b\u5e76\u200b\u5728\u200b\u672c\u200b\u4ed3\u5e93\u200b\u7684\u200b\u4e0d\u540c\u200b\u4efb\u52a1\u200b\u4e2d\u200b\u91c7\u7528\u200b\u9002\u5f53\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u652f\u6301\u200b\u4e0d\u540c\u200b\u4efb\u52a1\u200b\u7684\u200b\u591a\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\u3002 \u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\uff0c\u200b\u6709\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u6570\u636e\u200b\u96c6\u200b\u7528\u4e8e\u200b\u8bad\u7ec3\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u6a21\u578b\u200b\uff1a</p> <ol> <li>\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b\u4e0b\u8f7d\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b</li> <li>\u200b\u5728\u200b\u4f7f\u7528\u200b\u4e0b\u8f7d\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u4e4b\u524d\u200b\u5bf9\u200b\u5176\u200b\u8fdb\u884c\u200b\u9884\u5904\u7406\u200b</li> </ol> <p>\u200b\u672c\u6587\u200b\u7684\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> <ul> <li>[\u200b\u6559\u7a0b\u200b 2\uff1a\u200b\u51c6\u5907\u200b\u6570\u636e\u200b\u96c6\u200b](#\u200b\u6559\u7a0b\u200b 2\uff1a\u200b\u51c6\u5907\u200b\u6570\u636e\u200b\u96c6\u200b)</li> <li>\u200b\u4e0b\u8f7d\u200b\u6570\u636e\u200b\u96c6\u200b</li> <li>\u200b\u51c6\u5907\u200b\u6570\u636e\u200b\u96c6\u200b</li> <li>MMagic\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u6982\u8ff0\u200b</li> </ul>"},{"location":"user_guides/dataset_prepare/#_1","title":"\u4e0b\u8f7d\u200b\u6570\u636e\u200b\u96c6","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u5efa\u8bae\u60a8\u200b\u4ece\u200b\u5b98\u65b9\u200b\u7684\u200b\u9875\u9762\u200b\u4e0b\u8f7d\u200b\u6570\u636e\u200b\u96c6\u200b\u3002 \u200b\u5927\u591a\u6570\u200b\u6570\u636e\u200b\u96c6\u5728\u200b\u4e0b\u8f7d\u200b\u540e\u200b\u90fd\u200b\u662f\u200b\u53ef\u7528\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u60a8\u200b\u53ea\u200b\u9700\u200b\u786e\u4fdd\u200b\u6587\u4ef6\u5939\u200b\u7ed3\u6784\u200b\u6b63\u786e\u200b\uff0c\u200b\u65e0\u9700\u200b\u8fdb\u4e00\u6b65\u200b\u51c6\u5907\u200b\u3002 \u200b\u4f8b\u5982\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4ece\u200b\u4e3b\u9875\u200b\u4e0b\u8f7d\u200b\uff0c\u200b\u6765\u200b\u7b80\u5355\u200b\u5730\u200b\u51c6\u5907\u200bVimeo90K-triplet\u200b\u6570\u636e\u200b\u96c6\u200b.</p>"},{"location":"user_guides/dataset_prepare/#_2","title":"\u51c6\u5907\u200b\u6570\u636e\u200b\u96c6","text":"<p>\u200b\u4e00\u4e9b\u200b\u6570\u636e\u200b\u96c6\u200b\u9700\u8981\u200b\u5728\u200b\u8bad\u7ec3\u200b\u6216\u200b\u6d4b\u8bd5\u200b\u4e4b\u524d\u200b\u8fdb\u884c\u200b\u9884\u5904\u7406\u200b\u3002\u200b\u6211\u4eec\u200b\u5728\u200b tools/dataset_converters\u200b\u4e2d\u200b\u652f\u6301\u200b\u8bb8\u591a\u200b\u7528\u6765\u200b\u51c6\u5907\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u811a\u672c\u200b\u3002 \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9075\u5faa\u200b\u6bcf\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u6559\u7a0b\u200b\u6765\u200b\u8fd0\u884c\u200b\u811a\u672c\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u6211\u4eec\u200b\u5efa\u8bae\u200b\u5c06\u200bDIV2K\u200b\u56fe\u50cf\u200b\u88c1\u526a\u200b\u4e3a\u5b50\u200b\u56fe\u50cf\u200b\u3002\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u811a\u672c\u200b\u6765\u200b\u51c6\u5907\u200b\u88c1\u526a\u200b\u7684\u200bDIV2K\u200b\u6570\u636e\u200b\u96c6\u200b\u3002\u200b\u53ef\u4ee5\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\uff1a</p> <pre><code>python tools/dataset_converters/div2k/preprocess_div2k_dataset.py --data-root ./data/DIV2K\n</code></pre>"},{"location":"user_guides/dataset_prepare/#mmagic","title":"MMagic\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u6982\u8ff0","text":"<p>\u200b\u6211\u4eec\u200b\u652f\u6301\u200b\u8be6\u7ec6\u200b\u7684\u200b\u6559\u7a0b\u200b\uff0c\u200b\u5e76\u200b\u6839\u636e\u200b\u4e0d\u540c\u200b\u7684\u200b\u4efb\u52a1\u200b\u8fdb\u884c\u200b\u62c6\u5206\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u67e5\u770b\u200b\u6211\u4eec\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u6982\u89c8\u200b\uff0c\u200b\u4e86\u89e3\u200b\u4e0d\u540c\u200b\u4efb\u52a1\u200b\u7684\u200b\u6570\u636e\u200b\u51c6\u5907\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5bf9\u200bMMagic\u200b\u4e2d\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u7ec6\u8282\u200b\u611f\u5174\u8da3\u200b\uff0c\u200b\u8bf7\u200b\u67e5\u770b\u200b\u8fdb\u9636\u200b\u6559\u7a0b\u200b\u3002</p>"},{"location":"user_guides/deploy/","title":"\u6559\u7a0b\u200b 8\uff1a\u200b\u6a21\u578b\u200b\u90e8\u7f72\u200b\u6307\u5357","text":"<p>MMDeploy \u200b\u662f\u200b OpenMMLab \u200b\u7684\u200b\u90e8\u7f72\u200b\u4ed3\u5e93\u200b\uff0c\u200b\u8d1f\u8d23\u200b\u5305\u62ec\u200b MMClassification\u3001MMDetection\u3001MMagic \u200b\u7b49\u200b\u5728\u5185\u200b\u7684\u200b\u5404\u200b\u7b97\u6cd5\u200b\u5e93\u200b\u7684\u200b\u90e8\u7f72\u200b\u5de5\u4f5c\u200b\u3002 \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u8fd9\u91cc\u200b\u83b7\u53d6\u200b MMDeploy \u200b\u5bf9\u200b MMClassification \u200b\u90e8\u7f72\u200b\u652f\u6301\u200b\u7684\u200b\u6700\u65b0\u200b\u6587\u6863\u200b\u3002</p> <p>\u200b\u672c\u6587\u200b\u7684\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> <ul> <li>\u200b\u5b89\u88c5\u200b</li> <li>\u200b\u6a21\u578b\u200b\u8f6c\u6362\u200b</li> <li>\u200b\u6a21\u578b\u200b\u89c4\u8303\u200b</li> <li>\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b</li> <li>\u200b\u540e\u200b\u7aef\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b</li> <li>SDK \u200b\u6a21\u578b\u200b\u63a8\u7406\u200b</li> <li>\u200b\u6a21\u578b\u200b\u652f\u6301\u200b\u5217\u8868\u200b</li> </ul>"},{"location":"user_guides/deploy/#_1","title":"\u5b89\u88c5","text":"<p>\u200b\u8bf7\u200b\u53c2\u8003\u200b\u6b64\u5904\u200b\u5b89\u88c5\u200b mmagic\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u6309\u7167\u200b\u8bf4\u660e\u200b\u5b89\u88c5\u200b mmdeploy\u3002</p> <pre><code>\u200b\u5982\u679c\u200b\u5b89\u88c5\u200b\u7684\u200b\u662f\u200b mmdeploy \u200b\u9884\u200b\u7f16\u8bd1\u200b\u5305\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4e5f\u200b\u8bf7\u200b\u901a\u8fc7\u200b 'git clone https://github.com/open-mmlab/mmdeploy.git --depth=1' \u200b\u4e0b\u8f7d\u200b mmdeploy \u200b\u6e90\u7801\u200b\u3002\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u5305\u542b\u200b\u4e86\u200b\u90e8\u7f72\u200b\u65f6\u8981\u200b\u7528\u5230\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\n</code></pre>"},{"location":"user_guides/deploy/#_2","title":"\u6a21\u578b\u200b\u8f6c\u6362","text":"<p>\u200b\u5047\u8bbe\u200b\u5728\u200b\u5b89\u88c5\u200b\u6b65\u9aa4\u200b\u4e2d\u200b\uff0cmmagic \u200b\u548c\u200b mmdeploy \u200b\u4ee3\u7801\u200b\u5e93\u200b\u5728\u200b\u540c\u7ea7\u200b\u76ee\u5f55\u200b\u4e0b\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5f53\u524d\u200b\u7684\u200b\u5de5\u4f5c\u200b\u76ee\u5f55\u200b\u4e3a\u200b mmagic \u200b\u7684\u200b\u6839\u76ee\u5f55\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4ee5\u200b ESRGAN \u200b\u6a21\u578b\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u6b64\u5904\u200b\u4e0b\u8f7d\u200b\u5bf9\u5e94\u200b\u7684\u200b checkpoint\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u4ee3\u7801\u200b\u5c06\u200b\u4e4b\u200b\u8f6c\u6362\u200b\u4e3a\u200b onnx \u200b\u6a21\u578b\u200b\uff1a</p> <pre><code>from mmdeploy.apis import torch2onnx\nfrom mmdeploy.backend.sdk.export_info import export2SDK\n\nimg = 'tests/data/image/face/000001.png'\nwork_dir = 'mmdeploy_models/mmagic/onnx'\nsave_file = 'end2end.onnx'\ndeploy_cfg = '../mmdeploy/configs/mmagic/super-resolution/super-resolution_onnxruntime_dynamic.py'\nmodel_cfg = 'configs/esrgan/esrgan_psnr-x4c64b23g32_1xb16-1000k_div2k.py'\nmodel_checkpoint = 'esrgan_psnr_x4c64b23g32_1x16_1000k_div2k_20200420-bf5c993c.pth'\ndevice = 'cpu'\n\n# 1. convert model to onnx\ntorch2onnx(img, work_dir, save_file, deploy_cfg, model_cfg,\n  model_checkpoint, device)\n\n# 2. extract pipeline info for inference by MMDeploy SDK\nexport2SDK(deploy_cfg, model_cfg, work_dir, pth=model_checkpoint, device=device)\n</code></pre> <p>\u200b\u8f6c\u6362\u200b\u7684\u200b\u5173\u952e\u200b\u4e4b\u4e00\u200b\u662f\u200b\u4f7f\u7528\u200b\u6b63\u786e\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u3002\u200b\u9879\u76ee\u200b\u4e2d\u200b\u5df2\u200b\u5185\u7f6e\u200b\u4e86\u200b\u5404\u540e\u200b\u7aef\u200b\u90e8\u7f72\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u3002 \u200b\u6587\u4ef6\u200b\u7684\u200b\u547d\u540d\u200b\u6a21\u5f0f\u200b\u662f\u200b\uff1a</p> <pre><code>{task}/{task}_{backend}-{precision}_{static | dynamic}_{shape}.py\n</code></pre> <p>\u200b\u5176\u4e2d\u200b\uff1a</p> <ul> <li>{task}: mmagic \u200b\u4e2d\u200b\u7684\u200b\u4efb\u52a1\u200b</li> <li>{backend}: \u200b\u63a8\u7406\u200b\u540e\u200b\u7aef\u200b\u540d\u79f0\u200b\u3002\u200b\u6bd4\u5982\u200b\uff0connxruntime\u3001tensorrt\u3001pplnn\u3001ncnn\u3001openvino\u3001coreml \u200b\u7b49\u7b49\u200b</li> <li>{precision}: \u200b\u63a8\u7406\u200b\u7cbe\u5ea6\u200b\u3002\u200b\u6bd4\u5982\u200b\uff0cfp16\u3001int8\u3002\u200b\u4e0d\u586b\u200b\u8868\u793a\u200b fp32</li> <li>{static | dynamic}: \u200b\u52a8\u6001\u200b\u3001\u200b\u9759\u6001\u200b shape</li> <li>{shape}: \u200b\u6a21\u578b\u200b\u8f93\u5165\u200b\u7684\u200b shape \u200b\u6216\u8005\u200b shape \u200b\u8303\u56f4\u200b</li> </ul> <p>\u200b\u5728\u200b\u4e0a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u628a\u200b <code>ESRGAN</code> \u200b\u8f6c\u4e3a\u200b\u5176\u4ed6\u200b\u540e\u200b\u7aef\u200b\u6a21\u578b\u200b\u3002\u200b\u6bd4\u5982\u200b\u4f7f\u7528\u200b<code>super-resolution_tensorrt-fp16_dynamic-32x32-512x512.py</code>\uff0c\u200b\u628a\u200b\u6a21\u578b\u200b\u8f6c\u4e3a\u200b tensorrt-fp16 \u200b\u6a21\u578b\u200b\u3002</p> <pre><code>\u200b\u5f53\u8f6c\u200b tensorrt \u200b\u6a21\u578b\u200b\u65f6\u200b, --device \u200b\u9700\u8981\u200b\u88ab\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b \"cuda\"\n</code></pre>"},{"location":"user_guides/deploy/#_3","title":"\u6a21\u578b\u200b\u89c4\u8303","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200b\u8f6c\u6362\u200b\u540e\u200b\u7684\u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6709\u200b\u5fc5\u8981\u200b\u4e86\u89e3\u200b\u8f6c\u6362\u200b\u7ed3\u679c\u200b\u7684\u200b\u7ed3\u6784\u200b\u3002 \u200b\u5b83\u200b\u5b58\u653e\u200b\u5728\u200b <code>--work-dir</code> \u200b\u6307\u5b9a\u200b\u7684\u200b\u8def\u200b\u8def\u5f84\u200b\u4e0b\u200b\u3002</p> <p>\u200b\u4e0a\u4f8b\u200b\u4e2d\u200b\u7684\u200b<code>mmdeploy_models/mmagic/onnx</code>\uff0c\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>mmdeploy_models/mmagic/onnx\n\u251c\u2500\u2500 deploy.json\n\u251c\u2500\u2500 detail.json\n\u251c\u2500\u2500 end2end.onnx\n\u2514\u2500\u2500 pipeline.json\n</code></pre> <p>\u200b\u91cd\u8981\u200b\u7684\u200b\u662f\u200b\uff1a</p> <ul> <li>end2end.onnx: \u200b\u63a8\u7406\u200b\u5f15\u64ce\u200b\u6587\u4ef6\u200b\u3002\u200b\u53ef\u7528\u200b ONNX Runtime \u200b\u63a8\u7406\u200b</li> <li>xxx.json:  mmdeploy SDK \u200b\u63a8\u7406\u200b\u6240\u200b\u9700\u200b\u7684\u200b meta \u200b\u4fe1\u606f\u200b</li> </ul> <p>\u200b\u6574\u4e2a\u200b\u6587\u4ef6\u5939\u200b\u88ab\u200b\u5b9a\u4e49\u200b\u4e3a\u200bmmdeploy SDK model\u3002\u200b\u6362\u8a00\u4e4b\u200b\uff0cmmdeploy SDK model\u200b\u65e2\u200b\u5305\u62ec\u200b\u63a8\u7406\u200b\u5f15\u64ce\u200b\uff0c\u200b\u4e5f\u200b\u5305\u62ec\u200b\u63a8\u7406\u200b meta \u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"user_guides/deploy/#_4","title":"\u6a21\u578b\u200b\u63a8\u7406","text":""},{"location":"user_guides/deploy/#_5","title":"\u540e\u200b\u7aef\u200b\u6a21\u578b\u200b\u63a8\u7406","text":"<p>\u200b\u4ee5\u200b\u4e0a\u8ff0\u200b\u6a21\u578b\u200b\u8f6c\u6362\u200b\u540e\u200b\u7684\u200b <code>end2end.onnx</code> \u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5982\u4e0b\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\uff1a</p> <pre><code>from mmdeploy.apis.utils import build_task_processor\nfrom mmdeploy.utils import get_input_shape, load_config\nimport torch\n\ndeploy_cfg = '../mmdeploy/configs/mmagic/super-resolution/super-resolution_onnxruntime_dynamic.py'\nmodel_cfg = 'configs/esrgan/esrgan_psnr-x4c64b23g32_1xb16-1000k_div2k.py'\ndevice = 'cpu'\nbackend_model = ['mmdeploy_models/mmagic/onnx/end2end.onnx']\nimage = 'tests/data/image/lq/baboon_x4.png'\n\n# read deploy_cfg and model_cfg\ndeploy_cfg, model_cfg = load_config(deploy_cfg, model_cfg)\n\n# build task and backend model\ntask_processor = build_task_processor(model_cfg, deploy_cfg, device)\nmodel = task_processor.build_backend_model(backend_model)\n\n# process input image\ninput_shape = get_input_shape(deploy_cfg)\nmodel_inputs, _ = task_processor.create_input(image, input_shape)\n\n# do model inference\nwith torch.no_grad():\n    result = model.test_step(model_inputs)\n\n# visualize results\ntask_processor.visualize(\n    image=image,\n    model=model,\n    result=result[0],\n    window_name='visualize',\n    output_file='output_restorer.bmp')\n</code></pre>"},{"location":"user_guides/deploy/#sdk","title":"SDK \u200b\u6a21\u578b\u200b\u63a8\u7406","text":"<p>\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u5982\u4e0b\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5bf9\u200b SDK model \u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\uff1a</p> <pre><code>from mmdeploy_python import Restorer\nimport cv2\n\nimg = cv2.imread('tests/data/image/lq/baboon_x4.png')\n\n# create a predictor\nrestorer = Restorer(model_path='mmdeploy_models/mmagic/onnx', device_name='cpu', device_id=0)\n# perform inference\nresult = restorer(img)\n\n# visualize inference result\ncv2.imwrite('output_restorer.bmp', result)\n</code></pre> <p>\u200b\u9664\u4e86\u200bpython API\uff0cmmdeploy SDK \u200b\u8fd8\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u8bf8\u5982\u200b C\u3001C++\u3001C#\u3001Java\u200b\u7b49\u200b\u591a\u200b\u8bed\u8a00\u200b\u63a5\u53e3\u200b\u3002 \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u6837\u4f8b\u200b\u5b66\u4e60\u200b\u5176\u4ed6\u200b\u8bed\u8a00\u200b\u63a5\u53e3\u200b\u7684\u200b\u4f7f\u7528\u200b\u65b9\u6cd5\u200b\u3002</p>"},{"location":"user_guides/deploy/#_6","title":"\u6a21\u578b\u200b\u652f\u6301\u200b\u5217\u8868","text":"<p>\u200b\u8bf7\u200b\u53c2\u8003\u200b\u8fd9\u91cc\u200b</p>"},{"location":"user_guides/inference/","title":"\u6559\u7a0b\u200b3\uff1a\u200b\u4f7f\u7528\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u63a8\u7406","text":"<p>MMagic \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u9ad8\u7ea7\u200bAPI\uff0c\u200b\u8ba9\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5730\u200b\u5728\u200b\u81ea\u5df1\u200b\u7684\u200b\u56fe\u50cf\u200b\u6216\u200b\u89c6\u9891\u200b\u4e0a\u200b\u4f7f\u7528\u200b\u6700\u200b\u5148\u8fdb\u200b\u7684\u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\u3002 \u200b\u5728\u200b\u65b0\u200b\u7684\u200bAPI\u200b\u4e2d\u200b\uff0c\u200b\u4ec5\u200b\u9700\u200b\u4e24\u884c\u200b\u4ee3\u7801\u200b\u5373\u53ef\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\u3002</p> <pre><code>from mmagic.apis import MMagicInferencer\n\n# \u200b\u521b\u5efa\u200bMMagicInferencer\u200b\u5b9e\u4f8b\u200b\neditor = MMagicInferencer('pix2pix')\n# \u200b\u63a8\u7406\u200b\u56fe\u7247\u200b.\u200b\u9700\u8981\u200b\u8f93\u5165\u200b\u56fe\u7247\u200b\u8def\u5f84\u200b\u4e0e\u200b\u8f93\u51fa\u200b\u56fe\u7247\u200b\u8def\u5f84\u200b\nresults = editor.infer(img='../resources/input/translation/gt_mask_0.png', result_out_dir='../resources/output/translation/tutorial_translation_pix2pix_res.jpg')\n</code></pre> <p>MMagic\u200b\u652f\u6301\u200b\u5404\u79cd\u200b\u57fa\u7840\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\uff0c\u200b\u5305\u62ec\u200b\u65e0\u6761\u4ef6\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b\uff08GANs\uff09\u3001\u200b\u6761\u4ef6\u200bGANs\u3001\u200b\u6269\u6563\u200b\u6a21\u578b\u200b\u7b49\u200b\u3002 MMagic \u200b\u540c\u6837\u200b\u652f\u6301\u200b\u591a\u79cd\u200b\u5e94\u7528\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a\u200b\u6587\u751f\u200b\u56fe\u200b\u3001\u200b\u56fe\u751f\u200b\u56fe\u200b\u7684\u200b\u8f6c\u6362\u200b\u30013D\u200b\u611f\u77e5\u200b\u751f\u6210\u200b\u3001\u200b\u56fe\u50cf\u200b\u8d85\u5206\u200b\u3001\u200b\u89c6\u9891\u200b\u8d85\u5206\u200b\u3001\u200b\u89c6\u9891\u200b\u5e27\u200b\u63d2\u503c\u200b\u3001\u200b\u56fe\u50cf\u200b\u4fee\u8865\u200b\u3001\u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u3001\u200b\u56fe\u50cf\u200b\u6062\u590d\u200b\u3001\u200b\u56fe\u50cf\u200b\u4e0a\u200b\u8272\u200b\u3001\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b\u7b49\u200b\u3002 \u200b\u5728\u200b\u672c\u8282\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u8be6\u7ec6\u200b\u8bf4\u660e\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\u3002</p> <ul> <li>\u200b\u6559\u7a0b\u200b3: \u200b\u4f7f\u7528\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b</li> <li>\u200b\u51c6\u5907\u200b\u4e00\u4e9b\u200b\u56fe\u7247\u200b\u6216\u8005\u200b\u89c6\u9891\u200b\u7528\u4e8e\u200b\u63a8\u7406\u200b</li> <li>\u200b\u751f\u6210\u200b\u6a21\u578b\u200b<ul> <li>\u200b\u65e0\u6761\u4ef6\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b (GANs)</li> <li>\u200b\u6761\u4ef6\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b(GANs)</li> <li>\u200b\u6269\u6563\u200b\u6a21\u578b\u200b</li> </ul> </li> <li>\u200b\u5e94\u7528\u200b<ul> <li>\u200b\u6587\u751f\u200b\u56fe\u200b</li> <li>\u200b\u56fe\u751f\u200b\u56fe\u200b\u7684\u200b\u8f6c\u6362\u200b</li> <li>3D\u200b\u611f\u77e5\u200b\u751f\u6210\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u8d85\u5206\u200b</li> <li>\u200b\u89c6\u9891\u200b\u8d85\u5206\u200b</li> <li>\u200b\u89c6\u9891\u200b\u5e27\u200b\u63d2\u503c\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u4fee\u8865\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u6062\u590d\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u4e0a\u200b\u8272\u200b</li> </ul> </li> <li>\u200b\u4ee5\u524d\u200b\u7684\u200b\u7248\u672c\u200b</li> </ul>"},{"location":"user_guides/inference/#_1","title":"\u51c6\u5907\u200b\u4e00\u4e9b\u200b\u56fe\u7247\u200b\u6216\u8005\u200b\u89c6\u9891\u200b\u7528\u4e8e\u200b\u63a8\u7406","text":"<p>\u200b\u8bf7\u200b\u53c2\u8003\u200b\u6211\u4eec\u200b\u7684\u200b\u6559\u7a0b\u200b\u83b7\u53d6\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u3002</p>"},{"location":"user_guides/inference/#_2","title":"\u751f\u6210\u200b\u6a21\u578b","text":""},{"location":"user_guides/inference/#gans","title":"\u65e0\u6761\u4ef6\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b\uff08GANs\uff09","text":"<p>MMagic\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u7528\u4e8e\u200b\u4f7f\u7528\u200b\u65e0\u6761\u4ef6\u200bGANs\u200b\u8fdb\u884c\u200b\u56fe\u50cf\u200b\u91c7\u6837\u200b\u7684\u200b\u9ad8\u7ea7\u200bAPI\u3002\u200b\u65e0\u6761\u4ef6\u200bGAN\u200b\u6a21\u578b\u200b\u4e0d\u200b\u9700\u8981\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u8f93\u51fa\u200b\u4e00\u5f20\u200b\u56fe\u50cf\u200b\u3002\u200b\u6211\u4eec\u200b\u4ee5\u200b'styleganv1'\u200b\u4e3a\u4f8b\u200b\u3002</p> <pre><code>import mmcv\nimport matplotlib.pyplot as plt\nfrom mmagic.apis import MMagicInferencer\n\n# \u200b\u521b\u5efa\u200bMMagicInferencer\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u5e76\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\nresult_out_dir = './resources/output/unconditional/tutorial_unconditional_styleganv1_res.png'\neditor = MMagicInferencer('styleganv1')\nresults = editor.infer(result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u786e\u5b9e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u4e3a\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u66f4\u200b\u53cb\u597d\u200b\u7684\u200b\u6f14\u793a\u200b\u811a\u672c\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200bdemo/mmagic_inference_demo.py\uff1a</p> <pre><code>python demo/mmagic_inference_demo.py \\\n        --model-name styleganv1 \\\n        --result-out-dir demo_unconditional_styleganv1_res.jpg\n</code></pre>"},{"location":"user_guides/inference/#gans_1","title":"\u6761\u4ef6\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b(GANs)","text":"<p>MMagic\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4f7f\u7528\u200b\u6761\u4ef6\u200bGAN\u200b\u8fdb\u884c\u200b\u56fe\u50cf\u200b\u91c7\u6837\u200b\u7684\u200b\u9ad8\u7ea7\u200bAPI\u3002\u200b\u6761\u4ef6\u200bGAN\u200b\u6a21\u578b\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u6807\u7b7e\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u8f93\u51fa\u200b\u4e00\u5f20\u200b\u56fe\u50cf\u200b\u3002\u200b\u6211\u4eec\u200b\u4ee5\u200b'biggan'\u200b\u4e3a\u4f8b\u200b\u3002</p> <pre><code>import mmcv\nimport matplotlib.pyplot as plt\nfrom mmagic.apis import MMagicInferencer\n\n# \u200b\u521b\u5efa\u200bMMagicInferencer\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u5e76\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\nresult_out_dir = './resources/output/conditional/tutorial_conditinal_biggan_res.jpg'\neditor = MMagicInferencer('biggan', model_setting=1)\nresults = editor.infer(label=1, result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u4e3a\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u66f4\u200b\u53cb\u597d\u200b\u7684\u200b\u6f14\u793a\u200b\u811a\u672c\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200bdemo/mmagic_inference_demo.py\uff1a</p> <pre><code>python demo/mmagic_inference_demo.py \\\n        --model-name biggan \\\n        --model-setting 1 \\\n        --label 1 \\\n        --result-out-dir demo_conditional_biggan_res.jpg\n</code></pre>"},{"location":"user_guides/inference/#_3","title":"\u6269\u6563\u200b\u6a21\u578b","text":"<p>MMagic\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4f7f\u7528\u200b\u6269\u6563\u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u56fe\u50cf\u200b\u91c7\u6837\u200b\u7684\u200b\u9ad8\u7ea7\u200bAPI\u3002</p> <pre><code>import mmcv\nimport matplotlib.pyplot as plt\nfrom mmagic.apis import MMagicInferencer\n\n# \u200b\u521b\u5efa\u200bMMagicInferencer\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u5e76\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\neditor = MMagicInferencer(model_name='stable_diffusion')\ntext_prompts = 'A panda is having dinner at KFC'\nresult_out_dir = './resources/output/text2image/tutorial_text2image_sd_res.png'\neditor.infer(text=text_prompts, result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200bdemo/mmagic_inference_demo.py</p> <pre><code>python demo/mmagic_inference_demo.py \\\n        --model-name stable_diffusion \\\n        --text \"A panda is having dinner at KFC\" \\\n        --result-out-dir demo_text2image_stable_diffusion_res.png\n</code></pre>"},{"location":"user_guides/inference/#_4","title":"\u5e94\u7528","text":""},{"location":"user_guides/inference/#_5","title":"\u6587\u751f\u200b\u56fe","text":"<p>\u200b\u6587\u751f\u200b\u56fe\u200b\u6a21\u578b\u200b\u5c06\u200b\u6587\u672c\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u8f93\u51fa\u200b\u4e00\u5f20\u200b\u56fe\u7247\u200b\u3002\u200b\u6211\u4eec\u200b\u4ee5\u200b'controlnet-canny'\u200b\u4e3a\u4f8b\u200b\u3002</p> <pre><code>import cv2\nimport numpy as np\nimport mmcv\nfrom mmengine import Config\nfrom PIL import Image\n\nfrom mmagic.registry import MODELS\nfrom mmagic.utils import register_all_modules\n\nregister_all_modules()\n\ncfg = Config.fromfile('configs/controlnet/controlnet-canny.py')\ncontrolnet = MODELS.build(cfg.model).cuda()\n\ncontrol_url = 'https://user-images.githubusercontent.com/28132635/230288866-99603172-04cb-47b3-8adb-d1aa532d1d2c.jpg'\ncontrol_img = mmcv.imread(control_url)\ncontrol = cv2.Canny(control_img, 100, 200)\ncontrol = control[:, :, None]\ncontrol = np.concatenate([control] * 3, axis=2)\ncontrol = Image.fromarray(control)\n\nprompt = 'Room with blue walls and a yellow ceiling.'\n\noutput_dict = controlnet.infer(prompt, control=control)\nsamples = output_dict['samples']\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200bdemo/mmagic_inference_demo.py</p> <pre><code>python demo/mmagic_inference_demo.py \\\n        --model-name controlnet \\\n        --model-setting 1 \\\n        --text \"Room with blue walls and a yellow ceiling.\" \\\n        --control 'https://user-images.githubusercontent.com/28132635/230297033-4f5c32df-365c-4cf4-8e4f-1b76a4cbb0b7.png' \\\n        --result-out-dir demo_text2image_controlnet_canny_res.png\n</code></pre>"},{"location":"user_guides/inference/#_6","title":"\u56fe\u751f\u200b\u56fe\u200b\u7684\u200b\u8f6c\u6362","text":"<p>MMagic\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4f7f\u7528\u200b\u56fe\u50cf\u200b\u7ffb\u8bd1\u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u56fe\u50cf\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u9ad8\u7ea7\u200bAPI\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u6784\u5efa\u200bPix2Pix\u200b\u5e76\u200b\u83b7\u53d6\u200b\u7ffb\u8bd1\u200b\u56fe\u50cf\u200b\u7684\u200b\u793a\u4f8b\u200b\u3002</p> <pre><code>import mmcv\nimport matplotlib.pyplot as plt\nfrom mmagic.apis import MMagicInferencer\n\n# Create a MMagicInferencer instance and infer\neditor = MMagicInferencer('pix2pix')\nresults = editor.infer(img=img_path, result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200bdemo/mmagic_inference_demo.py</p> <pre><code>python demo/mmagic_inference_demo.py \\\n        --model-name pix2pix \\\n        --img ${IMAGE_PATH} \\\n        --result-out-dir ${SAVE_PATH}\n</code></pre>"},{"location":"user_guides/inference/#3d","title":"3D\u200b\u611f\u77e5\u200b\u751f\u6210","text":"<pre><code>import mmcv\nimport matplotlib.pyplot as plt\nfrom mmagic.apis import MMagicInferencer\n\n# Create a MMagicInferencer instance and infer\nresult_out_dir = './resources/output/eg3d-output'\neditor = MMagicInferencer('eg3d')\nresults = editor.infer(result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200bdemo/mmagic_inference_demo.py</p> <pre><code>python demo/mmagic_inference_demo.py \\\n    --model-name eg3d \\\n    --result-out-dir ./resources/output/eg3d-output\n</code></pre>"},{"location":"user_guides/inference/#_7","title":"\u56fe\u50cf\u200b\u8d85\u5206","text":"<p>\u200b\u56fe\u50cf\u200b\u8d85\u200b\u5206\u8fa8\u7387\u200b\u6a21\u578b\u200b\u63a5\u53d7\u200b\u4e00\u5f20\u200b\u56fe\u50cf\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u8f93\u51fa\u200b\u4e00\u5f20\u200b\u9ad8\u5206\u8fa8\u7387\u200b\u56fe\u50cf\u200b\u3002\u200b\u6211\u4eec\u200b\u4ee5\u200b 'esrgan' \u200b\u4e3a\u4f8b\u200b\u3002</p> <pre><code>import mmcv\nimport matplotlib.pyplot as plt\nfrom mmagic.apis import MMagicInferencer\n\n# Create a MMagicInferencer instance and infer\nimg = './resources/input/restoration/0901x2.png'\nresult_out_dir = './resources/output/restoration/tutorial_restoration_esrgan_res.png'\neditor = MMagicInferencer('esrgan')\nresults = editor.infer(img=img, result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200bdemo/mmagic_inference_demo.py</p> <pre><code>python demo/mmagic_inference_demo.py \\\n        --model-name esrgan \\\n        --img ${IMAGE_PATH} \\\n        --result-out-dir ${SAVE_PATH}\n</code></pre>"},{"location":"user_guides/inference/#_8","title":"\u89c6\u9891\u200b\u8d85\u5206","text":"<pre><code>import os\nfrom mmagic.apis import MMagicInferencer\nfrom mmengine import mkdir_or_exist\n\n# Create a MMagicInferencer instance and infer\nvideo = './resources/input/video_interpolation/b-3LLDhc4EU_000000_000010.mp4'\nresult_out_dir = './resources/output/video_super_resolution/tutorial_video_super_resolution_basicvsr_res.mp4'\nmkdir_or_exist(os.path.dirname(result_out_dir))\neditor = MMagicInferencer('basicvsr')\nresults = editor.infer(video=video, result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200bdemo/mmagic_inference_demo.py</p> <pre><code>python demo/mmagic_inference_demo.py \\\n        --model-name basicvsr \\\n        --video ./resources/input/video_restoration/QUuC4vJs_000084_000094_400x320.mp4 \\\n        --result-out-dir ./resources/output/video_restoration/demo_video_restoration_basicvsr_res.mp4\n</code></pre>"},{"location":"user_guides/inference/#_9","title":"\u89c6\u9891\u200b\u5e27\u200b\u63d2\u503c","text":"<p>\u200b\u89c6\u9891\u200b\u63d2\u503c\u200b\u6a21\u578b\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u89c6\u9891\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u8f93\u51fa\u200b\u4e00\u4e2a\u200b\u63d2\u503c\u200b\u540e\u200b\u7684\u200b\u89c6\u9891\u200b\u3002\u200b\u6211\u4eec\u200b\u4ee5\u200b 'flavr' \u200b\u4e3a\u4f8b\u200b\u3002</p> <pre><code>import os\nfrom mmagic.apis import MMagicInferencer\nfrom mmengine import mkdir_or_exist\n\n# Create a MMagicInferencer instance and infer\nvideo = './resources/input/video_interpolation/b-3LLDhc4EU_000000_000010.mp4'\nresult_out_dir = './resources/output/video_interpolation/tutorial_video_interpolation_flavr_res.mp4'\nmkdir_or_exist(os.path.dirname(result_out_dir))\neditor = MMagicInferencer('flavr')\nresults = editor.infer(video=video, result_out_dir=result_out_dir)\n</code></pre>"},{"location":"user_guides/inference/#_10","title":"\u56fe\u50cf\u200b\u4fee\u8865","text":"<p>\u200b\u4fee\u590d\u200b\u6a21\u578b\u200b\u63a5\u53d7\u200b\u4e00\u5bf9\u200b\u5c4f\u853d\u200b\u56fe\u50cf\u200b\u548c\u200b\u5c4f\u853d\u200b\u8499\u7248\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u8f93\u51fa\u200b\u4e00\u4e2a\u200b\u4fee\u590d\u200b\u540e\u200b\u7684\u200b\u56fe\u50cf\u200b\u3002\u200b\u6211\u4eec\u200b\u4ee5\u200b 'global_local' \u200b\u4e3a\u4f8b\u200b\u3002</p> <pre><code>import mmcv\nimport matplotlib.pyplot as plt\nfrom mmagic.apis import MMagicInferencer\n\nimg = './resources/input/matting/GT05.jpg'\ntrimap = './resources/input/matting/GT05_trimap.jpg'\n\n# \u200b\u521b\u5efa\u200bMMagicInferencer\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u5e76\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\nresult_out_dir = './resources/output/matting/tutorial_matting_gca_res.png'\neditor = MMagicInferencer('gca')\nresults = editor.infer(img=img, trimap=trimap, result_out_dir=result_out_dir)\n</code></pre>"},{"location":"user_guides/inference/#_11","title":"\u56fe\u50cf\u200b\u62a0\u200b\u56fe","text":"<p>\u200b\u62a0\u200b\u56fe\u200b\u6a21\u578b\u200b\u63a5\u53d7\u200b\u4e00\u5bf9\u200b\u56fe\u50cf\u200b\u548c\u200b\u4fee\u526a\u200b\u6620\u5c04\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u8f93\u51fa\u200b\u4e00\u4e2a\u200b alpha \u200b\u56fe\u50cf\u200b\u3002\u200b\u6211\u4eec\u200b\u4ee5\u200b 'gca' \u200b\u4e3a\u4f8b\u200b\u3002</p> <pre><code>import mmcv\nimport matplotlib.pyplot as plt\nfrom mmagic.apis import MMagicInferencer\n\nimg = './resources/input/matting/GT05.jpg'\ntrimap = './resources/input/matting/GT05_trimap.jpg'\n\n# \u200b\u521b\u5efa\u200bMMagicInferencer\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u5e76\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\nresult_out_dir = './resources/output/matting/tutorial_matting_gca_res.png'\neditor = MMagicInferencer('gca')\nresults = editor.infer(img=img, trimap=trimap, result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200bdemo/mmagic_inference_demo.py</p> <pre><code>python demo/mmagic_inference_demo.py \\\n        --model-name gca  \\\n        --img ./resources/input/matting/GT05.jpg \\\n        --trimap ./resources/input/matting/GT05_trimap.jpg \\\n        --result-out-dir ./resources/output/matting/demo_matting_gca_res.png\n</code></pre>"},{"location":"user_guides/inference/#_12","title":"\u56fe\u50cf\u200b\u6062\u590d","text":"<pre><code>import mmcv\nimport matplotlib.pyplot as plt\nfrom mmagic.apis import MMagicInferencer\n\n# Create a MMagicInferencer instance and infer\nimg = './resources/input/restoration/0901x2.png'\nresult_out_dir = './resources/output/restoration/tutorial_restoration_nafnet_res.png'\neditor = MMagicInferencer('nafnet')\nresults = editor.infer(img=img, result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200bdemo/mmagic_inference_demo.py</p> <pre><code>python demo/mmagic_inference_demo.py \\\n        --model-name nafnet \\\n        --img ./resources/input/restoration/0901x2.png \\\n        --result-out-dir ./resources/output/restoration/demo_restoration_nafnet_res.png\n</code></pre>"},{"location":"user_guides/inference/#_13","title":"\u56fe\u50cf\u200b\u4e0a\u200b\u8272","text":"<pre><code>import mmcv\nimport matplotlib.pyplot as plt\nfrom mmagic.apis import MMagicInferencer\n\n# Create a MMagicInferencer instance and infer\nimg = 'https://github-production-user-asset-6210df.s3.amazonaws.com/49083766/245713512-de973677-2be8-4915-911f-fab90bb17c40.jpg'\nresult_out_dir = './resources/output/colorization/tutorial_colorization_res.png'\neditor = MMagicInferencer('inst_colorization')\nresults = editor.infer(img=img, result_out_dir=result_out_dir)\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200bdemo/mmagic_inference_demo.py</p> <pre><code>python demo/mmagic_inference_demo.py \\\n        --model-name inst_colorization \\\n        --img https://github-production-user-asset-6210df.s3.amazonaws.com/49083766/245713512-de973677-2be8-4915-911f-fab90bb17c40.jpg \\\n        --result-out-dir demo_colorization_res.png\n</code></pre>"},{"location":"user_guides/inference/#_14","title":"\u4ee5\u524d\u200b\u7684\u200b\u7248\u672c","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4f7f\u7528\u200b\u5df2\u5f03\u200b\u7528\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200bMMagic v1.0.0rc7\u200b\u5e76\u200b\u53c2\u8003\u200b\u65e7\u200b\u6559\u7a0b\u200b\u3002</p>"},{"location":"user_guides/metrics/","title":"\u6559\u7a0b\u200b 5\uff1a\u200b\u4f7f\u7528\u200b\u8bc4\u4ef7\u200b\u6307\u6807","text":"<p>MMagic\u200b\u652f\u6301\u200b17\u200b\u4e2a\u200b\u6307\u6807\u200b\u4ee5\u200b\u8bc4\u4f30\u200b\u6a21\u578b\u200b\u8d28\u91cf\u200b\u3002</p> <p>\u200b\u6709\u5173\u200b\u7528\u6cd5\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200bMMagic\u200b\u4e2d\u200b\u7684\u200b\u8bad\u7ec3\u200b\u4e0e\u200b\u6d4b\u8bd5\u200b\u3002</p> <p>\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u9010\u4e2a\u200b\u4ecb\u7ecd\u200b\u4e0d\u540c\u200b\u6307\u6807\u200b\u7684\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u672c\u6587\u200b\u7684\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b:</p> <ol> <li>MAE</li> <li>MSE</li> <li>PSNR</li> <li>SNR</li> <li>SSIM</li> <li>NIQE</li> <li>SAD</li> <li>MattingMSE</li> <li>GradientError</li> <li>ConnectivityError</li> <li>FID and TransFID</li> <li>IS and TransIS</li> <li>Precision and Recall</li> <li>PPL</li> <li>SWD</li> <li>MS-SSIM</li> <li>Equivarience</li> </ol>"},{"location":"user_guides/metrics/#mae","title":"MAE","text":"<p>MAE\u200b\u662f\u200b\u56fe\u50cf\u200b\u7684\u200b\u5e73\u5747\u200b\u7edd\u5bf9\u8bef\u5dee\u200b\u3002 \u200b\u8981\u200b\u4f7f\u7528\u200bMAE\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>val_evaluator = [\n    dict(type='MAE'),\n]\n</code></pre>"},{"location":"user_guides/metrics/#mse","title":"MSE","text":"<p>MSE\u200b\u662f\u200b\u56fe\u50cf\u200b\u7684\u200b\u5747\u200b\u65b9\u200b\u8bef\u5dee\u200b\u3002 \u200b\u8981\u200b\u4f7f\u7528\u200bMSE\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>val_evaluator = [\n    dict(type='MSE'),\n]\n</code></pre>"},{"location":"user_guides/metrics/#psnr","title":"PSNR","text":"<p>PSNR\u200b\u662f\u200b\u5cf0\u503c\u200b\u4fe1\u566a\u6bd4\u200b\u3002\u200b\u6211\u4eec\u200b\u7684\u200b\u5b9e\u73b0\u200b\u65b9\u6cd5\u200b\u6765\u81ea\u200bhttps://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio\u3002 \u200b\u8981\u200b\u4f7f\u7528\u200bPSNR\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>val_evaluator = [\n    dict(type='PSNR'),\n]\n</code></pre>"},{"location":"user_guides/metrics/#snr","title":"SNR","text":"<p>SNR\u200b\u662f\u200b\u4fe1\u566a\u6bd4\u200b\u3002\u200b\u6211\u4eec\u200b\u7684\u200b\u5b9e\u73b0\u200b\u65b9\u6cd5\u200b\u6765\u81ea\u200b https://en.wikipedia.org/wiki/Signal-to-noise_ratio\u3002 \u200b\u8981\u200b\u4f7f\u7528\u200bSNR\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>val_evaluator = [\n    dict(type='SNR'),\n]\n</code></pre>"},{"location":"user_guides/metrics/#ssim","title":"SSIM","text":"<p>SSIM\u200b\u662f\u200b\u56fe\u50cf\u200b\u7684\u200b\u7ed3\u6784\u200b\u76f8\u4f3c\u200b\u5ea6\u200b\uff0c\u200b\u5728\u200b\u56fe\u50cf\u200b\u8d28\u91cf\u200b\u8bc4\u4f30\u200b:\u200b\u4ece\u200b\u9519\u8bef\u200b\u53ef\u89c1\u200b\u6027\u5230\u200b\u7ed3\u6784\u200b\u76f8\u4f3c\u200b\u5ea6\u4e2d\u200b\u63d0\u51fa\u200b\u3002\u200b\u6211\u4eec\u200b\u5b9e\u73b0\u200b\u7684\u200b\u7ed3\u679c\u200b\u4e0e\u200bhttps://ece.uwaterloo.ca/~z70wang/research/ssim/\u200b\u5b98\u65b9\u200b\u53d1\u5e03\u200b\u7684\u200bMATLAB\u200b\u4ee3\u7801\u200b\u76f8\u540c\u200b\u3002 \u200b\u8981\u200b\u4f7f\u7528\u200bSSIM\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>val_evaluator = [\n    dict(type='SSIM'),\n]\n</code></pre>"},{"location":"user_guides/metrics/#niqe","title":"NIQE","text":"<p>NIQE\u200b\u662f\u200b\u81ea\u7136\u200b\u56fe\u50cf\u200b\u8d28\u91cf\u200b\u8bc4\u4f30\u200b\u6307\u6807\u200b\uff0c\u200b\u5728\u200b\u5236\u4f5c\u200b'\u200b\u5b8c\u5168\u200b\u76f2\u200b'\u200b\u56fe\u50cf\u200b\u8d28\u91cf\u200b\u5206\u6790\u4eea\u200b\u4e2d\u200b\u63d0\u51fa\u200b\u3002\u200b\u6211\u4eec\u200b\u7684\u200b\u5b9e\u73b0\u200b\u53ef\u4ee5\u200b\u4ea7\u751f\u200b\u51e0\u4e4e\u200b\u4e0e\u200b\u5b98\u65b9\u200bMATLAB\u200b\u4ee3\u7801\u200b\u76f8\u540c\u200b\u7684\u200b\u7ed3\u679c\u200b:http://live.ece.utexas.edu/research/quality/niqe_release.zip\u3002 \u200b\u8981\u200b\u4f7f\u7528\u200bNIQE\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>val_evaluator = [\n    dict(type='NIQE'),\n]\n</code></pre>"},{"location":"user_guides/metrics/#sad","title":"SAD","text":"<p>SAD\u200b\u662f\u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u7684\u200b\u7edd\u5bf9\u8bef\u5dee\u200b\u548c\u200b\u3002\u200b\u8be5\u200b\u6307\u6807\u200b\u8ba1\u7b97\u200b\u6bcf\u4e2a\u200b\u50cf\u7d20\u200b\u7684\u200b\u7edd\u5bf9\u200b\u5dee\u200b\u548c\u200b\u6240\u6709\u200b\u50cf\u7d20\u200b\u7684\u200b\u603b\u548c\u200b\u3002 \u200b\u8981\u200b\u4f7f\u7528\u200bSAD\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>val_evaluator = [\n    dict(type='SAD'),\n]\n</code></pre>"},{"location":"user_guides/metrics/#mattingmse","title":"MattingMSE","text":"<p>MattingMSE\u200b\u662f\u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u7684\u200b\u5747\u200b\u65b9\u200b\u8bef\u5dee\u200b\u3002 \u200b\u8981\u200b\u4f7f\u7528\u200bMattingMSE\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>val_evaluator = [\n    dict(type='MattingMSE'),\n]\n</code></pre>"},{"location":"user_guides/metrics/#gradienterror","title":"GradientError","text":"<p>GradientError\u200b\u662f\u200b\u7528\u4e8e\u200b\u8bc4\u4f30\u200balpha matte\u200b\u9884\u6d4b\u200b\u7684\u200b\u68af\u5ea6\u200b\u8bef\u5dee\u200b\u3002 \u200b\u8981\u200b\u4f7f\u7528\u200bGradientError\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>val_evaluator = [\n    dict(type='GradientError'),\n]\n</code></pre>"},{"location":"user_guides/metrics/#connectivityerror","title":"ConnectivityError","text":"<p>ConnectivityError\u200b\u662f\u200b\u7528\u4e8e\u200b\u8bc4\u4f30\u200balpha matte\u200b\u9884\u6d4b\u200b\u7684\u200b\u8fde\u901a\u6027\u200b\u8bef\u5dee\u200b\u3002 \u200b\u8981\u200b\u4f7f\u7528\u200bConnectivityError\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>val_evaluator = [\n    dict(type='ConnectivityError'),\n]\n</code></pre>"},{"location":"user_guides/metrics/#fid-transfid","title":"FID \u200b\u548c\u200b TransFID","text":"<p>Fr\u00e9chet\u200b\u521d\u59cb\u200b\u8ddd\u79bb\u200b\u662f\u200b\u4e24\u4e2a\u200b\u56fe\u50cf\u200b\u6570\u636e\u200b\u96c6\u200b\u4e4b\u95f4\u200b\u76f8\u4f3c\u200b\u5ea6\u200b\u7684\u200b\u5ea6\u91cf\u200b\u3002\u200b\u5b83\u200b\u88ab\u200b\u8bc1\u660e\u200b\u4e0e\u200b\u4eba\u7c7b\u200b\u5bf9\u200b\u89c6\u89c9\u200b\u8d28\u91cf\u200b\u7684\u200b\u5224\u65ad\u200b\u6709\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u76f8\u5173\u6027\u200b\uff0c\u200b\u6700\u200b\u5e38\u7528\u200b\u4e8e\u200b\u8bc4\u4f30\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b\u6837\u672c\u200b\u7684\u200b\u8d28\u91cf\u200b\u3002FID\u200b\u662f\u200b\u901a\u8fc7\u200b\u8ba1\u7b97\u200b\u4e24\u4e2a\u200b\u9ad8\u65af\u200b\u51fd\u6570\u200b\u4e4b\u95f4\u200b\u7684\u200bFr\u00e9chet\u200b\u8ddd\u79bb\u200b\u6765\u200b\u8ba1\u7b97\u200b\u7684\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u9ad8\u65af\u200b\u51fd\u6570\u200b\u9002\u5408\u200b\u4e8e\u200bInception\u200b\u7f51\u7edc\u200b\u7684\u200b\u7279\u5f81\u200b\u8868\u793a\u200b\u3002</p> <p>\u200b\u5728\u200b<code>MMagic</code>\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e24\u4e2a\u200b\u7248\u672c\u200b\u7684\u200bFID\u200b\u8ba1\u7b97\u200b\u3002\u200b\u4e00\u4e2a\u200b\u662f\u200b\u5e38\u7528\u200b\u7684\u200bPyTorch\u200b\u7248\u672c\u200b\uff0c\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200bStyleGAN\u3002\u200b\u540c\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u5728\u200bStyleGAN2-FFHQ1024\u200b\u6a21\u578b\u200b\u4e2d\u200b\u6bd4\u8f83\u200b\u4e86\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u5b9e\u73b0\u200b\u4e4b\u95f4\u200b\u7684\u200b\u5dee\u5f02\u200b(\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd9\u91cc\u200b\u627e\u5230\u200b[https://github.com/open-mmlab/mmagic/blob/main/configs/styleganv2/README.md])\u3002\u200b\u5e78\u8fd0\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b\u53ea\u662f\u200b\u7565\u6709\u4e0d\u540c\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u6211\u4eec\u200b\u5efa\u8bae\u200b\u7528\u6237\u200b\u91c7\u7528\u200b\u66f4\u200b\u65b9\u4fbf\u200b\u7684\u200bPyTorch\u200b\u7248\u672c\u200b\u3002</p> <p>\u200b\u5173\u4e8e\u200bPyTorch\u200b\u7248\u672c\u200b\u548c\u200bTero\u200b\u7248\u672c\u200b: \u200b\u5e38\u7528\u200b\u7684\u200bPyTorch\u200b\u7248\u672c\u200b\u91c7\u7528\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200bInceptionV3\u200b\u7f51\u7edc\u200b\u63d0\u53d6\u200b\u771f\u5047\u200b\u56fe\u50cf\u200b\u7279\u5f81\u200b\u3002\u200b\u7136\u800c\u200b\uff0cTero\u200b\u7684\u200bFID\u200b\u9700\u8981\u200bTensorflow InceptionV3\u200b\u7684\u200b\u811a\u672c\u200b\u6a21\u5757\u200b\u3002\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5e94\u7528\u200b\u6b64\u200b\u811a\u672c\u200b\u6a21\u5757\u200b\u9700\u8981\u200b' PyTorch &gt;= 1.6.0 '\u3002</p> <p>\u200b\u5173\u4e8e\u200b\u63d0\u53d6\u200b\u771f\u5b9e\u200b\u7684\u200b\u521d\u59cb\u200b\u6570\u636e\u200b: \u200b\u4e3a\u4e86\u200b\u65b9\u4fbf\u200b\u7528\u6237\u200b\uff0c\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u65f6\u200b\u81ea\u52a8\u200b\u63d0\u53d6\u200b\u771f\u5b9e\u200b\u7684\u200b\u7279\u5f81\u200b\u5e76\u200b\u4fdd\u5b58\u200b\u5728\u200b\u672c\u5730\u200b\uff0c\u200b\u5b58\u50a8\u200b\u7684\u200b\u7279\u5f81\u200b\u5728\u200b\u4e0b\u6b21\u200b\u6d4b\u8bd5\u200b\u65f6\u200b\u81ea\u52a8\u200b\u8bfb\u53d6\u200b\u3002\u200b\u5177\u4f53\u6765\u8bf4\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6839\u636e\u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u200b\u5b9e\u9645\u200b\u7279\u6027\u200b\u7684\u200b\u53c2\u6570\u200b\u8ba1\u7b97\u200b\u4e00\u4e2a\u200b\u54c8\u5e0c\u200b\u503c\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b\u54c8\u5e0c\u200b\u503c\u6765\u200b\u6807\u8bb0\u200b\u7279\u6027\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u65f6\u200b\uff0c\u200b\u5982\u679c\u200b' inception_pkl '\u200b\u6ca1\u6709\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b' MMAGIC_CACHE_DIR ' (~/.cache/openmmlab/mmagic/)\u200b\u4e2d\u200b\u5bfb\u627e\u200b\u8be5\u200b\u7279\u6027\u200b\u3002\u200b\u5982\u679c\u200b\u672a\u627e\u5230\u200b\u7f13\u5b58\u200b\u7684\u200b\u521d\u59cb\u200bpkl\uff0c\u200b\u5219\u200b\u5c06\u200b\u6267\u884c\u200b\u63d0\u53d6\u200b\u3002</p> <p>\u200b\u8981\u200b\u4f7f\u7528\u200bFID\u200b\u6307\u6807\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>metrics = [\n    dict(\n        type='FrechetInceptionDistance',\n        prefix='FID-Full-50k',\n        fake_nums=50000,\n        inception_style='StyleGAN',\n        sample_model='ema')\n]\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b\u4e00\u53f0\u200b\u65b0\u200b\u673a\u5668\u200b\u4e0a\u200b\u5de5\u4f5c\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u590d\u5236\u200b'MMAGIC_CACHE_DIR'\u200b\u4e2d\u200b\u7684\u200b'pkl'\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5c06\u200b\u5b83\u4eec\u200b\u590d\u5236\u5230\u200b\u65b0\u200b\u673a\u5668\u200b\u5e76\u200b\u8bbe\u7f6e\u200b'inception_pkl'\u200b\u5b57\u200b\u6bb5\u200b\u3002</p> <pre><code>metrics = [\n    dict(\n        type='FrechetInceptionDistance',\n        prefix='FID-Full-50k',\n        fake_nums=50000,\n        inception_style='StyleGAN',\n        inception_pkl=\n        'work_dirs/inception_pkl/inception_state-capture_mean_cov-full-33ad4546f8c9152e4b3bdb1b0c08dbaf.pkl',  # copied from old machine\n        sample_model='ema')\n]\n</code></pre> <p>'TransFID'\u200b\u4e0e\u200b'FID'\u200b\u7684\u200b\u7528\u6cd5\u200b\u76f8\u540c\u200b\uff0c\u200b\u4f46\u200bTransFID\u200b\u662f\u200b\u4e3a\u200b'Pix2Pix'\u200b\u548c\u200b'CycleGAN'\u200b\u7b49\u200b\u7ffb\u8bd1\u200b\u6a21\u578b\u200b\u8bbe\u8ba1\u200b\u7684\u200b\uff0c\u200b\u9002\u7528\u200b\u4e8e\u200b\u6211\u4eec\u200b\u7684\u200b\u8bc4\u4f30\u5668\u200b\u3002\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200bevaluation\u3002</p>"},{"location":"user_guides/metrics/#is-transis","title":"IS \u200b\u548c\u200b TransIS","text":"<p>Inception\u200b\u8bc4\u5206\u200b\u662f\u200b\u8bc4\u4f30\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\u8d28\u91cf\u200b\u7684\u200b\u5ba2\u89c2\u200b\u6307\u6807\u200b\uff0c\u200b\u5728\u200b\u6539\u8fdb\u200b\u7684\u200b\u8bad\u7ec3\u200bGANs\u200b\u6280\u672f\u200b\u4e2d\u200b\u63d0\u51fa\u200b\u3002\u200b\u5b83\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200bInceptionV3\u200b\u6a21\u578b\u200b\u6765\u200b\u9884\u6d4b\u200b\u751f\u6210\u200b\u7684\u200b\u56fe\u50cf\u200b\u7684\u200b\u7c7b\u522b\u200b\uff0c\u200b\u5e76\u200b\u5047\u8bbe\u200b: 1)\u200b\u5982\u679c\u200b\u56fe\u50cf\u200b\u8d28\u91cf\u200b\u9ad8\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u88ab\u200b\u5f52\u7c7b\u200b\u5230\u200b\u7279\u5b9a\u200b\u7684\u200b\u7c7b\u522b\u200b\u30022)\u200b\u5982\u679c\u200b\u56fe\u50cf\u200b\u5177\u6709\u200b\u8f83\u200b\u9ad8\u200b\u7684\u200b\u591a\u6837\u6027\u200b\uff0c\u200b\u5219\u200b\u56fe\u50cf\u200b\u7684\u200b\u7c7b\u522b\u200b\u8303\u56f4\u200b\u5c06\u200b\u5f88\u200b\u5e7f\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u6761\u4ef6\u200b\u6982\u7387\u200b\u548c\u200b\u8fb9\u9645\u200b\u6982\u7387\u200b\u7684\u200bkl -\u200b\u6563\u5ea6\u200b\u53ef\u4ee5\u200b\u6307\u793a\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\u7684\u200b\u8d28\u91cf\u200b\u548c\u200b\u591a\u6837\u6027\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b'metrics.py'\u200b\u4e2d\u200b\u770b\u5230\u200b\u5b8c\u6574\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5b83\u200b\u6307\u5411\u200bhttps://github.com/sbarratt/inception-score-pytorch/blob/master/inception_score.py\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4f7f\u7528\u200b'IS'\u200b\u6307\u6807\u200b\u8bc4\u4f30\u200b\u6a21\u578b\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code># at the end of the configs/biggan/biggan_2xb25-500kiters_cifar10-32x32.py\nmetrics = [\n    xxx,\n    dict(\n        type='IS',\n        prefix='IS-50k',\n        fake_nums=50000,\n        inception_style='StyleGAN',\n        sample_model='ema')\n]\n</code></pre> <p>\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\uff0cInception V3\u200b\u7684\u200b\u9009\u62e9\u200b\u548c\u200b\u56fe\u50cf\u200b\u5927\u5c0f\u200b\u7684\u200b\u8c03\u6574\u200b\u65b9\u6cd5\u200b\u4f1a\u200b\u663e\u8457\u200b\u5f71\u54cd\u200b\u6700\u7ec8\u200b\u7684\u200bIS\u200b\u8bc4\u5206\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u6211\u4eec\u200b\u5f3a\u70c8\u5efa\u8bae\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4e0b\u8f7d\u200bTero's script model of Inception V3(\u200b\u52a0\u8f7d\u200b\u6b64\u200b\u811a\u672c\u200b\u6a21\u578b\u200b\u9700\u8981\u200btorch &gt;= 1.6)\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b'Bicubic'\u200b\u63d2\u503c\u200b\u4e0e\u200b'Pillow'\u200b\u540e\u200b\u7aef\u200b\u3002</p> <p>\u200b\u5bf9\u5e94\u200b\u4e8e\u200bconfig\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b'resize_method'\u200b\u548c\u200b'use_pillow_resize'\u200b\u7528\u4e8e\u200b\u56fe\u50cf\u200b\u5927\u5c0f\u200b\u7684\u200b\u8c03\u6574\u200b\u3002\u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5c06\u200b'inception_style'\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b'StyleGAN'\u200b\u7528\u4e8e\u200b\u63a8\u8350\u200b\u7684\u200btero\u200b\u7684\u200b\u521d\u59cb\u6a21\u578b\u200b\uff0c\u200b\u6216\u200b'PyTorch'\u200b\u7528\u4e8e\u200btorchvision\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u6ca1\u6709\u200b\u4e92\u8054\u7f51\u200b\u7684\u200b\u73af\u5883\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4e0b\u8f7d\u200b\u521d\u59cb\u200b\u7684\u200b\u6743\u91cd\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b'inception_path'\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u60a8\u200b\u7684\u200b\u521d\u59cb\u6a21\u578b\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u8c03\u67e5\u200b\u4e86\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u7ba1\u7ebf\u200b\u548c\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200bInception V3\u200b\u7248\u672c\u200b\u5bf9\u200bIS\u200b\u7ed3\u679c\u200b\u7684\u200b\u5f71\u54cd\u200b\u3002\u200b\u6240\u6709\u200bIS\u200b\u90fd\u200b\u5728\u200b\u540c\u200b\u4e00\u7ec4\u200b\u56fe\u50cf\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u56fe\u50cf\u200b\u662f\u4ece\u200bImageNet\u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u968f\u673a\u200b\u9009\u62e9\u200b\u7684\u200b\u3002</p>  \u200b\u663e\u793a\u200b\u5bf9\u6bd4\u200b\u7ed3\u679c\u200b   |                            Code Base                            | Inception V3 Version | Data Loader Backend | Resize Interpolation Method |          IS           | | :-------------------------------------------------------------: | :------------------: | :-----------------: | :-------------------------: | :-------------------: | |   [OpenAI (baseline)](https://github.com/openai/improved-gan)   |      Tensorflow      |       Pillow        |       Pillow Bicubic        | **312.255 +/- 4.970** | | [StyleGAN-Ada](https://github.com/NVlabs/stylegan2-ada-pytorch) | Tero's Script Model  |       Pillow        |       Pillow Bicubic        |   311.895 +/ 4.844    | |                          mmagic (Ours)                          |  Pytorch Pretrained  |         cv2         |        cv2 Bilinear         |   322.932 +/- 2.317   | |                          mmagic (Ours)                          |  Pytorch Pretrained  |         cv2         |         cv2 Bicubic         |   324.604 +/- 5.157   | |                          mmagic (Ours)                          |  Pytorch Pretrained  |         cv2         |       Pillow Bicubic        |   318.161 +/- 5.330   | |                          mmagic (Ours)                          |  Pytorch Pretrained  |       Pillow        |       Pillow Bilinear       |   313.126 +/- 5.449   | |                          mmagic (Ours)                          |  Pytorch Pretrained  |       Pillow        |        cv2 Bilinear         |    318.021+/-3.864    | |                          mmagic (Ours)                          |  Pytorch Pretrained  |       Pillow        |       Pillow Bicubic        |   317.997 +/- 5.350   | |                          mmagic (Ours)                          | Tero's Script Model  |         cv2         |        cv2 Bilinear         |   318.879 +/- 2.433   | |                          mmagic (Ours)                          | Tero's Script Model  |         cv2         |         cv2 Bicubic         |   316.125 +/- 5.718   | |                          mmagic (Ours)                          | Tero's Script Model  |         cv2         |       Pillow Bicubic        | **312.045 +/- 5.440** | |                          mmagic (Ours)                          | Tero's Script Model  |       Pillow        |       Pillow Bilinear       |   308.645 +/- 5.374   | |                          mmagic (Ours)                          | Tero's Script Model  |       Pillow        |       Pillow Bicubic        |   311.733 +/- 5.375   |   <p>'TransIS'\u200b\u4e0e\u200b'IS'\u200b\u7684\u200b\u7528\u6cd5\u200b\u76f8\u540c\u200b\uff0c\u200b\u4f46\u200bTransIS\u200b\u662f\u200b\u4e3a\u200b'Pix2Pix'\u200b\u548c\u200b'CycleGAN'\u200b\u8fd9\u6837\u200b\u7684\u200b\u7ffb\u8bd1\u200b\u6a21\u578b\u200b\u8bbe\u8ba1\u200b\u7684\u200b\uff0c\u200b\u8fd9\u200b\u662f\u200b\u4e3a\u200b\u6211\u4eec\u200b\u7684\u200b\u8bc4\u4f30\u5668\u200b\u6539\u7f16\u200b\u7684\u200b\u3002\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u53ef\u200b\u53c2\u8003\u200bevaluation\u3002</p>"},{"location":"user_guides/metrics/#precision-and-recall","title":"Precision and Recall","text":"<p>\u200b\u6211\u4eec\u200b\u7684\u200b'Precision and Recall'\u200b\u5b9e\u73b0\u200b\u9075\u5faa\u200bStyleGAN2\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u7248\u672c\u200b\u3002\u200b\u5728\u200b\u8be5\u200b\u5ea6\u91cf\u200b\u4e2d\u200b\uff0c\u200b\u91c7\u7528\u200bVGG\u200b\u7f51\u7edc\u200b\u5bf9\u200b\u56fe\u50cf\u200b\u8fdb\u884c\u200b\u7279\u5f81\u63d0\u53d6\u200b\u3002\u200b\u4e0d\u5e78\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u53d1\u73b0\u200bPyTorch VGG\u200b\u5b9e\u73b0\u200b\u4e0e\u200bStyleGAN2\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200bTero\u200b\u7248\u672c\u200b\u4ea7\u751f\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002(\u200b\u5173\u4e8e\u200b\u5dee\u5f02\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u8fd9\u4e2a\u200b\u6587\u4ef6\u200b\u3002)\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u9ed8\u8ba4\u200b\u91c7\u7528\u200bTeor's VGG\u200b\u7f51\u7edc\u200b\u3002\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u5e94\u7528\u200b\u8fd9\u4e2a\u200b\u811a\u672c\u200b\u6a21\u5757\u200b\u9700\u8981\u200b'PyTorch &gt;= 1.6.0'\u3002\u200b\u5982\u679c\u200b\u4f7f\u7528\u200b\u8f83\u200b\u4f4e\u200b\u7684\u200bPyTorch\u200b\u7248\u672c\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200bPyTorch\u200b\u5b98\u65b9\u200bVGG\u200b\u7f51\u7edc\u200b\u8fdb\u884c\u200b\u7279\u5f81\u63d0\u53d6\u200b\u3002 \u200b\u8981\u200b\u4f7f\u7528\u200b' P&amp;R '\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code>metrics = [\n    dict(type='PrecisionAndRecall', fake_nums=50000, prefix='PR-50K')\n]\n</code></pre>"},{"location":"user_guides/metrics/#ppl","title":"PPL","text":"<p>\u200b\u5f53\u200b\u5728\u200b\u4e24\u4e2a\u200b\u968f\u673a\u200b\u8f93\u5165\u200b\u4e4b\u95f4\u200b\u8fdb\u884c\u200b\u63d2\u503c\u200b\u65f6\u200b\uff0c\u200b\u611f\u77e5\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\u6d4b\u91cf\u200b\u8fde\u7eed\u200b\u56fe\u50cf\u200b\uff08\u200b\u5176\u200bVGG16\u200b\u5d4c\u5165\u200b\uff09\u200b\u4e4b\u95f4\u200b\u7684\u200b\u5dee\u5f02\u200b\u3002\u200b\u5267\u70c8\u200b\u7684\u200b\u53d8\u5316\u200b\u610f\u5473\u7740\u200b\u591a\u4e2a\u200b\u7279\u5f81\u200b\u4e00\u8d77\u200b\u53d1\u751f\u200b\u4e86\u200b\u53d8\u5316\u200b\uff0c\u200b\u5b83\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53e0\u52a0\u200b\u5728\u200b\u4e00\u8d77\u200b\u3002\u200b\u901a\u8fc7\u200b\u5b9e\u9a8c\u200b\u8868\u660e\u200b\uff0c\u200b\u8f83\u200b\u5c0f\u200b\u7684\u200bPPL\u200b\u5206\u6570\u200b\u8868\u660e\u200b\u6574\u4f53\u200b\u56fe\u50cf\u200b\u8d28\u91cf\u200b\u8f83\u200b\u9ad8\u200b\u3002 \u200b\u4f5c\u4e3a\u200b\u8be5\u200b\u6307\u6807\u200b\u7684\u200b\u57fa\u7840\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u57fa\u4e8e\u200b\u611f\u77e5\u200b\u7684\u200b\u6210\u200b\u5bf9\u200b\u56fe\u50cf\u200b\u8ddd\u79bb\u200b\uff0c\u200b\u8be5\u200b\u8ddd\u79bb\u200b\u88ab\u200b\u8ba1\u7b97\u200b\u4e3a\u200b\u4e24\u4e2a\u200bVGG16\u200b\u5d4c\u5165\u200b\u4e4b\u95f4\u200b\u7684\u200b\u52a0\u6743\u200b\u5dee\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6743\u91cd\u200b\u88ab\u200b\u62df\u5408\u200b\uff0c\u200b\u4ece\u800c\u200b\u8bc4\u4ef7\u200b\u6307\u6807\u200b\u4e0e\u200b\u4eba\u7c7b\u200b\u7684\u200b\u611f\u77e5\u200b\u76f8\u4f3c\u6027\u200b\u5224\u65ad\u200b\u4e00\u81f4\u200b\u3002 \u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6f5c\u5728\u200b\u7a7a\u95f4\u200b\u63d2\u503c\u200b\u8def\u5f84\u200b\u7ec6\u5206\u200b\u4e3a\u200b\u7ebf\u6027\u200b\u6bb5\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u8be5\u200b\u5206\u6bb5\u200b\u8def\u5f84\u200b\u7684\u200b\u603b\u200b\u611f\u77e5\u200b\u957f\u5ea6\u200b\u5b9a\u4e49\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u6bb5\u200b\u4e0a\u200b\u611f\u77e5\u200b\u5dee\u5f02\u200b\u7684\u200b\u603b\u548c\u200b\uff0c\u200b\u5e76\u4e14\u200b\u611f\u77e5\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\u7684\u200b\u81ea\u7136\u200b\u5b9a\u4e49\u200b\u5c06\u200b\u662f\u200b\u65e0\u9650\u200b\u7ec6\u5206\u200b\u4e0b\u200b\u7684\u200b\u603b\u548c\u200b\u7684\u200b\u6781\u9650\u200b\uff0c\u200b\u4f46\u200b\u5728\u5b9e\u8df5\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u5c0f\u200b\u7684\u200b\u7ec6\u5206\u200b<code>$`\\epsilon=10^\uff5b-4\uff5d`$</code>\u200b\u6765\u200b\u8fd1\u4f3c\u200b\u5b83\u200b\u3002 \u200b\u56e0\u6b64\u200b\uff0c\u200b\u6f5c\u5728\u200b<code>space</code>Z\u200b\u4e2d\u200b\u6240\u6709\u200b\u53ef\u80fd\u200b\u7aef\u70b9\u200b\u7684\u200b\u5e73\u5747\u200b\u611f\u77e5\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\u4e3a\u200b</p> <p><code>$$`L_Z = E[\\frac{1}{\\epsilon^2}d(G(slerp(z_1,z_2;t))), G(slerp(z_1,z_2;t+\\epsilon)))]`$$</code></p> <p>\u200b\u4ee5\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u65b9\u5f0f\u200b\u8ba1\u7b97\u200b\u6f5c\u5728\u200b <code>space</code> W\u200b\u4e2d\u200b\u7684\u200b\u5e73\u5747\u200b\u611f\u77e5\u200b\u8def\u5f84\u200b\u957f\u5ea6\u200b\uff1a:</p> <p><code>$$`L_Z = E[\\frac{1}{\\epsilon^2}d(G(slerp(z_1,z_2;t))), G(slerp(z_1,z_2;t+\\epsilon)))]`$$</code></p> <p>\u200b\u5f53\u200b <code>$`z_1, z_2 \\sim P(z)`$</code>\uff0c \u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u8bbe\u7f6e\u200b <code>sampling</code> \u200b\u4e3a\u200b <code>full</code>\uff0c  \u200b\u5219\u200b <code>$` t \\sim U(0,1)`$</code>\uff0c \u200b\u5982\u679c\u200b\u8bbe\u7f6e\u200b <code>sampling</code> \u200b\u4e3a\u200b <code>end</code>\uff0c\u200b\u5219\u200b<code>$` t \\in \\{0,1\\}`$</code>\u3002 <code>$` G`$</code> \u200b\u662f\u200b\u751f\u6210\u5668\u200b(i.e. <code>$` g \\circ f`$</code> \u200b\u7528\u4e8e\u200bstyle-based\u200b\u7f51\u7edc\u200b)\uff0c <code>$` d(.,.)`$</code> \u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u7ed3\u679c\u200b\u56fe\u50cf\u200b\u4e4b\u95f4\u200b\u7684\u200b\u611f\u77e5\u200b\u8ddd\u79bb\u200b\u3002\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u53d6\u200b100,000\u200b\u4e2a\u200b\u6837\u672c\u200b\u6765\u200b\u8ba1\u7b97\u200b\u671f\u671b\u200b(\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u5c06\u200b' num_images '\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b50,000)\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b'metrics.py'\u200b\u4e2d\u200b\u627e\u5230\u200b\u5b8c\u6574\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u53c2\u8003\u200bhttps://github.com/rosinality/stylegan2-pytorch/blob/master/ppl.py\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4f7f\u7528\u200b'PPL'\u200b\u6307\u6807\u200b\u8bc4\u4f30\u200b\u6a21\u578b\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code># at the end of the configs/styleganv2/stylegan2_c2_ffhq_1024_b4x8.py\nmetrics = [\n    xxx,\n    dict(type='PerceptualPathLength', fake_nums=50000, prefix='ppl-w')\n]\n</code></pre>"},{"location":"user_guides/metrics/#swd","title":"SWD","text":"<p>\u200b\u5207\u7247\u200bWasserstein\u200b\u8ddd\u79bb\u200b\u662f\u200b\u6982\u7387\u5206\u5e03\u200b\u7684\u200b\u5dee\u5f02\u200b\u5ea6\u91cf\u200b\uff0c\u200b\u8ddd\u79bb\u200b\u8d8a\u5c0f\u200b\u8868\u793a\u200b\u751f\u6210\u200b\u7684\u200b\u56fe\u50cf\u200b\u8d8a\u200b\u771f\u5b9e\u200b\u3002\u200b\u6211\u4eec\u200b\u83b7\u5f97\u200b\u6bcf\u4e2a\u200b\u56fe\u50cf\u200b\u7684\u200b\u62c9\u666e\u62c9\u65af\u200b\u91d1\u5b57\u5854\u200b\uff0c\u200b\u5e76\u200b\u4ece\u200b\u62c9\u666e\u62c9\u65af\u200b\u91d1\u5b57\u5854\u200b\u4e2d\u200b\u63d0\u53d6\u200b\u5c0f\u200b\u5757\u200b\u4f5c\u4e3a\u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u7136\u540e\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u83b7\u53d6\u200b\u771f\u5b9e\u200b\u548c\u200b\u4f2a\u200b\u63cf\u8ff0\u7b26\u200b\u5207\u7247\u200b\u7684\u200bWasserstein\u200b\u8ddd\u79bb\u200b\u6765\u200b\u8ba1\u7b97\u200bSWD\u3002 \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b'metrics.py'\u200b\u4e2d\u200b\u770b\u5230\u200b\u5b8c\u6574\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u53c2\u8003\u200bhttps://github.com/tkarras/progressive_growing_of_gans/blob/master/metrics/sliced_wasserstein.py\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4f7f\u7528\u200b'SWD'\u200b\u6307\u6807\u200b\u8bc4\u4f30\u200b\u6a21\u578b\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code># at the end of the configs/dcgan/dcgan_1xb128-5epoches_lsun-bedroom-64x64.py\nmetrics = [\n    dict(\n        type='SWD',\n        prefix='swd',\n        fake_nums=16384,\n        sample_model='orig',\n        image_shape=(3, 64, 64))\n]\n</code></pre>"},{"location":"user_guides/metrics/#ms-ssim","title":"MS-SSIM","text":"<p>\u200b\u91c7\u7528\u200b\u591a\u200b\u5c3a\u5ea6\u200b\u7ed3\u6784\u200b\u76f8\u4f3c\u200b\u5ea6\u6765\u200b\u8861\u91cf\u200b\u4e24\u5e45\u200b\u56fe\u50cf\u200b\u7684\u200b\u76f8\u4f3c\u200b\u5ea6\u200b\u3002\u200b\u6211\u4eec\u200b\u5728\u200b\u8fd9\u91cc\u200b\u4f7f\u7528\u200bMS-SSIM\u200b\u6765\u200b\u8861\u91cf\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\u7684\u200b\u591a\u6837\u6027\u200b\uff0cMS-SSIM\u200b\u5f97\u5206\u200b\u4f4e\u200b\u8868\u793a\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\u7684\u200b\u591a\u6837\u6027\u200b\u9ad8\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b'metrics.py'\u200b\u4e2d\u200b\u770b\u5230\u200b\u5b8c\u6574\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u53c2\u8003\u200bhttps://github.com/tkarras/progressive_growing_of_gans/blob/master/metrics/ms_ssim.py\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4f7f\u7528\u200b'MS-SSIM'\u200b\u6307\u6807\u200b\u8bc4\u4f30\u200b\u6a21\u578b\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code># at the end of the configs/dcgan/dcgan_1xb128-5epoches_lsun-bedroom-64x64.py\nmetrics = [\n    dict(\n        type='MS_SSIM', prefix='ms-ssim', fake_nums=10000,\n        sample_model='orig')\n]\n</code></pre>"},{"location":"user_guides/metrics/#equivarience","title":"Equivarience","text":"<p>\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u7684\u200b\u7b49\u4ef7\u200b\u6027\u662f\u200b\u6307\u200b\u6a21\u578b\u200b\u6b63\u200b\u53d8\u6362\u200b\u548c\u200b\u51e0\u4f55\u53d8\u6362\u200b\u7684\u200b\u4e92\u6362\u6027\u200b\u3002\u200b\u76ee\u524d\u200b\u8fd9\u4e2a\u200b\u6307\u6807\u200b\u53ea\u200b\u9488\u5bf9\u200bStyleGANv3\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b'metrics.py'\u200b\u4e2d\u200b\u770b\u5230\u200b\u5b8c\u6574\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u53c2\u8003\u200bhttps://github.com/NVlabs/stylegan3/blob/main/metrics/equivariance.py\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4f7f\u7528\u200b'Equivarience'\u200b\u6307\u6807\u200b\u8bc4\u4f30\u200b\u6a21\u578b\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b:</p> <pre><code># at the end of the configs/styleganv3/stylegan3-t_gamma2.0_8xb4-fp16-noaug_ffhq-256x256.py\nmetrics = [\n    dict(\n        type='Equivariance',\n        fake_nums=50000,\n        sample_mode='ema',\n        prefix='EQ',\n        eq_cfg=dict(\n            compute_eqt_int=True, compute_eqt_frac=True, compute_eqr=True))\n]\n</code></pre>"},{"location":"user_guides/train_test/","title":"\u6559\u7a0b\u200b 4\uff1a\u200b\u5728\u200bMMagic\u200b\u73af\u5883\u200b\u4e0b\u200b\u8bad\u7ec3\u200b\u4e0e\u200b\u6d4b\u8bd5","text":"<p>\u200b\u5728\u200b\u8be5\u200b\u90e8\u5206\u200b\u4e2d\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u5b66\u5230\u200b\u5982\u4f55\u200b\u5728\u200bMMagic\u200b\u73af\u5883\u200b\u4e0b\u200b\u5b8c\u6210\u200b\u8bad\u7ec3\u200b\u4e0e\u200b\u6d4b\u8bd5\u200b</p> <p>\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u5982\u4e0b\u200b\u6559\u7a0b\u200b\uff1a</p> <ul> <li>\u200b\u9884\u5148\u200b\u51c6\u5907\u200b</li> <li>\u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\u6d4b\u8bd5\u200b\u6a21\u578b\u200b</li> <li>\u200b\u5728\u200b\u5355\u4e2a\u200bGPU\u200b\u4e0a\u200b\u6d4b\u8bd5\u200b</li> <li>\u200b\u5728\u200b\u591a\u4e2a\u200bGPU\u200b\u4e0a\u200b\u6d4b\u8bd5\u200b</li> <li>\u200b\u5728\u200bSlurm\u200b\u4e0a\u200b\u6d4b\u8bd5\u200b</li> <li>\u200b\u4f7f\u7528\u200b\u7279\u5b9a\u200b\u6307\u6807\u200b\u8fdb\u884c\u200b\u6d4b\u8bd5\u200b</li> <li>\u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b</li> <li>\u200b\u5728\u200b\u5355\u4e2a\u200bGPU\u200b\u4e0a\u200b\u8bad\u7ec3\u200b</li> <li>\u200b\u5728\u200b\u591a\u4e2a\u200bGPU\u200b\u4e0a\u200b\u8bad\u7ec3\u200b</li> <li>\u200b\u5728\u200b\u591a\u4e2a\u200b\u8282\u70b9\u200b\u4e0a\u200b\u8bad\u7ec3\u200b</li> <li>\u200b\u5728\u200bSlurm\u200b\u4e0a\u200b\u8bad\u7ec3\u200b</li> <li>\u200b\u4f7f\u7528\u200b\u7279\u5b9a\u200b\u7684\u200b\u8bc4\u4f30\u200b\u6307\u6807\u200b\u8fdb\u884c\u200b\u8bad\u7ec3\u200b</li> </ul>"},{"location":"user_guides/train_test/#_1","title":"\u9884\u5148\u200b\u51c6\u5907","text":"<p>\u200b\u7528\u6237\u200b\u9700\u8981\u200b\u9996\u5148\u200b \u200b\u51c6\u5907\u200b\u6570\u636e\u200b\u96c6\u200b \u200b\u4ece\u800c\u200b\u80fd\u591f\u200b\u5728\u200bMMagic\u200b\u73af\u5883\u200b\u4e2d\u200b\u8bad\u7ec3\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u3002</p>"},{"location":"user_guides/train_test/#mmagic","title":"\u5728\u200bMMagic\u200b\u4e2d\u200b\u6d4b\u8bd5\u200b\u6a21\u578b","text":""},{"location":"user_guides/train_test/#gpu","title":"\u5728\u200b\u5355\u4e2a\u200bGPU\u200b\u4e0a\u200b\u6d4b\u8bd5","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200b\u5355\u4e2a\u200bGPU\u200b\u6765\u200b\u6d4b\u8bd5\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u3002</p> <pre><code>python tools/test.py ${CONFIG_FILE} ${CHECKPOINT_FILE}\n</code></pre> <p>\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>python tools/test.py configs/example_config.py work_dirs/example_exp/example_model_20200202.pth\n</code></pre>"},{"location":"user_guides/train_test/#gpu_1","title":"\u5728\u200b\u591a\u4e2a\u200bGPU\u200b\u4e0a\u200b\u6d4b\u8bd5","text":"<p>MMagic\u200b\u652f\u6301\u200b\u4f7f\u7528\u200b\u591a\u4e2a\u200bGPU\u200b\u6d4b\u8bd5\u200b\uff0c\u200b\u80fd\u591f\u200b\u6781\u5927\u200b\u5730\u200b\u8282\u7ea6\u200b\u6a21\u578b\u200b\u6d4b\u8bd5\u200b\u65f6\u95f4\u200b\u3002 \u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200b\u591a\u4e2a\u200bGPU\u200b\u6765\u200b\u6d4b\u8bd5\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u3002</p> <pre><code>./tools/dist_test.sh ${CONFIG_FILE} ${CHECKPOINT_FILE} ${GPU_NUM}\n</code></pre> <p>\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>./tools/dist_test.sh configs/example_config.py work_dirs/example_exp/example_model_20200202.pth\n</code></pre>"},{"location":"user_guides/train_test/#slurm","title":"\u5728\u200bSlurm\u200b\u4e0a\u200b\u6d4b\u8bd5","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b\u7531\u200b slurm \u200b\u7ba1\u7406\u200b\u7684\u200b\u96c6\u7fa4\u200b\u4e0a\u200b\u8fd0\u884c\u200bMMagic\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u811a\u672c\u200b<code>slurm_test.sh</code>\u3002\uff08\u200b\u6b64\u200b\u811a\u672c\u200b\u8fd8\u200b\u652f\u6301\u200b\u5355\u673a\u200b\u6d4b\u8bd5\u200b\u3002\uff09</p> <pre><code>[GPUS=${GPUS}] ./tools/slurm_test.sh ${PARTITION} ${JOB_NAME} ${CONFIG_FILE} ${CHECKPOINT_FILE}\n</code></pre> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4f7f\u7528\u200b8\u200b\u4e2a\u200bGPU\u200b\u5728\u200b\u201cdev\u201d\u200b\u5206\u533a\u200b\u4e0a\u200b\u6d4b\u8bd5\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b\u6a21\u578b\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u4f5c\u4e1a\u200b\u540d\u79f0\u200b\u4e3a\u200b\u201ctest\u201d\u3002</p> <pre><code>GPUS=8 ./tools/slurm_test.sh dev test configs/example_config.py work_dirs/example_exp/example_model_20200202.pth\n</code></pre> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u68c0\u67e5\u200b slurm_test.sh \u200b\u4ee5\u200b\u83b7\u53d6\u200b\u5b8c\u6574\u200b\u7684\u200b\u53c2\u6570\u200b\u548c\u200b\u73af\u5883\u53d8\u91cf\u200b\u3002</p>"},{"location":"user_guides/train_test/#_2","title":"\u4f7f\u7528\u200b\u7279\u5b9a\u200b\u6307\u6807\u200b\u8fdb\u884c\u200b\u6d4b\u8bd5","text":"<p>MMagic \u200b\u63d0\u4f9b\u200b\u5404\u79cd\u200b\u8bc4\u4f30\u200b\u503c\u200b\u6307\u6807\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff1aMS-SSIM\u3001SWD\u3001IS\u3001FID\u3001Precision&amp;Recall\u3001PPL\u3001Equivarience\u3001TransFID\u3001TransIS\u200b\u7b49\u200b\u3002 \u200b\u6211\u4eec\u200b\u5728\u200btools/test.py\u200b\u4e2d\u4e3a\u200b\u6240\u6709\u200b\u6a21\u578b\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u7edf\u4e00\u200b\u7684\u200b\u8bc4\u4f30\u200b\u811a\u672c\u200b\u3002 \u200b\u5982\u679c\u200b\u7528\u6237\u200b\u60f3\u200b\u7528\u200b\u4e00\u4e9b\u200b\u6307\u6807\u200b\u6765\u200b\u8bc4\u4f30\u200b\u4ed6\u4eec\u200b\u7684\u200b\u6a21\u578b\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u50cf\u200b\u8fd9\u6837\u200b\u5c06\u200b <code>metrics</code> \u200b\u6dfb\u52a0\u200b\u5230\u200b\u4f60\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b:</p> <pre><code># \u200b\u5728\u200b\u6587\u4ef6\u200b configs/styleganv2/stylegan2_c2_ffhq_256_b4x8_800k.py \u200b\u7684\u200b\u672b\u5c3e\u200b\nmetrics = [\n    dict(\n        type='FrechetInceptionDistance',\n        prefix='FID-Full-50k',\n        fake_nums=50000,\n        inception_style='StyleGAN',\n        sample_model='ema'),\n    dict(type='PrecisionAndRecall', fake_nums=50000, prefix='PR-50K'),\n    dict(type='PerceptualPathLength', fake_nums=50000, prefix='ppl-w')\n]\n</code></pre> <p>\u200b\u5982\u4e0a\u6240\u8ff0\u200b, <code>metrics</code> \u200b\u7531\u200b\u591a\u4e2a\u200b\u6307\u6807\u200b\u5b57\u5178\u200b\u7ec4\u6210\u200b\u3002 \u200b\u6bcf\u4e2a\u200b\u6307\u6807\u200b\u5305\u542b\u200b <code>type</code> \u200b\u6765\u200b\u8868\u793a\u200b\u5176\u200b\u7c7b\u522b\u200b\u3002 <code>fake_nums</code> \u200b\u8868\u793a\u200b\u6a21\u578b\u200b\u751f\u6210\u200b\u7684\u200b\u56fe\u50cf\u200b\u6570\u91cf\u200b\u3002 \u200b\u6709\u4e9b\u200b\u6307\u6807\u200b\u4f1a\u200b\u8f93\u51fa\u200b\u4e00\u4e2a\u200b\u7ed3\u679c\u200b\u5b57\u5178\u200b\uff0c\u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b <code>prefix</code> \u200b\u6765\u200b\u6307\u5b9a\u200b\u7ed3\u679c\u200b\u7684\u200b\u524d\u7f00\u200b\u3002 \u200b\u5982\u679c\u200b\u5c06\u200bFID\u200b\u7684\u200b\u524d\u7f00\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>FID-Full-50k</code>\uff0c\u200b\u5219\u200b\u8f93\u51fa\u200b\u7684\u200b\u793a\u4f8b\u200b\u53ef\u80fd\u200b\u662f\u200b</p> <pre><code>FID-Full-50k/fid: 3.6561  FID-Full-50k/mean: 0.4263  FID-Full-50k/cov: 3.2298\n</code></pre> <p>\u200b\u7136\u540e\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e0b\u9762\u200b\u7684\u200b\u547d\u4ee4\u200b\u6d4b\u8bd5\u200b\u6a21\u578b\u200b:</p> <pre><code>bash tools/dist_test.sh ${CONFIG_FILE} ${CKPT_FILE}\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b slurm \u200b\u73af\u5883\u200b\u4e2d\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\u5207\u6362\u200b\u5230\u200b tools/slurm_test.sh\uff1a</p> <pre><code>sh slurm_test.sh ${PLATFORM} ${JOBNAME} ${CONFIG_FILE} ${CKPT_FILE}\n</code></pre>"},{"location":"user_guides/train_test/#mmagic_1","title":"\u5728\u200bMMagic\u200b\u4e2d\u200b\u8bad\u7ec3\u200b\u6a21\u578b","text":"<p>MMagic\u200b\u652f\u6301\u200b\u591a\u79cd\u200b\u8bad\u7ec3\u200b\u65b9\u5f0f\u200b:</p> <ol> <li>\u200b\u5728\u200b\u5355\u4e2a\u200bGPU\u200b\u4e0a\u200b\u8bad\u7ec3\u200b</li> <li>\u200b\u5728\u200b\u5355\u4e2a\u200bGPU\u200b\u4e0a\u200b\u8bad\u7ec3\u200b</li> <li>\u200b\u5728\u200b\u591a\u4e2a\u200b\u8282\u70b9\u200b\u4e0a\u200b\u8bad\u7ec3\u200b</li> <li>\u200b\u5728\u200bSlurm\u200b\u4e0a\u200b\u8bad\u7ec3\u200b</li> </ol> <p>Specifically, all outputs (log files and checkpoints) will be saved to the working directory, which is specified by <code>work_dir</code> in the config file.</p>"},{"location":"user_guides/train_test/#gpu_2","title":"\u5728\u200b\u5355\u4e2a\u200bGPU\u200b\u4e0a\u200b\u8bad\u7ec3","text":"<pre><code>CUDA_VISIBLE=0 python tools/train.py configs/example_config.py --work-dir work_dirs/example\n</code></pre>"},{"location":"user_guides/train_test/#_3","title":"\u5728\u200b\u591a\u4e2a\u200b\u8282\u70b9\u200b\u4e0a\u200b\u8bad\u7ec3","text":"<p>\u200b\u8981\u200b\u5728\u200b\u591a\u53f0\u200b\u673a\u5668\u200b\u4e0a\u200b\u542f\u52a8\u200b\u5206\u5e03\u5f0f\u200b\u8bad\u7ec3\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u673a\u5668\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bIP\u200b\u8bbf\u95ee\u200b\uff0c\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b:</p> <p>\u200b\u5728\u200b\u7b2c\u4e00\u53f0\u200b\u673a\u5668\u200b\u4e0a\u200b:</p> <pre><code>NNODES=2 NODE_RANK=0 PORT=$MASTER_PORT MASTER_ADDR=$MASTER_ADDR tools/dist_train.sh $CONFIG $GPUS\n</code></pre> <p>\u200b\u5728\u200b\u7b2c\u4e8c\u53f0\u200b\u673a\u5668\u200b\u4e0a\u200b:</p> <pre><code>NNODES=2 NODE_RANK=1 PORT=$MASTER_PORT MASTER_ADDR=$MASTER_ADDR tools/dist_train.sh $CONFIG $GPUS\n</code></pre> <p>\u200b\u4e3a\u4e86\u200b\u63d0\u9ad8\u200b\u7f51\u7edc\u901a\u4fe1\u200b\u901f\u5ea6\u200b\uff0c\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b\u9ad8\u901f\u200b\u7f51\u7edc\u200b\u786c\u4ef6\u200b\uff0c\u200b\u5982\u200bInfiniband\u3002 \u200b\u8bf7\u200b\u53c2\u8003\u200b PyTorch docs \u200b\u4ee5\u200b\u83b7\u53d6\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"user_guides/train_test/#gpu_3","title":"\u5728\u200b\u591a\u4e2a\u200bGPU\u200b\u4e0a\u200b\u8bad\u7ec3","text":"<pre><code>./tools/dist_train.sh ${CONFIG_FILE} ${GPU_NUM} [optional arguments]\n</code></pre>"},{"location":"user_guides/train_test/#slurm_1","title":"\u5728\u200bSlurm\u200b\u4e0a\u200b\u8bad\u7ec3","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b\u7531\u200b slurm \u200b\u7ba1\u7406\u200b\u7684\u200b\u96c6\u7fa4\u200b\u4e0a\u200b\u8fd0\u884c\u200bMMagic\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u811a\u672c\u200b<code>slurm_train.sh</code>\u3002\uff08\u200b\u6b64\u200b\u811a\u672c\u200b\u8fd8\u200b\u652f\u6301\u200b\u5355\u673a\u200b\u6d4b\u8bd5\u200b\u3002\uff09</p> <pre><code>[GPUS=${GPUS}] ./tools/slurm_train.sh ${PARTITION} ${JOB_NAME} ${CONFIG_FILE} ${WORK_DIR}\n</code></pre> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4f7f\u7528\u200b8\u200b\u4e2a\u200bgpu\u200b\u5728\u200bdev\u200b\u5206\u533a\u200b\u4e0a\u200b\u8bad\u7ec3\u200binpainting\u200b\u6a21\u578b\u200b\u7684\u200b\u793a\u4f8b\u200b\u3002</p> <pre><code>GPUS=8 ./tools/slurm_train.sh dev configs/inpainting/gl_places.py /nfs/xxxx/gl_places_256\n</code></pre> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b slurm_train.sh \u200b\u4e0a\u200b\u67e5\u9605\u200b\u5b8c\u6574\u200b\u53c2\u6570\u200b\u548c\u200b\u73af\u5883\u53d8\u91cf\u200b\u3002</p>"},{"location":"user_guides/train_test/#_4","title":"\u53ef\u200b\u9009\u200b\u53c2\u6570","text":"<ul> <li><code>--amp</code>\uff1a\u200b\u6b64\u53c2\u6570\u200b\u7528\u4e8e\u200b\u56fa\u5b9a\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b\u3002</li> <li><code>--resume</code>\uff1a\u200b\u6b64\u53c2\u6570\u200b\u7528\u4e8e\u200b\u5728\u200b\u8bad\u7ec3\u200b\u4e2d\u6b62\u200b\u65f6\u200b\u81ea\u52a8\u200b\u6062\u590d\u200b\u3002</li> </ul>"},{"location":"user_guides/train_test/#_5","title":"\u4f7f\u7528\u200b\u7279\u5b9a\u200b\u7684\u200b\u8bc4\u4f30\u200b\u6307\u6807\u200b\u8fdb\u884c\u200b\u8bad\u7ec3","text":"<p>\u200b\u53d7\u76ca\u200b\u4e8e\u200b <code>mmengine</code>\u200b\u7684\u200b <code>Runner</code>\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u5bf9\u6a21\u578b\u200b\u8fdb\u884c\u200b\u7b80\u5355\u200b\u7684\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u3002</p> <pre><code># \u200b\u5b9a\u4e49\u200b\u6307\u6807\u200b\nmetrics = [\n    dict(\n        type='FrechetInceptionDistance',\n        prefix='FID-Full-50k',\n        fake_nums=50000,\n        inception_style='StyleGAN')\n]\n\n# \u200b\u5b9a\u4e49\u200bdataloader\nval_dataloader = dict(\n    batch_size=128,\n    num_workers=8,\n    dataset=dict(\n        type='BasicImageDataset',\n        data_root='data/celeba-cropped/',\n        pipeline=[\n            dict(type='LoadImageFromFile', key='img'),\n            dict(type='Resize', scale=(64, 64)),\n            dict(type='PackInputs')\n        ]),\n    sampler=dict(type='DefaultSampler', shuffle=False),\n    persistent_workers=True)\n\n# \u200b\u5b9a\u4e49\u200b val interval\ntrain_cfg = dict(by_epoch=False, val_begin=1, val_interval=10000)\n\n# \u200b\u5b9a\u4e49\u200b val loop \u200b\u548c\u200b evaluator\nval_cfg = dict(type='MultiValLoop')\nval_evaluator = dict(type='Evaluator', metrics=metrics)\n</code></pre> <p>\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b <code>val_begin</code> \u200b\u548c\u200b <code>val_interval</code> \u200b\u6765\u200b\u8c03\u6574\u200b\u4f55\u65f6\u200b\u5f00\u59cb\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u9a8c\u8bc1\u200b\u95f4\u9694\u200b\u3002</p> <p>\u200b\u6709\u5173\u200b\u6307\u6807\u200b\u7684\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u8003\u200b metrics' guide.</p>"},{"location":"user_guides/useful_tools/","title":"\u6559\u7a0b\u200b 7\uff1a\u200b\u5b9e\u7528\u5de5\u5177\u200b\uff08\u200b\u5f85\u200b\u66f4\u65b0\u200b\uff09","text":"<p>\u200b\u6211\u4eec\u200b\u5728\u200b <code>tools/</code> \u200b\u76ee\u5f55\u200b\u4e0b\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5f88\u591a\u200b\u6709\u7528\u200b\u7684\u200b\u5de5\u5177\u200b\u3002</p>"},{"location":"user_guides/useful_tools/#flop","title":"\u83b7\u53d6\u200b FLOP \u200b\u548c\u200b\u53c2\u200b\u6570\u91cf\u200b\uff08\u200b\u5b9e\u9a8c\u6027\u200b\uff09","text":"<p>\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6539\u7f16\u81ea\u200b flops-counter.pytorch \u200b\u7684\u200b\u811a\u672c\u200b\u6765\u200b\u8ba1\u7b97\u200b\u6a21\u578b\u200b\u7684\u200b FLOP \u200b\u548c\u200b\u53c2\u200b\u6570\u91cf\u200b\u3002</p> <pre><code>python tools/get_flops.py ${CONFIG_FILE} [--shape ${INPUT_SHAPE}]\n</code></pre> <p>\u200b\u4f8b\u5982\u200b\uff0c</p> <pre><code>python tools/get_flops.py configs/resotorer/srresnet.py --shape 40 40\n</code></pre> <p>\u200b\u4f60\u200b\u4f1a\u200b\u5f97\u5230\u200b\u4ee5\u4e0b\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002</p> <pre><code>==============================\nInput shape: (3, 40, 40)\nFlops: 4.07 GMac\nParams: 1.52 M\n==============================\n</code></pre> <p>\u200b\u6ce8\u200b\uff1a\u200b\u6b64\u200b\u5de5\u5177\u200b\u4ecd\u200b\u5904\u4e8e\u200b\u5b9e\u9a8c\u200b\u9636\u6bb5\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4fdd\u8bc1\u200b\u6570\u5b57\u200b\u6b63\u786e\u200b\u3002 \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u7ed3\u679c\u200b\u7528\u4e8e\u200b\u7b80\u5355\u200b\u7684\u200b\u6bd4\u8f83\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u6280\u672f\u200b\u62a5\u544a\u200b\u6216\u200b\u8bba\u6587\u200b\u4e2d\u200b\u91c7\u7528\u200b\u5b83\u200b\u4e4b\u524d\u200b\uff0c\u200b\u8bf7\u200b\u4ed4\u7ec6\u68c0\u67e5\u200b\u5b83\u200b\u3002</p> <p>(1) FLOPs \u200b\u4e0e\u200b\u8f93\u5165\u200b\u5f62\u72b6\u200b\u6709\u5173\u200b\uff0c\u200b\u800c\u200b\u53c2\u200b\u6570\u91cf\u200b\u4e0e\u200b\u8f93\u5165\u200b\u5f62\u72b6\u200b\u65e0\u5173\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u8f93\u5165\u200b\u5f62\u72b6\u200b\u4e3a\u200b (1, 3, 250, 250)\u3002 (2) \u200b\u4e00\u4e9b\u200b\u8fd0\u7b97\u7b26\u200b\u4e0d\u200b\u8ba1\u5165\u200b FLOP\uff0c\u200b\u5982\u200b GN \u200b\u548c\u200b\u81ea\u5b9a\u4e49\u200b\u8fd0\u7b97\u7b26\u200b\u3002 \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b <code>mmcv/cnn/utils/flops_counter.py</code> \u200b\u6765\u200b\u6dfb\u52a0\u200b\u5bf9\u200b\u65b0\u200b\u8fd0\u7b97\u7b26\u200b\u7684\u200b\u652f\u6301\u200b\u3002</p>"},{"location":"user_guides/useful_tools/#_1","title":"\u53d1\u5e03\u200b\u6a21\u578b","text":"<p>\u200b\u5728\u200b\u5c06\u200b\u6a21\u578b\u200b\u4e0a\u200b\u4f20\u5230\u200b AWS \u200b\u4e4b\u524d\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b (1) \u200b\u5c06\u200b\u6a21\u578b\u200b\u6743\u91cd\u200b\u8f6c\u6362\u200b\u4e3a\u200b CPU tensors, (2) \u200b\u5220\u9664\u200b\u4f18\u5316\u200b\u5668\u200b\u72b6\u6001\u200b\uff0c\u200b\u548c\u200b (3) \u200b\u8ba1\u7b97\u200b\u6a21\u578b\u200b\u6743\u91cd\u200b\u6587\u4ef6\u200b\u7684\u200b\u54c8\u5e0c\u200b\u5e76\u200b\u5c06\u200b\u54c8\u5e0c\u200b ID \u200b\u9644\u52a0\u200b\u5230\u200b\u6587\u4ef6\u540d\u200b\u3002</p> <pre><code>python tools/publish_model.py ${INPUT_FILENAME} ${OUTPUT_FILENAME}\n</code></pre> <p>\u200b\u4f8b\u5982\u200b\uff0c</p> <pre><code>python tools/publish_model.py work_dirs/example_exp/latest.pth example_model_20200202.pth\n</code></pre> <p>\u200b\u6700\u7ec8\u200b\u8f93\u51fa\u200b\u6587\u4ef6\u540d\u200b\u5c06\u200b\u662f\u200b <code>example_model_20200202-{hash id}.pth</code>.</p>"},{"location":"user_guides/useful_tools/#onnx","title":"\u8f6c\u6362\u200b\u4e3a\u200b ONNX\uff08\u200b\u5b9e\u9a8c\u6027\u200b\uff09","text":"<p>\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u811a\u672c\u200b\u5c06\u200b\u6a21\u578b\u200b\u8f6c\u6362\u200b\u4e3a\u200b ONNX \u200b\u683c\u5f0f\u200b\u3002 \u200b\u8f6c\u6362\u200b\u540e\u200b\u7684\u200b\u6a21\u578b\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b Netron \u200b\u7b49\u200b\u5de5\u5177\u200b\u8fdb\u884c\u200b\u53ef\u89c6\u5316\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u652f\u6301\u200b\u6bd4\u8f83\u200b Pytorch \u200b\u548c\u200b ONNX \u200b\u6a21\u578b\u200b\u4e4b\u95f4\u200b\u7684\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u3002</p> <pre><code>python tools/pytorch2onnx.py\n    ${CFG_PATH} \\\n    ${CHECKPOINT_PATH} \\\n    ${MODEL_TYPE} \\\n    ${IMAGE_PATH} \\\n    --trimap-path ${TRIMAP_PATH} \\\n    --output-file ${OUTPUT_ONNX} \\\n    --show \\\n    --verify \\\n    --dynamic-export\n</code></pre> <p>\u200b\u53c2\u6570\u200b\u8bf4\u660e\u200b\uff1a</p> <ul> <li><code>config</code> : \u200b\u6a21\u578b\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u3002</li> <li><code>checkpoint</code> : \u200b\u6a21\u578b\u200b\u6a21\u578b\u200b\u6743\u91cd\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u3002</li> <li><code>model_type</code> : \u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7684\u200b\u6a21\u578b\u200b\u7c7b\u578b\u200b\uff0c\u200b\u9009\u9879\u200b\uff1a <code>inpainting</code>, <code>mattor</code>, <code>restorer</code>, <code>synthesizer</code>\u3002</li> <li><code>image_path</code> : \u200b\u8f93\u5165\u200b\u56fe\u50cf\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u3002</li> <li><code>--trimap-path</code> : \u200b\u8f93\u5165\u200b\u4e09\u5143\u200b\u56fe\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\uff0c\u200b\u7528\u4e8e\u200b mattor \u200b\u6a21\u578b\u200b\u3002</li> <li><code>--output-file</code>: \u200b\u8f93\u51fa\u200b ONNX \u200b\u6a21\u578b\u200b\u7684\u200b\u8def\u5f84\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>tmp.onnx</code>\u3002</li> <li><code>--opset-version</code> : ONNX opset \u200b\u7248\u672c\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b 11\u3002</li> <li><code>--show</code>: \u200b\u786e\u5b9a\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u5bfc\u51fa\u200b\u6a21\u578b\u200b\u7684\u200b\u67b6\u6784\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>False</code>\u3002</li> <li><code>--verify</code>: \u200b\u786e\u5b9a\u200b\u662f\u5426\u200b\u9a8c\u8bc1\u200b\u5bfc\u51fa\u200b\u6a21\u578b\u200b\u7684\u200b\u6b63\u786e\u6027\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>False</code>\u3002</li> <li><code>--dynamic-export</code>: \u200b\u786e\u5b9a\u200b\u662f\u5426\u200b\u5bfc\u51fa\u200b\u5177\u6709\u200b\u52a8\u6001\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u5f62\u72b6\u200b\u7684\u200b ONNX \u200b\u6a21\u578b\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>False</code>\u3002</li> </ul> <p>\u200b\u6ce8\u200b\uff1a\u200b\u6b64\u200b\u5de5\u5177\u200b\u4ecd\u200b\u5904\u4e8e\u200b\u8bd5\u9a8c\u200b\u9636\u6bb5\u200b\u3002\u200b\u76ee\u524d\u200b\u4e0d\u200b\u652f\u6301\u200b\u67d0\u4e9b\u200b\u81ea\u5b9a\u4e49\u200b\u8fd0\u7b97\u7b26\u200b\u3002\u200b\u6211\u4eec\u200b\u73b0\u5728\u200b\u53ea\u200b\u652f\u6301\u200b <code>mattor</code> \u200b\u548c\u200b <code>restorer</code>\u3002</p>"},{"location":"user_guides/useful_tools/#onnx_1","title":"\u652f\u6301\u200b\u5bfc\u51fa\u200b\u5230\u200b ONNX \u200b\u7684\u200b\u6a21\u578b\u200b\u5217\u8868","text":"<p>\u200b\u4e0b\u200b\u8868\u5217\u51fa\u200b\u4e86\u200b\u4fdd\u8bc1\u200b\u53ef\u200b\u5bfc\u51fa\u200b\u5230\u200b ONNX \u200b\u5e76\u200b\u53ef\u200b\u5728\u200b ONNX Runtime \u200b\u4e2d\u200b\u8fd0\u884c\u200b\u7684\u200b\u6a21\u578b\u200b\u3002</p> \u200b\u6a21\u578b\u200b \u200b\u914d\u7f6e\u200b \u200b\u52a8\u6001\u200b\u5f62\u72b6\u200b \u200b\u6279\u91cf\u200b\u63a8\u7406\u200b \u200b\u5907\u6ce8\u200b ESRGAN esrgan_x4c64b23g32_g1_400k_div2k.py Y Y ESRGAN esrgan_psnr_x4c64b23g32_g1_1000k_div2k.py Y Y SRCNN srcnn_x4k915_g1_1000k_div2k.py Y Y DIM dim_stage3_v16_pln_1x1_1000k_comp1k.py Y Y GCA gca_r34_4x10_200k_comp1k.py N Y IndexNet indexnet_mobv2_1x16_78k_comp1k.py Y Y <p>\u200b\u6ce8\u200b\uff1a</p> <ul> <li>\u200b\u4ee5\u4e0a\u200b\u6240\u6709\u200b\u6a21\u578b\u200b\u5747\u200b\u4f7f\u7528\u200b Pytorch==1.6.0 \u200b\u548c\u200b onnxruntime==1.5.1</li> <li>\u200b\u5982\u679c\u200b\u60a8\u200b\u9047\u5230\u200b\u4e0a\u9762\u200b\u5217\u51fa\u200b\u7684\u200b\u6a21\u578b\u200b\u7684\u200b\u4efb\u4f55\u200b\u95ee\u9898\u200b\uff0c\u200b\u8bf7\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b issue\uff0c\u200b\u6211\u4eec\u200b\u4f1a\u200b\u5c3d\u5feb\u200b\u5904\u7406\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u5217\u8868\u200b\u4e2d\u672a\u200b\u5305\u542b\u200b\u7684\u200b\u578b\u53f7\u200b\uff0c\u200b\u8bf7\u200b\u5c1d\u8bd5\u200b\u81ea\u884c\u89e3\u51b3\u200b\u3002</li> <li>\u200b\u7531\u4e8e\u200b\u6b64\u200b\u529f\u80fd\u200b\u662f\u200b\u5b9e\u9a8c\u6027\u200b\u7684\u200b\u5e76\u4e14\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5feb\u901f\u200b\u66f4\u6539\u200b\uff0c\u200b\u8bf7\u200b\u59cb\u7ec8\u200b\u5c1d\u8bd5\u200b\u4f7f\u7528\u200b\u6700\u65b0\u200b\u7684\u200b <code>mmcv</code> \u200b\u548c\u200b <code>mmagic</code>\u3002</li> </ul>"},{"location":"user_guides/useful_tools/#onnx-tensorrt","title":"\u5c06\u200b ONNX \u200b\u8f6c\u6362\u200b\u4e3a\u200b TensorRT\uff08\u200b\u5b9e\u9a8c\u6027\u200b\uff09","text":"<p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5c06\u200b ONNX \u200b\u6a21\u578b\u200b\u8f6c\u6362\u200b\u4e3a\u200b TensorRT \u200b\u683c\u5f0f\u200b\u7684\u200b\u811a\u672c\u200b\u3002 \u200b\u6b64\u5916\u200b\uff0c\u200b\u6211\u4eec\u200b\u652f\u6301\u200b\u6bd4\u8f83\u200b ONNX \u200b\u548c\u200b TensorRT \u200b\u6a21\u578b\u200b\u4e4b\u95f4\u200b\u7684\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u3002</p> <pre><code>python tools/onnx2tensorrt.py\n    ${CFG_PATH} \\\n    ${MODEL_TYPE} \\\n    ${IMAGE_PATH} \\\n    ${INPUT_ONNX} \\\n    --trt-file ${OUT_TENSORRT} \\\n    --max-shape INT INT INT INT \\\n    --min-shape INT INT INT INT \\\n    --workspace-size INT \\\n    --fp16 \\\n    --show \\\n    --verify \\\n    --verbose\n</code></pre> <p>\u200b\u53c2\u6570\u200b\u8bf4\u660e\u200b\uff1a</p> <ul> <li><code>config</code> : \u200b\u6a21\u578b\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u3002</li> <li><code>model_type</code> :\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7684\u200b\u6a21\u578b\u200b\u7c7b\u578b\u200b\uff0c\u200b\u9009\u9879\u200b\uff1a <code>inpainting</code>, <code>mattor</code>, <code>restorer</code>, <code>synthesizer</code>\u3002</li> <li><code>img_path</code> : \u200b\u8f93\u5165\u200b\u56fe\u50cf\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u3002</li> <li><code>onnx_file</code> : \u200b\u8f93\u5165\u200b ONNX \u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u3002</li> <li><code>--trt-file</code> : \u200b\u8f93\u51fa\u200b TensorRT \u200b\u6a21\u578b\u200b\u7684\u200b\u8def\u5f84\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>tmp.trt</code>\u3002</li> <li><code>--max-shape</code> : \u200b\u6a21\u578b\u200b\u8f93\u5165\u200b\u7684\u200b\u6700\u5927\u200b\u5f62\u72b6\u200b\u3002</li> <li><code>--min-shape</code> : \u200b\u6a21\u578b\u200b\u8f93\u5165\u200b\u7684\u200b\u6700\u5c0f\u200b\u5f62\u72b6\u200b\u3002</li> <li><code>--workspace-size</code>: \u200b\u4ee5\u200b GiB \u200b\u4e3a\u200b\u5355\u4f4d\u200b\u7684\u200b\u6700\u5927\u200b\u5de5\u4f5c\u200b\u7a7a\u95f4\u200b\u5927\u5c0f\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b 1 GiB\u3002</li> <li><code>--fp16</code>: \u200b\u786e\u5b9a\u200b\u662f\u5426\u200b\u4ee5\u200b fp16 \u200b\u6a21\u5f0f\u200b\u5bfc\u51fa\u200b TensorRT\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>False</code>\u3002</li> <li><code>--show</code>: \u200b\u786e\u5b9a\u200b\u662f\u5426\u200b\u663e\u793a\u200b ONNX \u200b\u548c\u200b TensorRT \u200b\u7684\u200b\u8f93\u51fa\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>False</code>\u3002</li> <li><code>--verify</code>: \u200b\u786e\u5b9a\u200b\u662f\u5426\u200b\u9a8c\u8bc1\u200b\u5bfc\u51fa\u200b\u6a21\u578b\u200b\u7684\u200b\u6b63\u786e\u6027\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>False</code>\u3002</li> <li><code>--verbose</code>: \u200b\u786e\u5b9a\u200b\u5728\u200b\u521b\u5efa\u200b TensorRT \u200b\u5f15\u64ce\u200b\u65f6\u200b\u662f\u5426\u200b\u8be6\u7ec6\u200b\u8bb0\u5f55\u200b\u65e5\u5fd7\u200b\u6d88\u606f\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>False</code>\u3002</li> </ul> <p>\u200b\u6ce8\u200b\uff1a\u200b\u6b64\u200b\u5de5\u5177\u200b\u4ecd\u200b\u5904\u4e8e\u200b\u8bd5\u9a8c\u200b\u9636\u6bb5\u200b\u3002 \u200b\u76ee\u524d\u200b\u4e0d\u200b\u652f\u6301\u200b\u67d0\u4e9b\u200b\u81ea\u5b9a\u4e49\u200b\u8fd0\u7b97\u7b26\u200b\u3002 \u200b\u6211\u4eec\u200b\u73b0\u5728\u200b\u53ea\u200b\u652f\u6301\u200b <code>restorer</code>\u3002 \u200b\u5728\u200b\u751f\u6210\u200b SRCNN \u200b\u7684\u200b ONNX \u200b\u6587\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u5c06\u200b SCRNN \u200b\u6a21\u578b\u200b\u4e2d\u200b\u7684\u200b 'bicubic' \u200b\u66ff\u6362\u200b\u4e3a\u200b 'bilinear' [\u200b\u6b64\u5904\u200b](https://github.com/open-mmlab/mmagic/blob/764e6065e315b7d0033762038fcbf0bb1c570d4d/mmagic.bones/modelsrnn py#L40\uff09\u3002 \u200b\u56e0\u4e3a\u200b TensorRT \u200b\u76ee\u524d\u200b\u4e0d\u200b\u652f\u6301\u200b bicubic \u200b\u63d2\u503c\u200b\uff0c\u200b\u6700\u7ec8\u200b\u6027\u80fd\u200b\u5c06\u200b\u4e0b\u964d\u200b\u7ea6\u200b 4%\u3002</p>"},{"location":"user_guides/useful_tools/#tensorrt","title":"\u652f\u6301\u200b\u5bfc\u51fa\u200b\u5230\u200b TensorRT \u200b\u7684\u200b\u6a21\u578b\u200b\u5217\u8868","text":"<p>\u200b\u4e0b\u200b\u8868\u5217\u51fa\u200b\u4e86\u200b\u4fdd\u8bc1\u200b\u53ef\u200b\u5bfc\u51fa\u200b\u5230\u200b TensorRT \u200b\u5f15\u64ce\u200b\u5e76\u200b\u53ef\u200b\u5728\u200b TensorRT \u200b\u4e2d\u200b\u8fd0\u884c\u200b\u7684\u200b\u6a21\u578b\u200b\u3002</p> \u200b\u6a21\u578b\u200b \u200b\u914d\u7f6e\u200b \u200b\u52a8\u6001\u200b\u5f62\u72b6\u200b \u200b\u6279\u91cf\u200b\u63a8\u7406\u200b \u200b\u5907\u6ce8\u200b ESRGAN esrgan_x4c64b23g32_g1_400k_div2k.py Y Y ESRGAN esrgan_psnr_x4c64b23g32_g1_1000k_div2k.py Y Y SRCNN srcnn_x4k915_g1_1000k_div2k.py Y Y 'bicubic' \u200b\u4e0a\u200b\u91c7\u6837\u200b\u5fc5\u987b\u200b\u66ff\u6362\u200b\u4e3a\u200b 'bilinear' <p>\u200b\u6ce8\u200b\uff1a</p> <ul> <li>\u200b\u4ee5\u4e0a\u200b\u6240\u6709\u200b\u6a21\u578b\u200b\u5747\u200b\u4f7f\u7528\u200b Pytorch==1.8.1\u3001onnxruntime==1.7.0 \u200b\u548c\u200b tensorrt==7.2.3.4 \u200b\u8fdb\u884c\u200b\u6d4b\u8bd5\u200b</li> <li>\u200b\u5982\u679c\u200b\u60a8\u200b\u9047\u5230\u200b\u4e0a\u9762\u200b\u5217\u51fa\u200b\u7684\u200b\u6a21\u578b\u200b\u7684\u200b\u4efb\u4f55\u200b\u95ee\u9898\u200b\uff0c\u200b\u8bf7\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f1a\u200b\u5c3d\u5feb\u200b\u5904\u7406\u200b\u3002 \u200b\u5bf9\u4e8e\u200b\u5217\u8868\u200b\u4e2d\u672a\u200b\u5305\u542b\u200b\u7684\u200b\u578b\u53f7\u200b\uff0c\u200b\u8bf7\u200b\u5c1d\u8bd5\u200b\u81ea\u884c\u89e3\u51b3\u200b\u3002</li> <li>\u200b\u7531\u4e8e\u200b\u6b64\u200b\u529f\u80fd\u200b\u662f\u200b\u5b9e\u9a8c\u6027\u200b\u7684\u200b\u5e76\u4e14\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5feb\u901f\u200b\u66f4\u6539\u200b\uff0c\u200b\u56e0\u6b64\u200b\u8bf7\u200b\u59cb\u7ec8\u200b\u5c1d\u8bd5\u200b\u4f7f\u7528\u200b\u6700\u65b0\u200b\u7684\u200b <code>mmcv</code> \u200b\u548c\u200b <code>mmagic</code>\u3002</li> </ul>"},{"location":"user_guides/useful_tools/#onnx-tensorrt_1","title":"\u8bc4\u4f30\u200b ONNX \u200b\u548c\u200b TensorRT \u200b\u6a21\u578b\u200b\uff08\u200b\u5b9e\u9a8c\u6027\u200b\uff09","text":"<p>\u200b\u6211\u4eec\u200b\u5728\u200b <code>tools/deploy_test.py</code> \u200b\u4e2d\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u8bc4\u4f30\u200b TensorRT \u200b\u548c\u200b ONNX \u200b\u6a21\u578b\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002</p>"},{"location":"user_guides/useful_tools/#_2","title":"\u5148\u51b3\u6761\u4ef6","text":"<p>\u200b\u8981\u200b\u8bc4\u4f30\u200b ONNX \u200b\u548c\u200b TensorRT \u200b\u6a21\u578b\u200b\uff0c\u200b\u5e94\u5148\u200b\u5b89\u88c5\u200b onnx\u3001onnxruntime \u200b\u548c\u200b TensorRT\u3002\u200b\u9075\u5faa\u200b mmcv \u200b\u4e2d\u200b\u7684\u200b ONNXRuntime \u200b\u548c\u200b [mmcv \u200b\u4e2d\u200b\u7684\u200b TensorRT \u200b\u63d2\u4ef6\u200b](https://github.com/open-mmlab/mmcv/blob/master/docs/tensorrt_plugin.md%EF%BC%89%E4%BD%BF%E7%94%A8 ONNXRuntime \u200b\u81ea\u5b9a\u4e49\u200b\u64cd\u4f5c\u200b\u548c\u200b TensorRT \u200b\u63d2\u4ef6\u200b\u5b89\u88c5\u200b <code>mmcv-full</code>\u3002</p>"},{"location":"user_guides/useful_tools/#_3","title":"\u7528\u6cd5","text":"<pre><code>python tools/deploy_test.py \\\n    ${CONFIG_FILE} \\\n    ${MODEL_PATH} \\\n    ${BACKEND} \\\n    --out ${OUTPUT_FILE} \\\n    --save-path ${SAVE_PATH} \\\n    ----cfg-options ${CFG_OPTIONS} \\\n</code></pre>"},{"location":"user_guides/useful_tools/#_4","title":"\u53c2\u6570\u200b\u8bf4\u660e\u200b\uff1a","text":"<ul> <li><code>config</code>: \u200b\u6a21\u578b\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u3002</li> <li><code>model</code>: TensorRT \u200b\u6216\u200b ONNX \u200b\u6a21\u578b\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u3002</li> <li><code>backend</code>: \u200b\u7528\u4e8e\u200b\u6d4b\u8bd5\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\uff0c\u200b\u9009\u62e9\u200b tensorrt \u200b\u6216\u200b onnxruntime\u3002</li> <li><code>--out</code>: pickle \u200b\u683c\u5f0f\u200b\u7684\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u3002</li> <li><code>--save-path</code>: \u200b\u5b58\u50a8\u200b\u56fe\u50cf\u200b\u7684\u200b\u8def\u5f84\u200b\uff0c\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u7ed9\u51fa\u200b\uff0c\u200b\u5219\u200b\u4e0d\u4f1a\u200b\u4fdd\u5b58\u200b\u56fe\u50cf\u200b\u3002</li> <li><code>--cfg-options</code>: \u200b\u8986\u76d6\u200b\u4f7f\u7528\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e9b\u200b\u8bbe\u7f6e\u200b\uff0c<code>xxx=yyy</code> \u200b\u683c\u5f0f\u200b\u7684\u200b\u952e\u503c\u200b\u5bf9\u200b\u5c06\u200b\u88ab\u200b\u5408\u5e76\u200b\u5230\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u3002</li> </ul>"},{"location":"user_guides/useful_tools/#_5","title":"\u7ed3\u679c\u200b\u548c\u200b\u6a21\u578b","text":"Model Config Dataset Metric PyTorch ONNX Runtime TensorRT FP32 TensorRT FP16 ESRGAN <code>esrgan_x4c64b23g32_g1_400k_div2k.py</code> Set5 PSNR 28.2700 28.2619 28.2619 28.2616 SSIM 0.7778 0.7784 0.7784 0.7783 Set14 PSNR 24.6328 24.6290 24.6290 24.6274 SSIM 0.6491 0.6494 0.6494 0.6494 DIV2K PSNR 26.6531 26.6532 26.6532 26.6532 SSIM 0.7340 0.7340 0.7340 0.7340 ESRGAN <code>esrgan_psnr_x4c64b23g32_g1_1000k_div2k.py</code> Set5 PSNR 30.6428 30.6307 30.6307 30.6305 SSIM 0.8559 0.8565 0.8565 0.8566 Set14 PSNR 27.0543 27.0422 27.0422 27.0411 SSIM 0.7447 0.7450 0.7450 0.7449 DIV2K PSNR 29.3354 29.3354 29.3354 29.3339 SSIM 0.8263 0.8263 0.8263 0.8263 SRCNN <code>srcnn_x4k915_g1_1000k_div2k.py</code> Set5 PSNR 28.4316 28.4120 27.2144 27.2127 SSIM 0.8099 0.8106 0.7782 0.7781 Set14 PSNR 25.6486 25.6367 24.8613 24.8599 SSIM 0.7014 0.7015 0.6674 0.6673 DIV2K PSNR 27.7460 27.7460 26.9891 26.9862 SSIM 0.7854 0.78543 0.7605 0.7604 <p>\u200b\u6ce8\u200b\uff1a</p> <ul> <li>\u200b\u6240\u6709\u200b ONNX \u200b\u548c\u200b TensorRT \u200b\u6a21\u578b\u200b\u90fd\u200b\u4f7f\u7528\u200b\u6570\u636e\u200b\u96c6\u4e0a\u200b\u7684\u200b\u52a8\u6001\u200b\u5f62\u72b6\u200b\u8fdb\u884c\u200b\u8bc4\u4f30\u200b\uff0c\u200b\u56fe\u50cf\u200b\u6839\u636e\u200b\u539f\u59cb\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u8fdb\u884c\u200b\u9884\u5904\u7406\u200b\u3002</li> <li>\u200b\u6b64\u200b\u5de5\u5177\u200b\u4ecd\u200b\u5904\u4e8e\u200b\u8bd5\u9a8c\u200b\u9636\u6bb5\u200b\uff0c\u200b\u6211\u4eec\u200b\u76ee\u524d\u200b\u4ec5\u200b\u652f\u6301\u200b <code>restorer</code>\u3002</li> </ul>"},{"location":"user_guides/visualization/","title":"\u6559\u7a0b\u200b 6\uff1a\u200b\u53ef\u89c6\u5316","text":"<p>\u200b\u56fe\u50cf\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u662f\u200b\u8861\u91cf\u200b\u56fe\u50cf\u5904\u7406\u200b\u3001\u200b\u7f16\u8f91\u200b\u548c\u200b\u5408\u6210\u200b\u8d28\u91cf\u200b\u7684\u200b\u91cd\u8981\u200b\u624b\u6bb5\u200b\u3002 \u200b\u5728\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u4f7f\u7528\u200b <code>visualizer</code> \u200b\u53ef\u4ee5\u200b\u5728\u200b\u8bad\u7ec3\u200b\u6216\u200b\u6d4b\u8bd5\u200b\u65f6\u200b\u4fdd\u5b58\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8ddf\u968f\u200bMMEngine\u200b\u6587\u6863\u200b\u5b66\u4e60\u200b\u53ef\u89c6\u5316\u200b\u7684\u200b\u7528\u6cd5\u200b\u3002MMagic\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u5957\u200b\u4e30\u5bcc\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u529f\u80fd\u200b\u3002 \u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ecb\u7ecd\u200bMMagic\u200b\u63d0\u4f9b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u51fd\u6570\u200b\u7684\u200b\u7528\u6cd5\u200b\u3002</p> <ul> <li>\u200b\u6559\u7a0b\u200b6:\u200b\u53ef\u89c6\u5316\u200b</li> <li>\u200b\u6982\u8ff0\u200b<ul> <li>GAN\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u7ffb\u8bd1\u200b\u6a21\u578b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u6269\u6563\u200b\u6a21\u578b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u8865\u5168\u200b\u6a21\u578b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e\u200b</li> <li>\u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u6a21\u578b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e\u200b</li> <li>SISR/VSR/VFI\u200b\u7b49\u200b\u6a21\u578b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e\u200b</li> </ul> </li> <li>\u200b\u53ef\u89c6\u5316\u200b\u94a9\u5b50\u200b</li> <li>\u200b\u53ef\u89c6\u5316\u200b\u5668\u200b</li> <li>\u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b<ul> <li>\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u5b58\u50a8\u200b\u540e\u200b\u7aef\u200b\u53ef\u89c6\u5316\u200b</li> </ul> </li> </ul>"},{"location":"user_guides/visualization/#_1","title":"\u6982\u8ff0","text":"<p>\u200b\u5efa\u8bae\u200b\u5148\u200b\u5b66\u4e60\u200b \u200b\u8bbe\u8ba1\u200b\u6587\u6863\u200b \u200b\u91cc\u200b\u5173\u4e8e\u200b\u53ef\u89c6\u5316\u200b\u7684\u200b\u57fa\u672c\u6982\u5ff5\u200b\u3002</p> <p>\u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\uff0c\u200b\u8bad\u7ec3\u200b\u6216\u200b\u6d4b\u8bd5\u200b\u8fc7\u7a0b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u9700\u8981\u200b\u914d\u7f6e\u200b\u4e09\u4e2a\u200b\u7ec4\u4ef6\u200b:<code>VisualizationHook</code>\u3001<code>Visualizer</code>\u200b\u548c\u200b<code>VisBackend</code>, \u200b\u5982\u4e0b\u200b\u56fe\u8868\u200b\u5c55\u793a\u200b\u4e86\u200b <code>Visualizer</code> \u200b\u548c\u200b <code>VisBackend</code> \u200b\u7684\u200b\u5173\u7cfb\u200b\u3002</p> <p>VisualizationHook \u200b\u5728\u200b\u8bad\u7ec3\u200b\u671f\u95f4\u200b\u4ee5\u200b\u56fa\u5b9a\u200b\u7684\u200b\u95f4\u9694\u200b\u83b7\u53d6\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u4f20\u9012\u200b\u7ed9\u200bVisualizer\u3002 Visualizer \u200b\u8d1f\u8d23\u200b\u5c06\u200b\u539f\u59cb\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u7c7b\u578b\u200b(png, gif\u200b\u7b49\u200b)\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u5176\u200b\u4f20\u8f93\u200b\u5230\u200bVisBackend\u200b\u8fdb\u884c\u200b\u5b58\u50a8\u200b\u6216\u200b\u663e\u793a\u200b\u3002</p>"},{"location":"user_guides/visualization/#gan","title":"GAN\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e","text":"<p>\u200b\u5bf9\u4e8e\u200b\u50cf\u200b<code>StyleGAN</code>\u200b\u548c\u200b<code>SAGAN</code>\u200b\u8fd9\u6837\u200b\u7684\u200bGAN\u200b\u6a21\u578b\u200b\uff0c\u200b\u901a\u5e38\u200b\u7684\u200b\u914d\u7f6e\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b:</p> <pre><code># \u200b\u53ef\u89c6\u5316\u200b\u94a9\u5b50\u200b\ncustom_hooks = [\n    dict(\n        type='VisualizationHook',\n        interval=5000,  # \u200b\u914d\u7f6e\u200b\u53ef\u89c6\u5316\u200b\u52fe\u5b50\u200b\u7684\u200b\u95f4\u9694\u200b\u6570\u200b\n        fixed_input=True,  # \u200b\u662f\u5426\u200b\u56fa\u5b9a\u200b\u566a\u58f0\u200b\u8f93\u5165\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\n        vis_kwargs_list=dict(type='GAN', name='fake_img')  # \u200b\u5bf9\u4e8e\u200bGAN\u200b\u6a21\u578b\u200b\u9884\u5148\u200b\u5b9a\u4e49\u200b\u53ef\u89c6\u5316\u200b\u53c2\u6570\u200b\n    )\n]\n# \u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\nvis_backends = [\n    dict(type='VisBackend'),  # \u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u3002\n    dict(type='WandbVisBackend',  # \u200b\u53ef\u4ee5\u200b\u4e0a\u4f20\u200b\u81f3\u200bWandb\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\n        init_kwargs=dict(\n            project='MMagic',   # Wandb\u200b\u9879\u76ee\u200b\u540d\u200b\n            name='GAN-Visualization-Demo'  # Wandb\u200b\u5b9e\u9a8c\u200b\u547d\u540d\u200b\n        ))\n]\n# \u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\nvisualizer = dict(type='Visualizer', vis_backends=vis_backends)\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5c06\u200b\u6307\u6570\u200b\u79fb\u52a8\u200b\u5e73\u5747\u200b(EMA)\u200b\u5e94\u7528\u200b\u4e8e\u200b\u751f\u6210\u5668\u200b\uff0c\u200b\u5e76\u200b\u5e0c\u671b\u200b\u53ef\u89c6\u5316\u200bEMA\u200b\u6a21\u578b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4fee\u6539\u200b<code>VisualizationHook</code>\u200b\u7684\u200b\u914d\u7f6e\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b:</p> <pre><code>custom_hooks = [\n   dict(\n       type='VisualizationHook',\n       interval=5000,\n       fixed_input=True,\n       # \u200b\u540c\u65f6\u200b\u5728\u200b`fake_img`\u200b\u4e2d\u200b\u53ef\u89c6\u5316\u200bema\u200b\u4ee5\u53ca\u200borig\n       vis_kwargs_list=dict(\n           type='Noise',\n           name='fake_img',  # \u200b\u4f7f\u7528\u200b`fake_img`\u200b\u4fdd\u5b58\u200b\u56fe\u7247\u200b\n           sample_model='ema/orig',  # \u200b\u5bf9\u4e8e\u200b`NoiseSampler`\u200b\u7279\u522b\u200b\u5b9a\u4e49\u200b\u53c2\u6570\u200b\n           target_keys=['ema.fake_img', 'orig.fake_img']  # \u200b\u6307\u5b9a\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u7684\u200b\u952e\u503c\u200b\n       ))\n]\n</code></pre>"},{"location":"user_guides/visualization/#_2","title":"\u56fe\u50cf\u200b\u7ffb\u8bd1\u200b\u6a21\u578b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e","text":"<p>\u200b\u5bf9\u4e8e\u200b<code>CycleGAN</code>\u3001<code>Pix2Pix</code>\u200b\u7b49\u200b\u7ffb\u8bd1\u200b\u6a21\u578b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5f62\u6210\u200b\u5982\u4e0b\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e\u200b:</p> <pre><code># \u200b\u53ef\u89c6\u5316\u200b\u94a9\u5b50\u200b\ncustom_hooks = [\n    dict(\n        type='VisualizationHook',\n        interval=5000,\n        fixed_input=True,\n        vis_kwargs_list=[\n            dict(\n                type='Translation',  # \u200b\u5728\u200b\u8bad\u7ec3\u200b\u96c6\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\n                name='trans'),  #  \u200b\u4fdd\u5b58\u200b`trans`\u200b\u5b57\u6bb5\u200b\u7684\u200b\u56fe\u50cf\u200b\n            dict(\n                type='Translationval',  # \u200b\u5728\u200b\u9a8c\u8bc1\u200b\u96c6\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\n                name='trans_val'),  #  \u200b\u4fdd\u5b58\u200b`trans_val`\u200b\u5b57\u6bb5\u200b\u7684\u200b\u56fe\u50cf\u200b\n        ])\n]\n# \u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\nvis_backends = [\n    dict(type='VisBackend'),  # \u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u3002\n    dict(type='WandbVisBackend',  # \u200b\u53ef\u4ee5\u200b\u4e0a\u4f20\u200b\u81f3\u200bWandb\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\n        init_kwargs=dict(\n            project='MMagic',   # Wandb\u200b\u9879\u76ee\u200b\u540d\u200b\n            name='Translation-Visualization-Demo'  # Wandb\u200b\u5b9e\u9a8c\u200b\u547d\u540d\u200b\n        ))\n]\n# \u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\nvisualizer = dict(type='Visualizer', vis_backends=vis_backends)\n</code></pre>"},{"location":"user_guides/visualization/#_3","title":"\u6269\u6563\u200b\u6a21\u578b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e","text":"<p>\u200b\u5bf9\u4e8e\u200b\u6269\u6563\u200b\u6a21\u578b\u200b\uff0c\u200b\u4f8b\u5982\u200b<code>Improved-DDPM</code>\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b\u901a\u8fc7\u200bgif\u200b\u6765\u200b\u53ef\u89c6\u5316\u200b\u53bb\u200b\u566a\u200b\u8fc7\u7a0b\u200b:</p> <pre><code># \u200b\u53ef\u89c6\u5316\u200b\u94a9\u5b50\u200b\ncustom_hooks = [\n    dict(\n        type='VisualizationHook',\n        interval=5000,\n        fixed_input=True,\n        vis_kwargs_list=dict(type='DDPMDenoising'))  # \u200b\u5bf9\u4e8e\u200bDDPM\u200b\u6a21\u578b\u200b\u9884\u5148\u200b\u5b9a\u4e49\u200b\u53ef\u89c6\u5316\u200b\u53c2\u6570\u200b\n]\n# \u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\nvis_backends = [\n    dict(type='VisBackend'),  # \u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u3002\n    dict(type='WandbVisBackend',  # \u200b\u53ef\u4ee5\u200b\u4e0a\u4f20\u200b\u81f3\u200bWandb\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\n        init_kwargs=dict(\n            project='MMagic',   # Wandb\u200b\u9879\u76ee\u200b\u540d\u200b\n            name='Diffusion-Visualization-Demo'  # Wandb\u200b\u5b9e\u9a8c\u200b\u547d\u540d\u200b\n        ))\n]\n# \u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\nvisualizer = dict(type='Visualizer', vis_backends=vis_backends)\n</code></pre>"},{"location":"user_guides/visualization/#_4","title":"\u56fe\u50cf\u200b\u8865\u5168\u200b\u6a21\u578b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e","text":"<p>\u200b\u5bf9\u4e8e\u200b\u56fe\u50cf\u200b\u8865\u5168\u200b\u6a21\u578b\u200b\uff0c\u200b\u5982\u200b<code>AOT-GAN</code>\u200b\u548c\u200b<code>Global&amp;Local</code>\uff0c\u200b\u901a\u5e38\u200b\u7684\u200b\u914d\u7f6e\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b:</p> <pre><code># \u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\nvis_backends = [dict(type='LocalVisBackend')]\n# \u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\nvisualizer = dict(\n    type='ConcatImageVisualizer',\n    vis_backends=vis_backends,\n    fn_key='gt_path',\n    img_keys=['gt_img', 'input', 'pred_img'],\n    bgr2rgb=True)\n# \u200b\u53ef\u89c6\u5316\u200b\u94a9\u5b50\u200b\ncustom_hooks = [dict(type='BasicVisualizationHook', interval=1)]\n</code></pre>"},{"location":"user_guides/visualization/#_5","title":"\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u6a21\u578b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e","text":"<p>\u200b\u5bf9\u4e8e\u200b<code>DIM</code>\u200b\u548c\u200b<code>GCA</code>\u200b\u7b49\u200b\u56fe\u50cf\u200b\u62a0\u200b\u56fe\u200b\u6a21\u578b\u200b\uff0c\u200b\u901a\u5e38\u200b\u7684\u200b\u914d\u7f6e\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b:</p> <pre><code># \u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\nvis_backends = [dict(type='LocalVisBackend')]\n# \u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\nvisualizer = dict(\n    type='ConcatImageVisualizer',\n    vis_backends=vis_backends,\n    fn_key='trimap_path',\n    img_keys=['pred_alpha', 'trimap', 'gt_merged', 'gt_alpha'],\n    bgr2rgb=True)\n# \u200b\u53ef\u89c6\u5316\u200b\u94a9\u5b50\u200b\ncustom_hooks = [dict(type='BasicVisualizationHook', interval=1)]\n</code></pre>"},{"location":"user_guides/visualization/#sisrvsrvfi","title":"SISR/VSR/VFI\u200b\u7b49\u200b\u6a21\u578b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u914d\u7f6e","text":"<p>\u200b\u5bf9\u4e8e\u200bSISR/VSR/VFI\u200b\u7b49\u200b\u6a21\u578b\u200b\uff0c\u200b\u5982\u200b<code>EDSR</code>, <code>EDVR</code>\u200b\u548c\u200b<code>CAIN</code>\uff0c\u200b\u901a\u5e38\u200b\u7684\u200b\u914d\u7f6e\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b:</p> <pre><code># \u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\nvis_backends = [dict(type='LocalVisBackend')]\n# \u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\nvisualizer = dict(\n    type='ConcatImageVisualizer',\n    vis_backends=vis_backends,\n    fn_key='gt_path',\n    img_keys=['gt_img', 'input', 'pred_img'],\n    bgr2rgb=False)\n# \u200b\u53ef\u89c6\u5316\u200b\u94a9\u5b50\u200b\ncustom_hooks = [dict(type='BasicVisualizationHook', interval=1)]\n</code></pre> <p>\u200b\u53ef\u89c6\u5316\u200b\u94a9\u5b50\u200b\u3001\u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\u548c\u200b\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u5177\u4f53\u200b\u914d\u7f6e\u200b\u5982\u4e0b\u200b\u6240\u8ff0\u200b.</p>"},{"location":"user_guides/visualization/#_6","title":"\u53ef\u89c6\u5316\u200b\u94a9\u5b50","text":"<p>\u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b<code>BasicVisualizationHook</code>\u200b\u548c\u200b<code>VisualizationHook</code>\u200b\u4f5c\u4e3a\u200b\u53ef\u89c6\u5316\u200b\u94a9\u5b50\u200b\u3002 \u200b\u53ef\u89c6\u5316\u200b\u94a9\u5b50\u200b\u652f\u6301\u200b\u4ee5\u4e0b\u200b\u4e09\u79cd\u200b\u60c5\u51b5\u200b\u3002</p> <p>(1) \u200b\u4fee\u6539\u200b<code>vis_kwargs_list</code>\uff0c\u200b\u5b9e\u73b0\u200b\u7279\u5b9a\u200b\u8f93\u5165\u200b\u4e0b\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\uff0c\u200b\u9002\u7528\u200b\u4e8e\u200b\u7279\u5b9a\u200b\u6570\u636e\u200b\u8f93\u5165\u200b\u4e0b\u200bGAN\u200b\u751f\u6210\u200b\u7ed3\u679c\u200b\u548c\u200b\u56fe\u50cf\u200b\u7ffb\u8bd1\u200b\u6a21\u578b\u200b\u7684\u200b\u7ffb\u8bd1\u200b\u7ed3\u679c\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u7b49\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e24\u4e2a\u200b\u5178\u578b\u200b\u7684\u200b\u4f8b\u5b50\u200b:</p> <pre><code># input as dict\nvis_kwargs_list = dict(\n    type='Noise',  # \u200b\u4f7f\u7528\u200b'Noise'\u200b\u91c7\u6837\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u8f93\u5165\u200b\n    name='fake_img',  # \u200b\u5b9a\u4e49\u200b\u4fdd\u5b58\u200b\u56fe\u50cf\u200b\u7684\u200b\u547d\u540d\u200b\n)\n\n# input as list of dict\nvis_kwargs_list = [\n    dict(type='Arguments',  # \u200b\u4f7f\u7528\u200b'Arguments'\u200b\u91c7\u6837\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u8f93\u5165\u200b\n         name='arg_output',  # \u200b\u5b9a\u4e49\u200b\u4fdd\u5b58\u200b\u56fe\u50cf\u200b\u7684\u200b\u547d\u540d\u200b\n         vis_mode='gif',  # \u200b\u901a\u8fc7\u200bgif\u200b\u6765\u200b\u53ef\u89c6\u5316\u200b\n         forward_kwargs=dict(forward_mode='sampling', sample_kwargs=dict(show_pbar=True))  # \u200b\u4e3a\u200b'Arguments'\u200b\u91c7\u6837\u200b\u5b9a\u4e49\u200b\u53c2\u6570\u200b\n    ),\n    dict(type='Data',  # \u200b\u5728\u200bdataloader\u200b\u4f7f\u7528\u200b'Data'\u200b\u91c7\u6837\u200b\u63d0\u4f9b\u6570\u636e\u200b\u4f5c\u4e3a\u200b\u53ef\u89c6\u5316\u200b\u8f93\u5165\u200b\n         n_samples=36,  # \u200b\u5b9a\u4e49\u200b\u591a\u5c11\u200b\u91c7\u6837\u200b\u751f\u6210\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\n         fixed_input=False,  # \u200b\u5b9a\u4e49\u200b\u5bf9\u4e8e\u200b\u53ef\u89c6\u5316\u200b\u8fc7\u7a0b\u200b\u4e0d\u200b\u56fa\u5b9a\u200b\u8f93\u5165\u200b\n    )\n]\n</code></pre> <p><code>vis_kwargs_list</code>\u200b\u63a5\u53d7\u200b\u5b57\u5178\u200b\u6216\u200b\u5b57\u5178\u200b\u7684\u200b\u5217\u8868\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u5b57\u5178\u200b\u5fc5\u987b\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b<code>type</code>\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u6307\u793a\u200b\u7528\u4e8e\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u8f93\u5165\u200b\u7684\u200b\u91c7\u6837\u5668\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6bcf\u4e2a\u200b\u5b57\u5178\u200b\u8fd8\u200b\u5fc5\u987b\u200b\u5305\u542b\u200b\u91c7\u6837\u5668\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\u5b57\u200b\u6bb5\u200b(\u200b\u4f8b\u5982\u200b:<code>ArgumentSampler</code>\u200b\u8981\u6c42\u200b\u53c2\u6570\u200b\u5b57\u5178\u200b\u5305\u542b\u200b<code>forward_kwargs</code>)\u3002</p> <p>\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u6b64\u200b\u5185\u5bb9\u200b\u7531\u200b\u76f8\u5e94\u200b\u7684\u200b\u91c7\u6837\u5668\u200b\u68c0\u67e5\u200b\uff0c\u200b\u4e0d\u200b\u53d7\u200b<code>BasicVisualizationHook</code>\u200b\u7684\u200b\u9650\u5236\u200b\u3002</p> <p>\u200b\u6b64\u5916\u200b\uff0c\u200b\u5176\u4ed6\u200b\u5b57\u6bb5\u200b\u662f\u200b\u901a\u7528\u5b57\u200b\u6bb5\u200b(\u200b\u4f8b\u5982\u200b:<code>n_samples</code>\u3001<code>n_row</code>,<code>name</code>,<code>fixed_input</code>\u200b\u7b49\u7b49\u200b)\u3002 \u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u4f20\u5165\u200b\uff0c\u200b\u5219\u200b\u4f7f\u7528\u200b<code>BasicVisualizationHook</code>\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\u9ed8\u8ba4\u503c\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u65b9\u4fbf\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b\uff0cMMagic\u200b\u4e3a\u200bGAN\u3001Translation models\u3001SinGAN\u200b\u548c\u200bDiffusion models\u200b\u9884\u7f6e\u200b\u4e86\u200b\u53ef\u89c6\u5316\u200b\u53c2\u6570\u200b\uff0c\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b\u9884\u5b9a\u200b\u4e49\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u65b9\u6cd5\u200b:</p> <pre><code>vis_kwargs_list = dict(type='GAN')\nvis_kwargs_list = dict(type='SinGAN')\nvis_kwargs_list = dict(type='Translation')\nvis_kwargs_list = dict(type='TranslationVal')\nvis_kwargs_list = dict(type='TranslationTest')\nvis_kwargs_list = dict(type='DDPMDenoising')\n</code></pre>"},{"location":"user_guides/visualization/#_7","title":"\u53ef\u89c6\u5316\u200b\u5668","text":"<p>\u200b\u5728\u200bMMagic\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5b9e\u73b0\u200b\u4e86\u200b<code>ConcatImageVisualizer</code>\u200b\u548c\u200b<code>Visualizer</code>\uff0c\u200b\u5b83\u4eec\u200b\u7ee7\u627f\u200b\u81ea\u200b<code>mmengine.Visualizer</code>\u3002 <code>Visualizer</code>\u200b\u7684\u200b\u57fa\u7c7b\u200b\u662f\u200b<code>ManagerMixin</code>\uff0c\u200b\u8fd9\u200b\u4f7f\u5f97\u200b<code>Visualizer</code>\u200b\u6210\u4e3a\u200b\u4e00\u4e2a\u200b\u5168\u5c40\u200b\u552f\u4e00\u200b\u7684\u200b\u5bf9\u8c61\u200b\u3002 \u200b\u5728\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4e4b\u540e\u200b\uff0c<code>Visualizer</code>\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4ee3\u7801\u200b\u7684\u200b\u4efb\u4f55\u200b\u5730\u65b9\u200b\u901a\u8fc7\u200b<code>Visualizer.get_current_instance()</code>\u200b\u8c03\u7528\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b:</p> <pre><code># configs\nvis_backends = [dict(type='VisBackend')]\nvisualizer = dict(\n    type='Visualizer', vis_backends=vis_backends, name='visualizer')\n</code></pre> <pre><code># `get_instance()` \u200b\u662f\u200b\u4e3a\u200b\u5168\u5c40\u200b\u552f\u4e00\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u8c03\u7528\u200b\nVISUALIZERS.build(cfg.visualizer)\n\n# \u200b\u901a\u8fc7\u200b\u4e0a\u8ff0\u200b\u4ee3\u7801\u200b\u5b9e\u4f8b\u200b\u5316\u540e\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4efb\u4f55\u200b\u4f4d\u7f6e\u200b\u8c03\u7528\u200b`get_current_instance`\u200b\u65b9\u6cd5\u200b\u6765\u200b\u83b7\u53d6\u200b\u53ef\u89c6\u5316\u200b\u5668\u200b\nvisualizer = Visualizer.get_current_instance()\n</code></pre> <p><code>Visualizer</code>\u200b\u7684\u200b\u6838\u5fc3\u200b\u63a5\u53e3\u200b\u662f\u200b<code>add_datasample</code>\u3002 \u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u754c\u9762\u200b\uff0c\u200b\u8be5\u200b\u63a5\u53e3\u200b\u5c06\u200b\u6839\u636e\u200b\u76f8\u5e94\u200b\u7684\u200b<code>vis_mode</code>\u200b\u8c03\u7528\u200b\u76f8\u5e94\u200b\u7684\u200b\u7ed8\u56fe\u200b\u51fd\u6570\u200b\uff0c\u200b\u4ee5\u200b\u83b7\u5f97\u200b<code>np.ndarray</code>\u200b\u7c7b\u578b\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\u3002 \u200b\u7136\u540e\u200b\u8c03\u7528\u200b<code>show</code>\u200b\u6216\u200b<code>add_image</code>\u200b\u6765\u200b\u76f4\u63a5\u200b\u663e\u793a\u200b\u7ed3\u679c\u200b\u6216\u200b\u5c06\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\u4f20\u9012\u200b\u7ed9\u200b\u9884\u5b9a\u200b\u4e49\u200b\u7684\u200b<code>vis_backend</code>\u3002</p>"},{"location":"user_guides/visualization/#_8","title":"\u53ef\u89c6\u5316\u200b\u540e\u200b\u7aef","text":"<ul> <li>MMEngine\u200b\u7684\u200b\u57fa\u672c\u200bVisBackend\u200b\u5305\u62ec\u200b<code>LocalVisBackend</code>\u3001<code>TensorboardVisBackend</code>\u200b\u548c\u200b<code>WandbVisBackend</code>\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5173\u6ce8\u200bMMEngine Documents\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u6709\u5173\u200b\u5b83\u4eec\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</li> <li><code>VisBackend</code>: File System\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\u3002\u200b\u5c06\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\u4fdd\u5b58\u200b\u5230\u200b\u76f8\u5e94\u200b\u4f4d\u7f6e\u200b\u3002</li> <li><code>TensorboardVisBackend</code>: Tensorboard\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\u3002\u200b\u5c06\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\u53d1\u9001\u5230\u200bTensorboard\u3002</li> <li><code>WandbVisBackend</code>: Wandb\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\u3002\u200b\u5c06\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\u53d1\u9001\u5230\u200bTensorboard\u3002</li> </ul> <p>\u200b\u4e00\u4e2a\u200b<code>Visualizer</code>\u200b\u5bf9\u8c61\u200b\u53ef\u4ee5\u200b\u8bbf\u95ee\u200b\u4efb\u610f\u200b\u6570\u91cf\u200b\u7684\u200b<code>visbackend</code>\uff0c\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u901a\u8fc7\u200b\u7c7b\u540d\u200b\u8bbf\u95ee\u200b\u540e\u200b\u7aef\u200b\u3002</p> <pre><code># \u200b\u914d\u7f6e\u6587\u4ef6\u200b\nvis_backends = [dict(type='Visualizer'), dict(type='WandbVisBackend')]\nvisualizer = dict(\n    type='Visualizer', vis_backends=vis_backends, name='visualizer')\n</code></pre> <pre><code># \u200b\u4ee3\u7801\u200b\u5185\u200b\nVISUALIZERS.build(cfg.visualizer)\nvisualizer = Visualizer.get_current_instance()\n\n# \u200b\u901a\u8fc7\u200b\u7c7b\u540d\u200b\u8bbf\u95ee\u200b\u540e\u200b\u7aef\u200b\ngen_vis_backend = visualizer.get_backend('VisBackend')\ngen_wandb_vis_backend = visualizer.get_backend('GenWandbVisBackend')\n</code></pre> <p>\u200b\u5f53\u6709\u200b\u591a\u4e2a\u200b<code>VisBackend</code>\u200b\u5177\u6709\u200b\u76f8\u540c\u200b\u7684\u200b\u7c7b\u200b\u540d\u65f6\u200b\uff0c\u200b\u7528\u6237\u200b\u5fc5\u987b\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b<code>VisBackend</code>\u200b\u6307\u5b9a\u200b\u540d\u79f0\u200b\u3002</p> <pre><code># \u200b\u914d\u7f6e\u6587\u4ef6\u200b\nvis_backends = [\n    dict(type='VisBackend', name='gen_vis_backend_1'),\n    dict(type='VisBackend', name='gen_vis_backend_2')\n]\nvisualizer = dict(\n    type='Visualizer', vis_backends=vis_backends, name='visualizer')\n</code></pre> <pre><code># \u200b\u4ee3\u7801\u200b\u5185\u200b\nVISUALIZERS.build(cfg.visualizer)\nvisualizer = Visualizer.get_current_instance()\n\nlocal_vis_backend_1 = visualizer.get_backend('gen_vis_backend_1')\nlocal_vis_backend_2 = visualizer.get_backend('gen_vis_backend_2')\n</code></pre>"},{"location":"user_guides/visualization/#_9","title":"\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u5b58\u50a8\u200b\u540e\u200b\u7aef\u200b\u53ef\u89c6\u5316","text":"<p>\u200b\u5982\u679c\u200b\u60f3\u200b\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u5b58\u50a8\u200b\u540e\u200b\u7aef\u200b( Wandb, Tensorboard, \u200b\u6216\u8005\u200b\u8fdc\u7a0b\u200b\u7a97\u53e3\u200b\u91cc\u200b\u5e38\u89c4\u200b\u7684\u200b\u540e\u200b\u7aef\u200b)\uff0c\u200b\u50cf\u200b\u4ee5\u4e0b\u200b\u8fd9\u6837\u200b\u6539\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7684\u200b <code>vis_backends</code> \u200b\u5c31\u884c\u4e86\u200b\uff1a</p> <p>Local</p> <pre><code>vis_backends = [dict(type='LocalVisBackend')]\n</code></pre> <p>Tensorboard</p> <pre><code>vis_backends = [dict(type='TensorboardVisBackend')]\nvisualizer = dict(\n    type='ConcatImageVisualizer', vis_backends=vis_backends, name='visualizer')\n</code></pre> <p>Wandb</p> <pre><code>vis_backends = [dict(type='WandbVisBackend', init_kwargs=dict(project={PROJECTS}, name={EXPNAME}))]\nvisualizer = dict(\n    type='ConcatImageVisualizer', vis_backends=vis_backends, name='visualizer')\n</code></pre>"}]}